@using FinPlan.Shared.Models
@using FinPlan.Shared.Models.Spending
@using Microsoft.AspNetCore.Components
@using System.Reflection

<style>
    .wizard-step-bubble {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        background: #6D5DFC; /* accent color used elsewhere */
        color: #fff;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(109,93,252,0.18);
    }

    .wizard-header-row {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .wizard-step-text {
        color: var(--muted);
        font-size: 0.9rem;
    }

    .small-note {
        font-size: 0.85rem;
        color: var(--muted);
        margin-top: 4px;
    }
</style>

@if (Visible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1055;">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="wizard-header-row">
                        <div class="wizard-step-bubble">@wizardStep</div>
                        <div>
                            <h5 class="modal-title" style="margin:0;">Retirement Plan Inputs</h5>
                            <div class="wizard-step-text">Step @wizardStep of 6</div>
                        </div>
                    </div>
                    <button type="button" class="btn-close" aria-label="Save & Close" @onclick="CloseClicked"></button>
                </div>
                <div class="modal-body" style="min-height:360px; max-height:520px; overflow:auto;">
                    @if (wizardStep == 1)
                    {
                        <label class="form-label">Retirement Ages & Life Expectancy</label>
                        <div class="row g-2">
                            <div class="col-md-6">
                                <label class="form-label">Retirement age (You)</label>
                                <input class="form-control" type="number" @bind="Model.RetirementAgeYou" min="40" max="120" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Retirement age (Partner)</label>
                                <input class="form-control" type="number" @bind="Model.RetirementAgePartner" min="40" max="120" />
                            </div>
                        </div>

                        <div class="row g-2 mt-3">
                            <div class="col-md-6">
                                <label class="form-label">Life expectancy (You)</label>
                                <input class="form-control" type="number" @bind="LifeExpectancyAgeYou" min="55" max="120" />
                                <div class="small-note">Controls simulation end age for you</div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Life expectancy (Partner)</label>
                                <input class="form-control" type="number" @bind="LifeExpectancyAgePartner" min="55" max="120" />
                                <div class="small-note">Leave blank (0) to use same life expectancy as you</div>
                            </div>
                        </div>
                    }
                    else if (wizardStep == 2)
                    {
                        <label class="form-label">Starting Balances & Expected Returns</label>
                        <div class="row mb-2">
                            <div class="col-md-4">
                                <label class="form-label">Taxable ($)</label>
                                <input class="form-control" type="number" @bind="Model.TaxableBalance" step="1000" min="0" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Traditional ($)</label>
                                <input class="form-control" type="number" @bind="Model.TraditionalBalance" step="1000" min="0" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Roth ($)</label>
                                <input class="form-control" type="number" @bind="Model.RothBalance" step="1000" min="0" />
                            </div>
                        </div>
                        <div class="mt-2 p-2" style="background:#f8f9fa; border-radius:6px;">
                            <strong>Total starting balance:</strong> @TotalStarting.ToString("C0")
                        </div>

                        <div class="row mb-2 mt-3">
                            <div class="col-md-6">
                                <label class="form-label">Expected Return (%)</label>
                                <input class="form-control" type="number" @bind="Model.InvestmentReturn" step="0.1" min="-50" max="50" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Expected Inflation (%)</label>
                                <input class="form-control" type="number" @bind="Model.InflationRate" step="0.1" min="-50" max="50" />
                            </div>
                        </div>
                    }
                    else if (wizardStep == 3)
                    {
                        <label class="form-label">Social Security</label>
                        <div class="row">
                            <div class="col-md-6 mb-2">
                                <label class="form-label">SS Start Age (You)</label>
                                <input class="form-control" type="number" @bind="Model.SSStartAgeYou" min="50" max="100" />
                            </div>
                            <div class="col-md-6 mb-2">
                                <label class="form-label">Expected SS Monthly (You)</label>
                                <input class="form-control" type="number" @bind="Model.SocialSecurityMonthlyYou" step="100" min="0" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-2">
                                <label class="form-label">SS Start Age (Partner)</label>
                                <input class="form-control" type="number" @bind="Model.SSStartAgePartner" min="50" max="100" />
                            </div>
                            <div class="col-md-6 mb-2">
                                <label class="form-label">Expected SS Monthly (Partner)</label>
                                <input class="form-control" type="number" @bind="Model.SocialSecurityMonthlyPartner" step="100" min="0" />
                            </div>
                        </div>
                    }
                    else if (wizardStep == 4)
                    {
                        <label class="form-label">Reverse Mortgage</label>
                        <div class="mb-2 form-check">
                            <input class="form-check-input" type="checkbox" id="rmEnabled" @bind="ReverseMortgageEnabled" />
                            <label class="form-check-label" for="rmEnabled">Enable reverse mortgage</label>
                            <div class="small-note">If enabled, reverse mortgage income will begin at the age below</div>
                        </div>

                        @if (ReverseMortgageEnabled)
                        {
                            <div class="row mb-2">
                                <div class="col-md-6">
                                    <label class="form-label">Reverse Mortgage Start Age</label>
                                    <input class="form-control" type="number" @bind="Model.ReverseMortgageStartAge" min="60" max="120" />
                                    <div class="small-note">Age when you start receiving reverse mortgage proceeds</div>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Reverse Mortgage Monthly ($)</label>
                                    <input class="form-control" type="number" @bind="Model.ReverseMortgageMonthly" step="100" min="0" />
                                </div>
                            </div>
                        }
                    }
                    else if (wizardStep == 5)
                    {
                        <label class="form-label">Withdrawal Strategy</label>
                        <div class="row mb-2">
                            <div class="col-md-6">
                                <label class="form-label">Annual Withdrawal: One Retired</label>
                                <input class="form-control" type="number" @bind="Model.AnnualWithdrawalOne" step="1000" min="0" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Annual Withdrawal: Both Retired</label>
                                <input class="form-control" type="number" @bind="Model.AnnualWithdrawalBoth" step="1000" min="0" />
                            </div>
                        </div>
                    }
                    else if (wizardStep == 6)
                    {
                        <label class="form-label">Current Ages & Simulation Settings</label>
                        <div class="row g-2">
                            <div class="col-md-6">
                                <label class="form-label">Current Age (You)</label>
                                <input class="form-control" type="number" @bind="Model.CurrentAgeYou" min="18" max="120" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Current Age (Partner)</label>
                                <input class="form-control" type="number" @bind="Model.CurrentAgePartner" min="0" max="120" />
                                <div class="small-note">Leave as 0 if no partner</div>
                            </div>
                        </div>
                        <div class="row g-2 mt-3">
                            <div class="col-md-6">
                                <label class="form-label">Projection Start Year</label>
                                <input class="form-control" type="number" @bind="Model.SimulationStartYear" />
                                <div class="small-note">Year to begin the retirement simulation</div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="PrevwizardStep" disabled="@(wizardStep == 1)">Previous</button>
                    <button type="button" class="btn btn-primary" @onclick="NextOrSubmit">@(wizardStep == 6 ? "Save & Finish" : "Save & Next")</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public CalendarSpendingModel? Model { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback<(int AgeYou, int AgePartner)> OnFinished { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public int InitialStep { get; set; } = 1;

    private int wizardStep = 1;
    private bool _wasVisible = false;
    private int _lastInitialStep = 1;

    private decimal TotalStarting => (Model?.TaxableBalance ?? 0) + (Model?.TraditionalBalance ?? 0) + (Model?.RothBalance ?? 0);

    protected override void OnParametersSet()
    {
        if (Model == null)
        {
            Model = new CalendarSpendingModel();
        }

        if (Visible)
        {
            if (!_wasVisible)
            {
                if (InitialStep >= 1 && InitialStep <= 6)
                {
                    wizardStep = InitialStep;
                }
                _lastInitialStep = InitialStep;
            }
            else if (InitialStep != _lastInitialStep)
            {
                if (InitialStep >= 1 && InitialStep <= 6)
                {
                    wizardStep = InitialStep;
                }
                _lastInitialStep = InitialStep;
            }
        }

        _wasVisible = Visible;
    }

    private async Task PrevwizardStep()
    {
        if (wizardStep > 1)
        {
            TrySyncModel();
            await InvokeOnSaveSafe();
            wizardStep--;
            StateHasChanged();
        }
    }

    private async Task NextOrSubmit()
    {
        if (wizardStep < 6)
        {
            // minimal validation for step 1
            if (wizardStep == 1 && (Model?.RetirementAgeYou ?? 0) <= 0) return;

            TrySyncModel();
            await InvokeOnSaveSafe();

            wizardStep++;
            StateHasChanged();
            return;
        }

        // final step: sync, save, and close
        TrySyncModel();

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync();
        }
        if (OnFinished.HasDelegate && Model != null)
        {
            await OnFinished.InvokeAsync((Model.RetirementAgeYou, Model.RetirementAgePartner));
        }

        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private async Task CloseClicked()
    {
        TrySyncModel();
        await InvokeOnSaveSafe();

        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private void TrySyncModel()
    {
        try
        {
            Model?.SyncRetirementYearsFromAges();
        }
        catch { }
    }

    private async Task InvokeOnSaveSafe()
    {
        try
        {
            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync();
            }
        }
        catch { }
    }

    // Conversion helpers for life expectancy (age vs year)
    private int LifeExpectancyAgeYou
    {
        get
        {
            if (Model == null) return 100;
            var v = Model.LifeExpectancyYou;
            if (v > 1900)
            {
                var currentAge = Model.CurrentAgeYou > 0 ? Model.CurrentAgeYou : 0;
                return currentAge > 0 ? currentAge + (v - DateTime.Now.Year) : v - DateTime.Now.Year;
            }
            return v;
        }
        set
        {
            if (Model == null) return;
            if (Model.LifeExpectancyYou > 1900)
            {
                var baseAge = Model.CurrentAgeYou > 0 ? Model.CurrentAgeYou : 0;
                Model.LifeExpectancyYou = DateTime.Now.Year + (value - baseAge);
            }
            else
            {
                Model.LifeExpectancyYou = value;
            }
        }
    }

    private int LifeExpectancyAgePartner
    {
        get
        {
            if (Model == null) return 100;
            var v = Model.LifeExpectancyPartner;
            if (v > 1900)
            {
                var currentAge = Model.CurrentAgePartner > 0 ? Model.CurrentAgePartner : 0;
                return currentAge > 0 ? currentAge + (v - DateTime.Now.Year) : v - DateTime.Now.Year;
            }
            return v;
        }
        set
        {
            if (Model == null) return;
            if (Model.LifeExpectancyPartner > 1900)
            {
                var baseAge = Model.CurrentAgePartner > 0 ? Model.CurrentAgePartner : 0;
                Model.LifeExpectancyPartner = DateTime.Now.Year + (value - baseAge);
            }
            else
            {
                Model.LifeExpectancyPartner = value;
            }
        }
    }

    private bool ReverseMortgageEnabled
    {
        get => Model != null && Model.ReverseMortgageStartAge > 0;
        set
        {
            if (Model == null) return;
            if (value)
            {
                if (Model.ReverseMortgageStartAge == 0) Model.ReverseMortgageStartAge = Math.Max(60, Model.CurrentAgeYou);
            }
            else
            {
                Model.ReverseMortgageStartAge = 0;
            }
        }
    }
}