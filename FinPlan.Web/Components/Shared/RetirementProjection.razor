@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using FinPlan.Web.Components
@using FinPlan.Shared.Models.Spending
@using FinPlan.Web.Components.Shared
@using Microsoft.AspNetCore.Components.Web

@code {
    private bool showToolTipYear = false;
    private bool showToolTipYourAge = false;
    private bool showToolTipPartnerAge = false;
    private bool showToolTipMilestones = false;
    private bool showToolTipAmountNeeded = false;
    private bool showToolTipAmountWithdrawn = false;
    private bool showToolTipTaxableWithdrawal = false;
    private bool showToolTipTraditionalWithdrawal = false;
    private bool showToolTipRothWithdrawal = false;
    private bool showToolTipSSYou = false;
    private bool showToolTipSSPartner = false;
    private bool showToolTipReverseMortgage = false;
    private bool showToolTipGrowth = false;
    private bool showToolTipTaxableEnding = false;
    private bool showToolTipTraditionalEnding = false;
    private bool showToolTipRothEnding = false;
    private bool showToolTipTaxesPaid = false;
    private bool showToolTipTaxPaid = false;

    // First row header tooltips
    private bool showToolTipTimelineMilestones = false;
    private bool showToolTipRetirementEquation = false;
    private bool showToolTipWithdrawalCOL = false;
    private bool showToolTipIncomeGrowth = false;
    private bool showToolTipTotalInflow = false;
    private bool showToolTipEndingBalances = false;
    private bool showToolTipTotalEndingBalance = false;
    private bool showToolTipTaxDueGrowthIncome = false;
    private bool showToolTipTaxPaidBreakdown = false;
    private bool showToolTipTaxPaidTotal = false;
    private bool showToolTipTaxDueTraditional = false;
    private bool showToolTipTaxPaidTraditional = false;
    private bool showToolTipTaxPaidTotalTraditional = false;
    private bool showToolTipTotalWithdrawals = false;

    private bool showToolTipTradWithdrawForTradTaxPaid = false;
    private bool showToolTipRothWithdrawForTradTaxPaid = false;
    private bool showToolTipTotalWithdrawForTradTaxPaid = false;
    private bool showToolTipTotalTaxDueForTradTaxPaid = false;
    private bool showToolTipTotalTaxPaidOnIncome = false;
    private bool showToolTipTotalEndingBalanceAllAc = false;
    private bool showToolTipTotalGrowthAndIncome = false;

    [Parameter]
    public CalendarSpendingModel Model { get; set; }
    public List<CalendarYearRow> YearRows => Model?.YearRows ?? new();

    // New parameter to toggle showing column numbers
    public bool IsShowColumnNumber { get; set; } = true;

    // Helper to prefix column labels when enabled
    private string Numbered(int n) => IsShowColumnNumber ? $"{n}. " : string.Empty;
    // Overload to allow fractional labels like "13.5"
    private string Numbered(string label) => IsShowColumnNumber ? $"{label} " : string.Empty;

    // Duplicate tooltip flags (per-column group) - add near other showToolTip fields
    private bool showToolTipTaxableWithdrawal_COL = false;
    private bool showToolTipTraditionalWithdrawal_COL = false;
    private bool showToolTipRothWithdrawal_COL = false;

    private bool showToolTipTaxableWithdrawal_TaxPaid = false;
    private bool showToolTipTraditionalWithdrawal_TaxPaid = false;
    private bool showToolTipRothWithdrawal_TaxPaid = false;

    private bool showToolTipTaxableWithdrawal_Total = false;
    private bool showToolTipTraditionalWithdrawal_Total = false;
    private bool showToolTipRothWithdrawal_Total = false;

}
@code {

    // Group definitions using an enum + metadata dictionary (safer than raw strings)
    private enum GroupKey
    {
        TimelineBreakDown,
        RetirementEquation,
        WithdrawalCOLBreakDown,
        IncomeBreakDown,
        EndingBalancesBreakDown,
        TaxPaidOnIncomeBreakDown,
        TaxPaidTraditionalBreakDown,
        TotalWithdrawalBreakDown,
    }

    private record GroupInfo(string Label, bool DefaultVisible = true, int ColSpan = 1, string? Tooltip = null);

    private static Dictionary<GroupKey, GroupInfo> GroupMap = new()
    {
        { GroupKey.TimelineBreakDown, new GroupInfo("Timeline & Milestones", true, 4) },
        { GroupKey.RetirementEquation, new GroupInfo("Retirement Equation", true, 2, "Cost of Living") },
        { GroupKey.WithdrawalCOLBreakDown, new GroupInfo("Withdrawals for Cost Of Living", true, 3, "Actual withdrawals for Cost of Living") },
        { GroupKey.IncomeBreakDown, new GroupInfo("Income and Growth Breakdown", true, 4) },
        { GroupKey.EndingBalancesBreakDown, new GroupInfo("Ending Balances Breakdown", true, 3) },
        { GroupKey.TaxPaidOnIncomeBreakDown, new GroupInfo("Tax Paid (Income Breakdown)", true, 3) },
        { GroupKey.TaxPaidTraditionalBreakDown, new GroupInfo("Tax (Traditional A/c withdrawal for Income Tax)", true, 2) },
        { GroupKey.TotalWithdrawalBreakDown, new GroupInfo("Total Withdrawals", true, 3) }
    };

    // Visible groups set based on GroupMap defaults
    //private HashSet<GroupKey> VisibleGroups = new(GroupMap.Where(kv => kv.Value.DefaultVisible).Select(kv => kv.Key));

    private HashSet<GroupKey> VisibleGroups = new HashSet<GroupKey>
    {
        GroupKey.TimelineBreakDown,
        GroupKey.RetirementEquation,
        // GroupKey.WithdrawalCOLBreakDown,
        // GroupKey.IncomeBreakDown,
        GroupKey.EndingBalancesBreakDown,
         GroupKey.TaxPaidOnIncomeBreakDown,
        // GroupKey.TaxPaidTraditionalBreakDown,
        // GroupKey.TotalWithdrawalBreakDown
    };

    // Toggle group visibility (can be bound to a switch)
    void ToggleGroup(GroupKey group)
    {
        if (!VisibleGroups.Add(group))
            VisibleGroups.Remove(group);
    }

    // UI state for the small groups panel and an aria-live announcement
    private bool showGroupPanel = false;
    private string groupAnnouncement = string.Empty;

    // Wrapper that toggles the group and announces the change for screen readers
    void ToggleGroupAndAnnounce(GroupKey group)
    {
        ToggleGroup(group);
        groupAnnouncement = VisibleGroups.Contains(group) ? $"{GroupMap[group].Label} shown" : $"{GroupMap[group].Label} hidden";
    }

    private string GetGroupLabel(GroupKey group) => GroupMap.ContainsKey(group) ? GroupMap[group].Label : group.ToString();
    private string GetGroupLabelMessage(GroupKey group, bool isShown) => isShown ? $"{GetGroupLabel(group)} shown" : $"{GetGroupLabel(group)} hidden";

    const string shown = "shown";

    // Modal state and helper
    private bool showGroupModal = false;
    void CloseGroupModal() => showGroupModal = false;

    // Macro helpers for the projection strip
    private int? GetProjectedDepletionYear()
    {
        foreach (var r in YearRows)
        {
            var totalEnding = SafeDecimal(r.EndingTaxable) + SafeDecimal(r.EndingTraditional) + SafeDecimal(r.EndingRoth);
            if (totalEnding <= 0m)
                return r.Year;
        }
        return null;
    }

    private string GetDepletionText()
    {
        var year = GetProjectedDepletionYear();
        return year.HasValue ? year.Value.ToString() : "No depletion projected";
    }

    private string GetProjectionRangeText()
    {
        var first = YearRows.FirstOrDefault()?.Year;
        var last = YearRows.LastOrDefault()?.Year;
        if (first == null || last == null) return "No projection";
        return $"{first} – {last}";
    }

    private decimal GetNetAnnualShortfallLastYear()
    {
        var last = YearRows.LastOrDefault();
        if (last == null) return 0m;
        var income = SafeDecimal(last.SSYou) + SafeDecimal(last.SSPartner) + SafeDecimal(last.ReverseMortgage) + SafeDecimal(last.GrowthBeforeTaxes);
        var need = SafeDecimal(last.AmountNeededForCostOfLiving);
        return need - income;
    }

    private string GetNetShortfallText()
    {
        var val = GetNetAnnualShortfallLastYear();
        if (val <= 0m) return "Surplus";
        return val.ToString("C0");
    }

    private string GetRunwayYearsText()
    {
        var first = YearRows.FirstOrDefault()?.Year;
        var deplete = GetProjectedDepletionYear();
        if (first == null) return "—";
        if (!deplete.HasValue) return "No depletion";
        return (deplete.Value - first.Value).ToString() + " yrs";
    }

    private string GetFinalPortfolioText()
    {
        var last = YearRows.LastOrDefault();
        if (last == null) return "—";
        var total = SafeDecimal(last.EndingTaxable) + SafeDecimal(last.EndingTraditional) + SafeDecimal(last.EndingRoth);
        return total.ToString("C0");
    }

    private decimal SafeDecimal(object? v)
    {
        if (v == null) return 0m;
        try { return Convert.ToDecimal(v); } catch { return 0m; }
    }

    // Returns how many defined groups are currently hidden
    private int GetHiddenGroupsCount()
    {
        return GroupMap.Keys.Count - VisibleGroups.Count;
    }

    // Friendly message shown near the gear when groups are hidden
    private string GetHiddenGroupsMessage()
    {
        var c = GetHiddenGroupsCount();
        return c > 0 ? $"{c} Groups Hidden — click here to explore" : string.Empty;
    }
}

<!-- Full-width macro card strip with prominent gear -->
<div class="projection-strip mb-2" role="region" aria-label="Projection summary strip">
    @* <div class="projection-cards">
        <div class="macro-card" tabindex="0" role="button" aria-label="Projection range">
            <div class="card-label">Projection range</div>
            <div class="card-value">@GetProjectionRangeText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Projected depletion">
            <div class="card-label">Projected depletion</div>
            <div class="card-value">@GetDepletionText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Runway years">
            <div class="card-label">Runway</div>
            <div class="card-value">@GetRunwayYearsText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Net shortfall last year">
            <div class="card-label">Net shortfall (last year)</div>
            <div class="card-value">@GetNetShortfallText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Final projected portfolio">
            <div class="card-label">Final portfolio (last year)</div>
            <div class="card-value">@GetFinalPortfolioText()</div>
        </div>
    </div> *@

    <div class="projection-gear">
        <button class="btn btn-outline-secondary btn-lg prominent-gear" @onclick="() => showGroupModal = true" aria-haspopup="dialog" aria-expanded="@showGroupModal" aria-controls="groupModal" aria-label="Open groups and columns">
            <span class="bi bi-gear" aria-hidden="true"></span>
            <span class="ms-2 d-none d-sm-inline" style="font-weight:700;">Hide/Show Columns</span>
        </button>

        @if (GetHiddenGroupsCount() > 0)
        {
            <button class="hidden-groups-btn" @onclick="() => showGroupModal = true" role="status" aria-live="polite" aria-label="Hidden groups">
                <span class="hidden-groups-icon" aria-hidden="true">⚠️</span>
                <span class="hidden-groups-text">@GetHiddenGroupsMessage()</span>
            </button>
        }

        <div class="small text-muted text-center mt-1 d-none d-sm-block">@VisibleGroups.Count() selected</div>
    </div>

    <style>
        .projection-strip {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            padding: 14px;
            border-radius: 8px;
            background: linear-gradient(180deg, #ffffff, #f8fafc);
            border: 1px solid rgba(0,0,0,0.04);
        }

        .projection-cards {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            align-items: center;
            justify-content: center;
        }

        .macro-card {
            min-width: 140px;
            padding: 10px 12px;
            border-radius: 8px;
            background: #fff;
            border: 1px solid rgba(0,0,0,0.06);
            box-shadow: 0 2px 8px rgba(16,24,40,0.04);
        }

            .macro-card:focus {
                outline: 3px solid rgba(59,130,246,0.16);
            }

        .card-label {
            font-size: 0.72rem;
            color: #6b7280;
        }

        .card-value {
            font-weight: 600;
            font-size: 0.98rem;
            margin-top: 4px;
        }

        .projection-gear {
            display: flex;
            flex-direction: row;
            align-items: center;
            gap: 12px;
            min-width: 220px;
        }

        .prominent-gear {
            padding: 18px 20px;
            font-size: 1.05rem;
            height: 64px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

            .prominent-gear .bi {
                font-size: 1.55rem;
            }

        .hidden-groups-btn {
            background: linear-gradient(90deg, rgba(185,28,28,0.5), rgba(239,68,68,0.5));
            color: #fff;
            font-weight: 700;
            padding: 8px 14px;
            border-radius: 20px;
            border: none;
            box-shadow: 0 6px 12px rgba(0,0,0,0.12);
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transform: none;
        }

        .hidden-groups-icon {
            font-size: 1rem;
            margin-right: 6px;
        }

        @@media (max-width:767px) {
            .macro-card {
                min-width: 110px;
            }

            .projection-gear .d-none.d-sm-inline {
                display: none !important;
            }

            .projection-strip {
                padding: 10px;
            }
        }
    </style>
</div>

@if (showGroupModal)
{
    <div class="modal-backdrop" @onclick="CloseGroupModal" aria-hidden="true"></div>

    <div id="groupModal" class="group-modal" role="dialog" aria-modal="true" aria-labelledby="groupModalTitle">
        <div class="group-modal-content">
            <div class="group-modal-header">
                <h5 id="groupModalTitle" class="m-0">Hide/Show Columns & Groups</h5>
                <button class="btn btn-sm btn-outline-secondary" aria-label="Close" @onclick="CloseGroupModal"><span class="bi bi-x-lg"></span></button>
            </div>

            <div class="group-modal-body">
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbTimeLine" checked="@VisibleGroups.Contains(GroupKey.TimelineBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.TimelineBreakDown)" />
                    <label class="form-check-label" for="cbTimeLine">Timeline Group</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbWithdrawal" checked="@VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.WithdrawalCOLBreakDown)" />
                    <label class="form-check-label" for="cbWithdrawal">Withdrawals for Cost Of Living</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbIncomeBreakDown" checked="@VisibleGroups.Contains(GroupKey.IncomeBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.IncomeBreakDown)" />
                    <label class="form-check-label" for="cbIncomeBreakDown">Income & Growth</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbEndingBalances" checked="@VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.EndingBalancesBreakDown)" />
                    <label class="form-check-label" for="cbEndingBalances">Ending Balances</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbTaxPaidIncome" checked="@VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.TaxPaidOnIncomeBreakDown)" />
                    <label class="form-check-label" for="cbTaxPaidIncome">Tax Paid (Income Breakdown)</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbTaxPaidTraditional" checked="@VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.TaxPaidTraditionalBreakDown)" />
                    <label class="form-check-label" for="cbTaxPaidTraditional">Tax Paid (Traditional Breakdown)</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbTotalWithdrawal" checked="@VisibleGroups.Contains(GroupKey.TotalWithdrawalBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.TotalWithdrawalBreakDown)" />
                    <label class="form-check-label" for="cbTotalWithdrawal">Total Withdrawals</label>
                </div>
            </div>

            <div class="group-modal-footer" style="display:flex; justify-content:flex-end; gap:8px; margin-top:12px;">
                <button class="btn btn-sm btn-primary" @onclick="CloseGroupModal">Done</button>
                @* <button class="btn btn-sm btn-link" @onclick="() => { VisibleGroups.Remove(GroupKey.WithdrawalCOLBreakDown); groupAnnouncement = GetGroupLabelMessage(GroupKey.WithdrawalCOLBreakDown, false); }">Hide</button> *@
            </div>
        </div>
    </div>

    <div class="visually-hidden" aria-live="polite">@groupAnnouncement</div>

    <style>
        .modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(0,0,0,0.45);
            z-index: 1040;
        }

        .group-modal {
            position: fixed;
            left: 50%;
            top: 12%;
            transform: translateX(-50%);
            z-index: 1050;
            width: 420px;
            max-width: 90%;
        }

        .group-modal-content {
            background: #fff;
            border-radius: 8px;
            padding: 12px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.12);
            border: 1px solid rgba(0,0,0,0.06);
        }

        .group-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .group-modal-body {
            padding: 6px 2px;
        }
    </style>
}

<style>
    :root {
        /* Timeline - dark red tint */
        --rp-bg-timeline: rgba(185,28,28,0.06);
        /* Equation - indigo */
        --rp-bg-equation: rgba(79,70,229,0.06);
        /* Withdrawals COL - orange */
        --rp-bg-withdrawal-col: rgba(251,146,60,0.06);
        /* Income - emerald/teal */
        --rp-bg-income: rgba(16,185,129,0.06);
        /* Ending balances - slate gray */
        --rp-bg-ending-balance: rgba(156,163,175,0.06);
        /* Tax activities - blue */
        --rp-bg-tax-activity: rgba(59,130,246,0.06);
        /* Total withdrawals - purple */
        --rp-bg-total-withdrawals: rgba(147,51,234,0.06);
    }

    /* Shared sizing/typography */
    .rp-table thead th,
    .rp-table tbody td {
        font-size: 0.78rem !important;
        font-weight: 600 !important;
        font-variant-numeric: tabular-nums !important;
        border-right: 1px solid blue !important;
    }

    /* Group-specific backgrounds */
    .rp-table thead th.col-timeline-milestones,
    .rp-table tbody td.col-timeline-milestones {
        background-color: var(--rp-bg-timeline) !important;
    }

    .rp-table thead th.col-equation,
    .rp-table tbody td.col-equation {
        background-color: var(--rp-bg-equation) !important;
    }

    .rp-table thead th.col-withdrawal-col,
    .rp-table tbody td.col-withdrawal-col {
        background-color: var(--rp-bg-withdrawal-col) !important;
    }

    .rp-table thead th.col-income-sources,
    .rp-table tbody td.col-income-sources {
        background-color: var(--rp-bg-income) !important;
    }

    .rp-table thead th.col-ending-balances,
    .rp-table tbody td.col-ending-balances {
        background-color: var(--rp-bg-ending-balance) !important;
    }

    .rp-table thead th.col-tax-activity,
    .rp-table tbody td.col-tax-activity {
        background-color: var(--rp-bg-tax-activity) !important;
    }

    .rp-table thead th.col-total-withdrawals,
    .rp-table tbody td.col-total-withdrawals {
        background-color: var(--rp-bg-total-withdrawals) !important;
    }

    /* Header alignment */
    .rp-table thead th {
        text-align: center !important;
    }

    .rp-table tbody td {
        text-align: right !important;
    }

    /* First row header tooltip styling */
    .first-row-tooltip {
        position: absolute;
        background: #fff;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        padding: 12px 16px;
        z-index: 1000;
        max-width: 300px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 0.75rem;
        line-height: 1.4;
        color: #374151;
        white-space: normal;
        word-wrap: break-word;
    }

    .first-row-tooltip strong {
        font-weight: 600;
        color: #111827;
    }

    .first-row-tooltip .close-btn {
        float: right;
        cursor: pointer;
        color: #6b7280;
        font-size: 0.875rem;
        margin-left: 8px;
    }

    .first-row-tooltip .close-btn:hover {
        color: #374151;
    }

    /* Info icon for headers */
    .first-row-info-icon, .info-icon {
        color: #6b7280;
        cursor: pointer;
        margin-left: 4px;
        font-size: 0.875rem;
    }

    .first-row-info-icon:hover, .info-icon:hover {
        color: #374151;
    }

    /* Position headers relatively for absolute tooltip positioning */
    .rp-table thead tr th {
        position: relative;
    }
</style>

<div id="table-scrollbar-bottom" style="width:100%; overflow-x:auto;">
    <table class="rp-table" aria-label="Yearly grid wireframe">
        <thead class="table-light">
            <!-- Top Row: Level 1 Headers with Group Styling -->
            <tr>
                @if (VisibleGroups.Contains(GroupKey.TimelineBreakDown))
                {
                    <th colspan="4" class="col-timeline-milestones">
                        <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTimelineMilestones = !showToolTipTimelineMilestones" tabindex="0" title="Click for more info"></span>
                        @if (showToolTipTimelineMilestones)
                        {
                            <div class="first-row-tooltip">
                                <strong>A. Timeline & Milestones:</strong> Key dates, ages, and important life events that affect your retirement planning timeline.
                                <span class="close-btn" @onclick="() => showToolTipTimelineMilestones = false">×</span>
                            </div>
                        }
                        A. Timeline & Milestones
                    </th>
                }

                <th colspan="2" class="col-equation">
                    <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipRetirementEquation = !showToolTipRetirementEquation" tabindex="0" title="Click for more info"></span>
                    @if (showToolTipRetirementEquation)
                    {
                        <div class="first-row-tooltip">
                            <strong>B. Retirement Equation:</strong> The fundamental calculation showing how much you need versus how much you withdraw for living expenses.
                            <span class="close-btn" @onclick="() => showToolTipRetirementEquation = false">×</span>
                        </div>
                    }
                    B. Retirement Equation
                    <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Cost of Living</span>
                </th>

                @if (VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown))
                {
                    <th colspan="3" class="col-withdrawal-col">
                        <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipWithdrawalCOL = !showToolTipWithdrawalCOL" tabindex="0" title="Click for more info"></span>
                        @if (showToolTipWithdrawalCOL)
                        {
                            <div class="first-row-tooltip">
                                <strong>C. Withdrawals for Cost Of Living:</strong> Detailed breakdown of how much is withdrawn from each account type (Taxable, Traditional, Roth) to cover your living expenses.
                                <span class="close-btn" @onclick="() => showToolTipWithdrawalCOL = false">×</span>
                            </div>
                        }
                        C. Withdrawals for Cost Of Living
                        <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Actual withdrawals for Cost of Living</span>
                    </th>
                }

                @if (VisibleGroups.Contains(GroupKey.IncomeBreakDown))
                {
                    <th colspan="4" class="col-income-sources">
                        <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipIncomeGrowth = !showToolTipIncomeGrowth" tabindex="0" title="Click for more info"></span>
                        @if (showToolTipIncomeGrowth)
                        {
                            <div class="first-row-tooltip">
                                <strong>D. Income and Growth:</strong> All sources of income and investment growth including Social Security, reverse mortgage, and portfolio returns.
                                <span class="close-btn" @onclick="() => showToolTipIncomeGrowth = false">×</span>
                            </div>
                        }
                        D. Income and Growth
                    </th>
                }

                <th colspan="1" class="col-income-sources">
                    <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTotalInflow = !showToolTipTotalInflow" tabindex="0" title="Click for more info"></span>
                    @if (showToolTipTotalInflow)
                    {
                        <div class="first-row-tooltip">
                            <strong>E. Total Inflow:</strong> Sum of all income sources including Social Security, reverse mortgage, and investment growth.
                            <span class="close-btn" @onclick="() => showToolTipTotalInflow = false">×</span>
                        </div>
                    }
                    E. Total Inflow
                </th>

                @if (VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown))
                {
                    <th colspan="3" class="col-ending-balances">
                        <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipEndingBalances = !showToolTipEndingBalances" tabindex="0" title="Click for more info"></span>
                        @if (showToolTipEndingBalances)
                        {
                            <div class="first-row-tooltip">
                                <strong>F. Ending Balances:</strong> Year-end account balances for each account type after all withdrawals, growth, and transactions.
                                <span class="close-btn" @onclick="() => showToolTipEndingBalances = false">×</span>
                            </div>
                        }
                        F. Ending Balances
                    </th>
                }

                <th colspan="1" class="col-ending-balances">
                    <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTotalEndingBalance = !showToolTipTotalEndingBalance" tabindex="0" title="Click for more info"></span>
                    @if (showToolTipTotalEndingBalance)
                    {
                        <div class="first-row-tooltip">
                            <strong>G. Total Ending Balance:</strong> Combined year-end balance across all account types (Taxable + Traditional + Roth).
                            <span class="close-btn" @onclick="() => showToolTipTotalEndingBalance = false">×</span>
                        </div>
                    }
                    G. Total Ending Balance
                </th>

                <th colspan="1" class="col-tax-activity">
                    <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTaxDueGrowthIncome = !showToolTipTaxDueGrowthIncome" tabindex="0" title="Click for more info"></span>
                    @if (showToolTipTaxDueGrowthIncome)
                    {
                        <div class="first-row-tooltip">
                            <strong>H. Tax Due (Growth & Income):</strong> Total tax liability on all taxable investment growth and income for the year.
                            <span class="close-btn" @onclick="() => showToolTipTaxDueGrowthIncome = false">×</span>
                        </div>
                    }
                    H. Tax Due (Growth & Income)
                </th>

                @if (VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown))
                {
                    <th colspan="3" class="col-tax-activity">
                        <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTaxPaidBreakdown = !showToolTipTaxPaidBreakdown" tabindex="0" title="Click for more info"></span>
                        @if (showToolTipTaxPaidBreakdown)
                        {
                            <div class="first-row-tooltip">
                                <strong>I. Tax Paid Breakdown (Growth & Income):</strong> Detailed breakdown of which accounts are used to pay taxes on investment growth and income.
                                <span class="close-btn" @onclick="() => showToolTipTaxPaidBreakdown = false">×</span>
                            </div>
                        }
                        I. Tax Paid Breakdown (Growth & Income)
                    </th>
                }

                <th colspan="1" class="col-tax-activity">
                    <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTaxPaidTotal = !showToolTipTaxPaidTotal" tabindex="0" title="Click for more info"></span>
                    @if (showToolTipTaxPaidTotal)
                    {
                        <div class="first-row-tooltip">
                            <strong>J. Tax Paid Total (Growth & Income):</strong> Total amount withdrawn from all accounts to pay taxes on investment growth and income.
                            <span class="close-btn" @onclick="() => showToolTipTaxPaidTotal = false">×</span>
                        </div>
                    }
                    J. Tax Paid Total (Growth & Income)
                </th>

                <th colspan="1" class="col-tax-activity">
                    <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTaxDueTraditional = !showToolTipTaxDueTraditional" tabindex="0" title="Click for more info"></span>
                    @if (showToolTipTaxDueTraditional)
                    {
                        <div class="first-row-tooltip">
                            <strong>K. Tax Due (Traditional A/c withdrawal for Income Tax):</strong> Additional tax liability created when withdrawing from traditional accounts to pay other taxes.
                            <span class="close-btn" @onclick="() => showToolTipTaxDueTraditional = false">×</span>
                        </div>
                    }
                    K. Tax Due (Traditional A/c withdrawal for Income Tax)
                </th>

                <th colspan="1" class="col-tax-activity">
                    <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTaxPaidTotalTraditional = !showToolTipTaxPaidTotalTraditional" tabindex="0" title="Click for more info"></span>
                    @if (showToolTipTaxPaidTotalTraditional)
                    {
                        <div class="first-row-tooltip">
                            <strong>L. Tax Paid Total (Traditional A/c withdrawal for Income Tax):</strong> Total amount withdrawn from all accounts to pay the additional tax created by traditional account withdrawals.
                            <span class="close-btn" @onclick="() => showToolTipTaxPaidTotalTraditional = false">×</span>
                        </div>
                    }
                    L. Tax Paid Total (Traditional A/c withdrawal for Income Tax)
                </th>

                @if (VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown))
                {
                    <th colspan="2" class="col-tax-activity">
                        <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTaxPaidTraditional = !showToolTipTaxPaidTraditional" tabindex="0" title="Click for more info"></span>
                        @if (showToolTipTaxPaidTraditional)
                        {
                            <div class="first-row-tooltip">
                                <strong>M. Tax Paid (Traditional A/c withdrawal for Income Tax):</strong> Breakdown of which accounts are used to pay the additional tax created by traditional account withdrawals.
                                <span class="close-btn" @onclick="() => showToolTipTaxPaidTraditional = false">×</span>
                            </div>
                        }
                        M. Tax Paid (Traditional A/c withdrawal for Income Tax)
                    </th>
                }

                @if (VisibleGroups.Contains(GroupKey.TotalWithdrawalBreakDown))
                {
                    <th colspan="3" class="col-total-withdrawals">
                        <span class="bi bi-info-circle first-row-info-icon" @onclick="() => showToolTipTotalWithdrawals = !showToolTipTotalWithdrawals" tabindex="0" title="Click for more info"></span>
                        @if (showToolTipTotalWithdrawals)
                        {
                            <div class="first-row-tooltip">
                                <strong>N. Total Withdrawals:</strong> Complete breakdown of all withdrawals from each account type for both living expenses and tax payments.
                                <span class="close-btn" @onclick="() => showToolTipTotalWithdrawals = false">×</span>
                            </div>
                        }
                        N. Total Withdrawals
                    </th>
                }
            </tr>

            <!-- Second Row: Level 2 Headers with Matching Group Styling -->
            <tr>
                @if (VisibleGroups.Contains(GroupKey.TimelineBreakDown))
                {
                    <th class="col-timeline-milestones">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYear = !showToolTipYear" tabindex="0" title="Click for more info"></span>
                        @Numbered(1)Year
                        @if (showToolTipYear)
                        {
                            <div class="first-row-tooltip">
                                <strong>Year:</strong> The calendar year for this retirement projection row.
                                <span class="close-btn" @onclick="() => showToolTipYear = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-timeline-milestones">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYourAge = !showToolTipYourAge" tabindex="0" title="Click for more info"></span>
                        @Numbered(2)Your Age
                        @if (showToolTipYourAge)
                        {
                            <div class="first-row-tooltip">
                                <strong>Your Age:</strong> Your age during this specific year of the retirement projection.
                                <span class="close-btn" @onclick="() => showToolTipYourAge = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-timeline-milestones">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipPartnerAge = !showToolTipPartnerAge" tabindex="0" title="Click for more info"></span>
                        @Numbered(3)Partner Age
                        @if (showToolTipPartnerAge)
                        {
                            <div class="first-row-tooltip">
                                <strong>Partner Age:</strong> Your partner's age during this specific year of the retirement projection.
                                <span class="close-btn" @onclick="() => showToolTipPartnerAge = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-timeline-milestones">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipMilestones = !showToolTipMilestones" tabindex="0" title="Click for more info"></span>
                        @Numbered(4)Milestones
                        @if (showToolTipMilestones)
                        {
                            <div class="first-row-tooltip">
                                <strong>Milestones:</strong> Important life events, goals, or financial milestones for this year (e.g., retirement, major purchases, etc.).
                                <span class="close-btn" @onclick="() => showToolTipMilestones = false">×</span>
                            </div>
                        }
                    </th>
                }

                <th class="col-equation">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipAmountNeeded = !showToolTipAmountNeeded" tabindex="0" title="Click for more info"></span>
                    @Numbered(5)Amount Needed
                    @if (showToolTipAmountNeeded)
                    {
                        <div class="first-row-tooltip">
                            <strong>Amount Needed:</strong> Total annual cost of living expenses for this year, including all living costs and inflation adjustments.
                            <span class="close-btn" @onclick="() => showToolTipAmountNeeded = false">×</span>
                        </div>
                    }
                </th>
                <th class="col-equation">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipAmountWithdrawn = !showToolTipAmountWithdrawn" tabindex="0" title="Click for more info"></span>
                    @Numbered(6)Amount Withdrawn
                    <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Excl. Taxes</span>
                    @if (showToolTipAmountWithdrawn)
                    {
                        <div class="first-row-tooltip">
                            <strong>Amount Withdrawn:</strong> Total amount withdrawn from all accounts to cover living expenses for this year, excluding any tax payments.
                            <span class="close-btn" @onclick="() => showToolTipAmountWithdrawn = false">×</span>
                        </div>
                    }
                </th>

                @if (VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown))
                {
                    <th class="col-withdrawal-col">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableWithdrawal_COL = !showToolTipTaxableWithdrawal_COL" tabindex="0" title="Click for more info"></span>
                        @Numbered(7)Taxable A/c
                        @if (showToolTipTaxableWithdrawal_COL)
                        {
                            <div class="first-row-tooltip">
                                <strong>Taxable Withdrawal:</strong> Amount withdrawn from taxable investment accounts to cover living expenses for this year.
                                <span class="close-btn" @onclick="() => showToolTipTaxableWithdrawal_COL = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-withdrawal-col">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalWithdrawal_COL = !showToolTipTraditionalWithdrawal_COL" tabindex="0" title="Click for more info"></span>
                        @Numbered(8)Traditional A/c
                        @if (showToolTipTraditionalWithdrawal_COL)
                        {
                            <div class="first-row-tooltip">
                                <strong>Traditional Withdrawal:</strong> Amount withdrawn from traditional retirement accounts (401k, IRA) to cover living expenses for this year.
                                <span class="close-btn" @onclick="() => showToolTipTraditionalWithdrawal_COL = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-withdrawal-col">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothWithdrawal_COL = !showToolTipRothWithdrawal_COL" tabindex="0" title="Click for more info"></span>
                        @Numbered(9)Roth A/c
                        @if (showToolTipRothWithdrawal_COL)
                        {
                            <div class="first-row-tooltip">
                                <strong>Roth Withdrawal:</strong> Amount withdrawn from Roth retirement accounts (Roth IRA, Roth 401k) to cover living expenses for this year.
                                <span class="close-btn" @onclick="() => showToolTipRothWithdrawal_COL = false">×</span>
                            </div>
                        }
                    </th>
                }

                @if (VisibleGroups.Contains(GroupKey.IncomeBreakDown))
                {
                    <th class="col-income-sources">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipSSYou = !showToolTipSSYou" tabindex="0" title="Click for more info"></span>
                        @Numbered(10)SS (You)
                        @if (showToolTipSSYou)
                        {
                            <div class="first-row-tooltip">
                                <strong>Social Security (You):</strong> Your annual Social Security benefit for this year, based on your claiming age and earnings history.
                                <span class="close-btn" @onclick="() => showToolTipSSYou = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-income-sources">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipSSPartner = !showToolTipSSPartner" tabindex="0" title="Click for more info"></span>
                        @Numbered(11)SS (Partner)
                        @if (showToolTipSSPartner)
                        {
                            <div class="first-row-tooltip">
                                <strong>Social Security (Partner):</strong> Your partner's annual Social Security benefit for this year, based on their claiming age and earnings history.
                                <span class="close-btn" @onclick="() => showToolTipSSPartner = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-income-sources">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipReverseMortgage = !showToolTipReverseMortgage" tabindex="0" title="Click for more info"></span>
                        @Numbered(12)Rev. Mortgage
                        <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Reverse Mortgage is a Loan</span>
                        @if (showToolTipReverseMortgage)
                        {
                            <div class="first-row-tooltip">
                                <strong>Reverse Mortgage:</strong> Annual income received from reverse mortgage loan against your home equity for this year.
                                <span class="close-btn" @onclick="() => showToolTipReverseMortgage = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-income-sources">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipGrowth = !showToolTipGrowth" tabindex="0" title="Click for more info"></span>
                        @Numbered(13)Growth
                        <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Prior to taxes</span>
                        @if (showToolTipGrowth)
                        {
                            <div class="first-row-tooltip">
                                <strong>Growth:</strong> Investment growth from interest, dividends, and capital gains on your portfolio for this year, before taxes.
                                <span class="close-btn" @onclick="() => showToolTipGrowth = false">×</span>
                            </div>
                        }
                    </th>
                }

                <th class="col-income-sources">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTotalGrowthAndIncome = !showToolTipTotalGrowthAndIncome" tabindex="0" title="Click for more info"></span>
                    @Numbered(14)Income
                    @if (showToolTipTotalGrowthAndIncome)
                    {
                        <div class="first-row-tooltip">
                            <strong>Income:</strong> Total income for the year from Social Security, reverse mortgage and portfolio growth (before taxes).
                            <span class="close-btn" @onclick="() => showToolTipTotalGrowthAndIncome = false">×</span>
                        </div>
                    }
                </th>

                @if (VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown))
                {
                    <th class="col-ending-balances">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableEnding = !showToolTipTaxableEnding" tabindex="0" title="Click for more info"></span>
                        @Numbered(15)Taxable A/c
                        @if (showToolTipTaxableEnding)
                        {
                            <div class="first-row-tooltip">
                                <strong>Taxable Balance:</strong> Year-end balance of taxable accounts after all withdrawals, growth, and transactions.
                                <span class="close-btn" @onclick="() => showToolTipTaxableEnding = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-ending-balances">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalEnding = !showToolTipTraditionalEnding" tabindex="0" title="Click for more info"></span>
                        @Numbered(16)Traditional A/c
                        @if (showToolTipTraditionalEnding)
                        {
                            <div class="first-row-tooltip">
                                <strong>Traditional Balance:</strong> Year-end balance of traditional retirement accounts (401k, IRA) after all withdrawals, growth, and transactions.
                                <span class="close-btn" @onclick="() => showToolTipTraditionalEnding = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-ending-balances">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothEnding = !showToolTipRothEnding" tabindex="0" title="Click for more info"></span>
                        @Numbered(17)Roth A/c
                        @if (showToolTipRothEnding)
                        {
                            <div class="first-row-tooltip">
                                <strong>Roth Balance:</strong> Year-end balance of Roth retirement accounts (Roth IRA, Roth 401k) after all withdrawals, growth, and transactions.
                                <span class="close-btn" @onclick="() => showToolTipRothEnding = false">×</span>
                            </div>
                        }
                    </th>
                }

                <th class="col-ending-balances">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTotalEndingBalance = !showToolTipTotalEndingBalance" tabindex="0" title="Click for more info"></span>
                    @Numbered(18)Total Ending Balance
                    @if (showToolTipTotalEndingBalance)
                    {
                        <div class="first-row-tooltip">
                            <strong>Total Ending Balance:</strong> Combined year-end balance across all account types (Taxable + Traditional + Roth).
                            <span class="close-btn" @onclick="() => showToolTipTotalEndingBalance = false">×</span>
                        </div>
                    }
                </th>

                <th class="col-tax-activity">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTotalEndingBalanceAllAc = !showToolTipTotalEndingBalanceAllAc" tabindex="0" title="Click for more info"></span>
                    @Numbered(19)Taxes Due (Growth & Income)
                    @if (showToolTipTotalEndingBalanceAllAc)
                    {
                        <div class="first-row-tooltip">
                            <strong>Taxes Due:</strong> Total tax liability on all taxable investment growth and income for the year.
                            <span class="close-btn" @onclick="() => showToolTipTotalEndingBalanceAllAc = false">×</span>
                        </div>
                    }
                </th>

                @if (VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown))
                {
                    <th class="col-tax-activity">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableWithdrawal_TaxPaid = !showToolTipTaxableWithdrawal_TaxPaid" tabindex="0" title="Click for more info"></span>
                        @Numbered(20)Taxable A/c
                        @if (showToolTipTaxableWithdrawal_TaxPaid)
                        {
                            <div class="first-row-tooltip">
                                <strong>Taxable Withdrawal:</strong> Amount withdrawn from taxable accounts for income & growth tax payments.
                                <span class="close-btn" @onclick="() => showToolTipTaxableWithdrawal_TaxPaid = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-tax-activity">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalWithdrawal_TaxPaid = !showToolTipTraditionalWithdrawal_TaxPaid" tabindex="0" title="Click for more info"></span>
                        @Numbered(21)Traditional A/c
                        @if (showToolTipTraditionalWithdrawal_TaxPaid)
                        {
                            <div class="first-row-tooltip">
                                <strong>Traditional Withdrawal:</strong> Amount withdrawn from traditional retirement accounts for income & growth tax payments.
                                <span class="close-btn" @onclick="() => showToolTipTraditionalWithdrawal_TaxPaid = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-tax-activity">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothWithdrawal_TaxPaid = !showToolTipRothWithdrawal_TaxPaid" tabindex="0" title="Click for more info"></span>
                        @Numbered(22)Roth A/c
                        @if (showToolTipRothWithdrawal_TaxPaid)
                        {
                            <div class="first-row-tooltip">
                                <strong>Roth Withdrawal:</strong> Amount withdrawn from Roth accounts for income & growth tax payments.
                                <span class="close-btn" @onclick="() => showToolTipRothWithdrawal_TaxPaid = false">×</span>
                            </div>
                        }
                    </th>
                }

                <th class="col-tax-activity">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTotalTaxPaidOnIncome = !showToolTipTotalTaxPaidOnIncome" tabindex="0" title="Click for more info"></span>
                    @Numbered(23)Tax Paid Total (Growth & Income)
                    @if (showToolTipTotalTaxPaidOnIncome)
                    {
                        <div class="first-row-tooltip">
                            <strong>Tax Paid Total:</strong> Total amount withdrawn from all accounts to pay taxes on investment growth and income.
                            <span class="close-btn" @onclick="() => showToolTipTotalTaxPaidOnIncome = false">×</span>
                        </div>
                    }
                </th>

                <th class="col-tax-activity">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTotalTaxDueForTradTaxPaid = !showToolTipTotalTaxDueForTradTaxPaid" tabindex="0" title="Click for more info"></span>
                    @Numbered(24)Tax Due
                    @if (showToolTipTotalTaxDueForTradTaxPaid)
                    {
                        <div class="first-row-tooltip">
                            <strong>Tax Due:</strong> Tax due to traditional withdrawals for tax on traditional.
                            <span class="close-btn" @onclick="() => showToolTipTotalTaxDueForTradTaxPaid = false">×</span>
                        </div>
                    }
                </th>

                <th class="col-tax-activity">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTotalWithdrawForTradTaxPaid = !showToolTipTotalWithdrawForTradTaxPaid" tabindex="0" title="Click for more info"></span>
                    @Numbered(25)Tax Paid Total (Traditional A/c Withdraw)
                    @if (showToolTipTotalWithdrawForTradTaxPaid)
                    {
                        <div class="first-row-tooltip">
                            <strong>Tax Paid:</strong> Amount withdrawn from traditional a/c.to pay for income tax on growth and income.
                            <span class="close-btn" @onclick="() => showToolTipTotalWithdrawForTradTaxPaid = false">×</span>
                        </div>
                    }
                </th>

                @if (VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown))
                {
                    <th class="col-tax-activity">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTradWithdrawForTradTaxPaid = !showToolTipTradWithdrawForTradTaxPaid" tabindex="0" title="Click for more info"></span>
                        @Numbered(26)Tax Paid (Traditional A/c)
                        @if (showToolTipTradWithdrawForTradTaxPaid)
                        {
                            <div class="first-row-tooltip">
                                <strong>Traditional Withdrawal:</strong> Traditional withdrawal for tax paid on amount withdrawn from traditional a/c.to pay for income tax on growth and income.
                                <span class="close-btn" @onclick="() => showToolTipTradWithdrawForTradTaxPaid = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-tax-activity">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothWithdrawForTradTaxPaid = !showToolTipRothWithdrawForTradTaxPaid" tabindex="0" title="Click for more info"></span>
                        @Numbered(27)Tax Paid (Roth A/c)
                        @if (showToolTipRothWithdrawForTradTaxPaid)
                        {
                            <div class="first-row-tooltip">
                                <strong>Roth Withdrawal:</strong> Roth withdrawal for tax paid on amount withdrawn from traditional a/c.to pay for income tax on growth and income.
                                <span class="close-btn" @onclick="() => showToolTipRothWithdrawForTradTaxPaid = false">×</span>
                            </div>
                        }
                    </th>
                }

                @if (VisibleGroups.Contains(GroupKey.TotalWithdrawalBreakDown))
                {
                    <th class="col-total-withdrawals">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableWithdrawal_Total = !showToolTipTaxableWithdrawal_Total" tabindex="0" title="Click for more info"></span>
                        @Numbered(28)Taxable Total W/d
                        @if (showToolTipTaxableWithdrawal_Total)
                        {
                            <div class="first-row-tooltip">
                                <strong>Taxable Withdrawal:</strong> Total withdrawn from taxable accounts.
                                <span class="close-btn" @onclick="() => showToolTipTaxableWithdrawal_Total = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-total-withdrawals">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalWithdrawal_Total = !showToolTipTraditionalWithdrawal_Total" tabindex="0" title="Click for more info"></span>
                        @Numbered(29)Traditional Total w/d
                        @if (showToolTipTraditionalWithdrawal_Total)
                        {
                            <div class="first-row-tooltip">
                                <strong>Traditional Withdrawal:</strong> Total withdrawn from Traditional retirement accounts.
                                <span class="close-btn" @onclick="() => showToolTipTraditionalWithdrawal_Total = false">×</span>
                            </div>
                        }
                    </th>
                    <th class="col-total-withdrawals">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothWithdrawal_Total = !showToolTipRothWithdrawal_Total" tabindex="0" title="Click for more info"></span>
                        @Numbered(30)Roth Total w/d
                        @if (showToolTipRothWithdrawal_Total)
                        {
                            <div class="first-row-tooltip">
                                <strong>Roth Withdrawal:</strong> Total withdrawn from Roth accounts.
                                <span class="close-btn" @onclick="() => showToolTipRothWithdrawal_Total = false">×</span>
                            </div>
                        }
                    </th>
                }
            </tr>
        </thead>

        <!-- Data Rows with Matching Group Styling -->
        <tbody>
            @foreach (var row in YearRows)
            {
                var rowClass = string.IsNullOrEmpty(row.Notes) ? string.Empty : "depleted";
                <tr class="@rowClass">
                    @if (VisibleGroups.Contains(GroupKey.TimelineBreakDown))
                    {
                        <td class="col-timeline-milestones">@row.Year</td>
                        <td class="col-timeline-milestones">@row.AgeYou</td>
                        <td class="col-timeline-milestones">@row.AgePartner</td>
                        <td class="col-timeline-milestones">@row.Milestone</td>
                    }

                    <td class="col-equation">@row.AmountNeededForCostOfLiving.ToString("C0")</td>
                    <td class="col-equation">@row.TotalWithdrawForCostOfLivingExcludingTaxes.ToString("C0")</td>

                    @if (VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown))
                    {
                        <td class="col-withdrawal-col">@row.TaxableWithdrawnForCostOfLivingIfAtAll.ToString("C0")</td>
                        <td class="col-withdrawal-col">@row.TradWithdrawnForCostOfLivingIfAtAll.ToString("C0")</td>
                        <td class="col-withdrawal-col">@row.RothWithdrawnForCostOfLivingIfAtAll.ToString("C0")</td>
                    }

                    @if (VisibleGroups.Contains(GroupKey.IncomeBreakDown))
                    {
                        <td class="col-income-sources">@row.SSYou.ToString("C0")</td>
                        <td class="col-income-sources">@row.SSPartner.ToString("C0")</td>
                        <td class="col-income-sources">@row.ReverseMortgage.ToString("C0")</td>
                        <td class="col-income-sources">@row.GrowthBeforeTaxes.ToString("C0")</td>
                    }

                    <td class="col-income-sources">@( (row.SSYou + row.SSPartner + row.ReverseMortgage + row.GrowthBeforeTaxes).ToString("C0") )</td>

                    @if (VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown))
                    {
                        <td class="col-ending-balances">@row.EndingTaxable.ToString("C0")</td>
                        <td class="col-ending-balances">@row.EndingTraditional.ToString("C0")</td>
                        <td class="col-ending-balances">@row.EndingRoth.ToString("C0")</td>
                    }

                    <td class="col-ending-balances">@( (row.EndingTaxable + row.EndingTraditional + row.EndingRoth).ToString("C0") )</td>

                    <td class="col-tax-activity" style="color: #F56565;">@row.TaxesDueOnAllTaxableGrowthAndIncome.ToString("C0")</td>

                    @if (VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown))
                    {
                        <td class="col-tax-activity">@row.TaxableWithdrawForInitialAndProbablyOnlyTaxPaymenOnTaxableIncome.ToString("C0")</td>
                        <td class="col-tax-activity">@row.TraditionalWithdrawForInitialTaxPaymentOnTaxableIncome.ToString("C0")</td>
                        <td class="col-tax-activity">@row.RothWithdrawForInitialTaxPaymentOnTaxableIncome.ToString("C0")</td>
                    }

                    <td class="col-tax-activity">@( (row.TaxableWithdrawForInitialAndProbablyOnlyTaxPaymenOnTaxableIncome + row.TraditionalWithdrawForInitialTaxPaymentOnTaxableIncome + row.RothWithdrawForInitialTaxPaymentOnTaxableIncome).ToString("C0") )</td>

                    <td class="col-tax-activity">@row.TaxDueDueToTraditionalWithdrawnForTaxOnTraditional.ToString("C0")</td>

                    <td class="col-tax-activity">@( (row.TraditionalWithdrawnForTaxOnTraditional + row.RothWithdrawnForTaxOnTraditional).ToString("C0") )</td>

                    @if (VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown))
                    {
                        <td class="col-tax-activity">@row.TraditionalWithdrawnForTaxOnTraditional.ToString("C0")</td>
                        <td class="col-tax-activity">@row.RothWithdrawnForTaxOnTraditional.ToString("C0")</td>
                    }

                    @if (VisibleGroups.Contains(GroupKey.TotalWithdrawalBreakDown))
                    {
                        <td class="col-total-withdrawals">@row.TotalTaxableWithdrawn.ToString("C0")</td>
                        <td class="col-total-withdrawals">@row.TotalTraditionalWithdrawn.ToString("C0")</td>
                        <td class="col-total-withdrawals">@row.TotalRothWithdrawn.ToString("C0")</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
<script>
    // Keep top and bottom scrollbars in sync and provide a visible faux scrollbar with a draggable thumb
    (function() {
        function initSync() {
            var top = document.getElementById('table-scrollbar-top');
            var bottom = document.getElementById('table-scrollbar-bottom');
            var table = document.querySelector('.rp-table');
            var fake = document.getElementById('fake-scrollbar-top');
            if (!top || !bottom || !table) return;
            var spacer = top.querySelector('.spacer');

            function updateSpacer() {
                try {
                    spacer.style.width = table.scrollWidth + 'px';
                } catch (e) { /* ignore */ }
            }

            // Native top<->bottom sync (if native scrollbars are present)
            var syncing = false;
            top.addEventListener('scroll', function () {
                if (syncing) return;
                syncing = true;
                bottom.scrollLeft = top.scrollLeft;
                syncing = false;
            }, { passive: true });
            bottom.addEventListener('scroll', function () {
                if (syncing) return;
                syncing = true;
                top.scrollLeft = bottom.scrollLeft;
                syncing = false;
            }, { passive: true });

            // Fake scrollbar elements and behavior
            var track = fake ? fake.querySelector('.fs-track') : null;
            var thumb = track ? track.querySelector('.fs-thumb') : null;
            var dragging = false;
            var dragStartX = 0;
            var dragStartLeft = 0;

            function clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }

            function updateFake() {
                if (!track || !thumb) return;
                var scrollWidth = table.scrollWidth;
                var visible = bottom.clientWidth;
                var trackWidth = track.clientWidth;
                var thumbWidth = Math.max(20, Math.round(trackWidth * (visible / (scrollWidth || 1))));
                thumb.style.width = thumbWidth + 'px';
                // position based on bottom.scrollLeft
                var maxScroll = Math.max(0, scrollWidth - visible);
                var maxThumbLeft = Math.max(0, trackWidth - thumbWidth);
                var ratio = (maxScroll === 0) ? 0 : (bottom.scrollLeft / maxScroll);
                var left = Math.round(ratio * maxThumbLeft);
                thumb.style.left = left + 'px';
            }

            function syncFromThumb(left) {
                var scrollWidth = table.scrollWidth;
                var visible = bottom.clientWidth;
                var trackWidth = track.clientWidth;
                var thumbWidth = Math.max(20, Math.round(trackWidth * (visible / (scrollWidth || 1))));
                var maxThumbLeft = Math.max(0, trackWidth - thumbWidth);
                var maxScroll = Math.max(0, scrollWidth - visible);
                var ratio = (maxThumbLeft === 0) ? 0 : (left / maxThumbLeft);
                var targetScroll = Math.round(ratio * maxScroll);
                bottom.scrollLeft = targetScroll;
                top.scrollLeft = targetScroll;
            }

            // Update on bottom scroll
            bottom.addEventListener('scroll', function() {
                updateFake();
            }, { passive: true });

            // Resize handling
            window.addEventListener('resize', function() { updateSpacer(); updateFake(); });

            if ('ResizeObserver' in window) {
                try {
                    var ro = new ResizeObserver(function() { updateSpacer(); updateFake(); });
                    ro.observe(table);
                    ro.observe(bottom);
                    if (track) ro.observe(track);
                } catch (e) { /* ignore */ }
            }

            // Thumb dragging
            if (thumb) {
                thumb.addEventListener('mousedown', function (e) {
                    dragging = true;
                    dragStartX = e.clientX;
                    dragStartLeft = parseInt(thumb.style.left || '0');
                    document.body.style.userSelect = 'none';
                    e.preventDefault();
                });

                document.addEventListener('mousemove', function (e) {
                    if (!dragging) return;
                    var dx = e.clientX - dragStartX;
                    var trackWidth = track.clientWidth;
                    var thumbWidth = parseInt(thumb.style.width || '20');
                    var maxLeft = Math.max(0, trackWidth - thumbWidth);
                    var newLeft = clamp(dragStartLeft + dx, 0, maxLeft);
                    thumb.style.left = newLeft + 'px';
                    syncFromThumb(newLeft);
                });

                document.addEventListener('mouseup', function () {
                    if (!dragging) return;
                    dragging = false;
                    document.body.style.userSelect = '';
                });

                // Click on track to move
                track.addEventListener('click', function (e) {
                    if (e.target === thumb) return;
                    var rect = track.getBoundingClientRect();
                    var clickX = e.clientX - rect.left;
                    var thumbWidth = parseInt(thumb.style.width || '20');
                    var targetLeft = clamp(Math.round(clickX - thumbWidth / 2), 0, Math.max(0, track.clientWidth - thumbWidth));
                    // animate jump
                    thumb.style.left = targetLeft + 'px';
                    syncFromThumb(targetLeft);
                });
            }

            // Initial sync
            updateSpacer();
            updateFake();
        }

        // Wait until DOM is ready
        if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', initSync);
        else initSync();
    })();
</script>
