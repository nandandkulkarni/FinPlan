@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using FinPlan.Web.Components
@using FinPlan.Shared.Models.Spending
@using FinPlan.Web.Components.Shared
@using Microsoft.AspNetCore.Components.Web

@code {
    private bool showToolTipYear = false;
    private bool showToolTipYourAge = false;
    private bool showToolTipPartnerAge = false;
    private bool showToolTipMilestones = false;
    private bool showToolTipAmountNeeded = false;
    private bool showToolTipAmountWithdrawn = false;
    private bool showToolTipTaxableWithdrawal = false;
    private bool showToolTipTraditionalWithdrawal = false;
    private bool showToolTipRothWithdrawal = false;
    private bool showToolTipSSYou = false;
    private bool showToolTipSSPartner = false;
    private bool showToolTipReverseMortgage = false;
    private bool showToolTipGrowth = false;
    private bool showToolTipTaxableEnding = false;
    private bool showToolTipTraditionalEnding = false;
    private bool showToolTipRothEnding = false;
    private bool showToolTipTaxesPaid = false;
    private bool showToolTipTaxPaid = false;

    [Parameter]
    public CalendarSpendingModel Model { get; set; }
    public List<CalendarYearRow> YearRows => Model?.YearRows ?? new();

    // New parameter to toggle showing column numbers
    public bool IsShowColumnNumber { get; set; } = true;

    // Helper to prefix column labels when enabled
    private string Numbered(int n) => IsShowColumnNumber ? $"{n}. " : string.Empty;
    // Overload to allow fractional labels like "13.5"
    private string Numbered(string label) => IsShowColumnNumber ? $"{label} " : string.Empty;


}
@code {

    // Group definitions using an enum + metadata dictionary (safer than raw strings)
    private enum GroupKey
    {
        Timeline,
        RetirementEquation,
        WithdrawalCOLBreakDown,
        IncomeBreakDown,
        IncomeConsolidated,
        EndingBalancesBreakDown,
        TaxPaidOnIncomeBreakDown,
        TaxPaidOnGrowthIncomeBreakDown,
        TaxPaidTraditionalBreakDown
    }

    private record GroupInfo(string Label, bool DefaultVisible = true, int ColSpan = 1, string? Tooltip = null);

    private static Dictionary<GroupKey, GroupInfo> GroupMap = new()
    {
        { GroupKey.Timeline, new GroupInfo("Timeline & Milestones", true, 4) },
        { GroupKey.RetirementEquation, new GroupInfo("Retirement Equation", true, 2, "Cost of Living") },
        { GroupKey.WithdrawalCOLBreakDown, new GroupInfo("Withdrawals for Cost Of Living", true, 3, "Actual withdrawals for Cost of Living") },
        { GroupKey.IncomeBreakDown, new GroupInfo("Income and Growth Breakdown", true, 4) },
        { GroupKey.IncomeConsolidated, new GroupInfo("Total Inflow", true, 1) },
        { GroupKey.EndingBalancesBreakDown, new GroupInfo("Ending Balances Breakdown", true, 3) },
        { GroupKey.TaxPaidOnIncomeBreakDown, new GroupInfo("Tax Paid (Income Breakdown)", true, 3) },
        { GroupKey.TaxPaidOnGrowthIncomeBreakDown, new GroupInfo("Tax (Growth & Income)", true, 4) },
        { GroupKey.TaxPaidTraditionalBreakDown, new GroupInfo("Tax (Traditional A/c withdrawal for Income Tax)", true, 2) }
    };

    // Visible groups set based on GroupMap defaults
    private HashSet<GroupKey> VisibleGroups = new(GroupMap.Where(kv => kv.Value.DefaultVisible).Select(kv => kv.Key));

    // Toggle group visibility (can be bound to a switch)
    void ToggleGroup(GroupKey group)
    {
        if (!VisibleGroups.Add(group))
            VisibleGroups.Remove(group);
    }

    // UI state for the small groups panel and an aria-live announcement
    private bool showGroupPanel = false;
    private string groupAnnouncement = string.Empty;

    // Wrapper that toggles the group and announces the change for screen readers
    void ToggleGroupAndAnnounce(GroupKey group)
    {
        ToggleGroup(group);
        groupAnnouncement = VisibleGroups.Contains(group) ? $"{GroupMap[group].Label} shown" : $"{GroupMap[group].Label} hidden";
    }

    private string GetGroupLabel(GroupKey group) => GroupMap.ContainsKey(group) ? GroupMap[group].Label : group.ToString();
    private string GetGroupLabelMessage(GroupKey group, bool isShown) => isShown ? $"{GetGroupLabel(group)} shown" : $"{GetGroupLabel(group)} hidden";

    const string shown = "shown";

    // Modal state and helper
    private bool showGroupModal = false;
    void CloseGroupModal() => showGroupModal = false;

    // Macro helpers for the projection strip
    private int? GetProjectedDepletionYear()
    {
        foreach (var r in YearRows)
        {
            var totalEnding = SafeDecimal(r.EndingTaxable) + SafeDecimal(r.EndingTraditional) + SafeDecimal(r.EndingRoth);
            if (totalEnding <= 0m)
                return r.Year;
        }
        return null;
    }

    private string GetDepletionText()
    {
        var year = GetProjectedDepletionYear();
        return year.HasValue ? year.Value.ToString() : "No depletion projected";
    }

    private string GetProjectionRangeText()
    {
        var first = YearRows.FirstOrDefault()?.Year;
        var last = YearRows.LastOrDefault()?.Year;
        if (first == null || last == null) return "No projection";
        return $"{first} – {last}";
    }

    private decimal GetNetAnnualShortfallLastYear()
    {
        var last = YearRows.LastOrDefault();
        if (last == null) return 0m;
        var income = SafeDecimal(last.SSYou) + SafeDecimal(last.SSPartner) + SafeDecimal(last.ReverseMortgage) + SafeDecimal(last.GrowthBeforeTaxes);
        var need = SafeDecimal(last.AmountNeededForCostOfLiving);
        return need - income;
    }

    private string GetNetShortfallText()
    {
        var val = GetNetAnnualShortfallLastYear();
        if (val <= 0m) return "Surplus";
        return val.ToString("C0");
    }

    private string GetRunwayYearsText()
    {
        var first = YearRows.FirstOrDefault()?.Year;
        var deplete = GetProjectedDepletionYear();
        if (first == null) return "—";
        if (!deplete.HasValue) return "No depletion";
        return (deplete.Value - first.Value).ToString() + " yrs";
    }

    private string GetFinalPortfolioText()
    {
        var last = YearRows.LastOrDefault();
        if (last == null) return "—";
        var total = SafeDecimal(last.EndingTaxable) + SafeDecimal(last.EndingTraditional) + SafeDecimal(last.EndingRoth);
        return total.ToString("C0");
    }

    private decimal SafeDecimal(object? v)
    {
        if (v == null) return 0m;
        try { return Convert.ToDecimal(v); } catch { return 0m; }
    }

    // Returns how many defined groups are currently hidden
    private int GetHiddenGroupsCount()
    {
        return GroupMap.Keys.Count - VisibleGroups.Count;
    }

    // Friendly message shown near the gear when groups are hidden
    private string GetHiddenGroupsMessage()
    {
        var c = GetHiddenGroupsCount();
        return c > 0 ? $"{c} Groups Hidden — click here to explore" : string.Empty;
    }
}

<!-- Full-width macro card strip with prominent gear -->
<div class="projection-strip mb-2" role="region" aria-label="Projection summary strip">
    <div class="projection-cards">
        <div class="macro-card" tabindex="0" role="button" aria-label="Projection range">
            <div class="card-label">Projection range</div>
            <div class="card-value">@GetProjectionRangeText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Projected depletion">
            <div class="card-label">Projected depletion</div>
            <div class="card-value">@GetDepletionText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Runway years">
            <div class="card-label">Runway</div>
            <div class="card-value">@GetRunwayYearsText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Net shortfall last year">
            <div class="card-label">Net shortfall (last year)</div>
            <div class="card-value">@GetNetShortfallText()</div>
        </div>

        <div class="macro-card" tabindex="0" role="button" aria-label="Final projected portfolio">
            <div class="card-label">Final portfolio (last year)</div>
            <div class="card-value">@GetFinalPortfolioText()</div>
        </div>
    </div>

    <div class="projection-gear">
        <button class="btn btn-outline-secondary btn-lg prominent-gear" @onclick="() => showGroupModal = true" aria-haspopup="dialog" aria-expanded="@showGroupModal" aria-controls="groupModal" aria-label="Open groups and columns">
            <span class="bi bi-gear" aria-hidden="true"></span>
            <span class="ms-2 d-none d-sm-inline" style="font-weight:700;">Hide/Show Columns</span>
        </button>

        @if (GetHiddenGroupsCount() > 0)
        {
            <button class="hidden-groups-btn" @onclick="() => showGroupModal = true" role="status" aria-live="polite" aria-label="Hidden groups">
                <span class="hidden-groups-icon" aria-hidden="true">⚠️</span>
                <span class="hidden-groups-text">@GetHiddenGroupsMessage()</span>
            </button>
        }

        <div class="small text-muted text-center mt-1 d-none d-sm-block">@VisibleGroups.Count() selected</div>
    </div>

    <style>
        .projection-strip { display:flex; align-items:center; justify-content:center; gap:20px; padding:14px; border-radius:8px; background:linear-gradient(180deg, #ffffff, #f8fafc); border:1px solid rgba(0,0,0,0.04); }
        .projection-cards { display:flex; gap:12px; flex-wrap:wrap; align-items:center; justify-content:center; }
        .macro-card { min-width:140px; padding:10px 12px; border-radius:8px; background:#fff; border:1px solid rgba(0,0,0,0.06); box-shadow:0 2px 8px rgba(16,24,40,0.04); }
        .macro-card:focus { outline:3px solid rgba(59,130,246,0.16); }
        .card-label { font-size:0.72rem; color:#6b7280; }
        .card-value { font-weight:600; font-size:0.98rem; margin-top:4px; }
        .projection-gear { display:flex; flex-direction:row; align-items:center; gap:12px; min-width:220px; }
        .prominent-gear { padding:18px 20px; font-size:1.05rem; height:64px; display:inline-flex; align-items:center; justify-content:center; }
        .prominent-gear .bi { font-size:1.55rem; }
        .hidden-groups-btn {
            background: linear-gradient(90deg, rgba(185,28,28,0.5), rgba(239,68,68,0.5));
            color: #fff;
            font-weight:700;
            padding:8px 14px;
            border-radius:20px;
            border: none;
            box-shadow: 0 6px 12px rgba(0,0,0,0.12);
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transform: none;
        }

        .hidden-groups-icon { font-size:1rem; margin-right:6px; }

        @@media (max-width:767px) { .macro-card { min-width:110px; } .projection-gear .d-none.d-sm-inline { display:none !important; } .projection-strip { padding:10px; } }
    </style>
</div>

@if (showGroupModal)
{
    <div class="modal-backdrop" @onclick="CloseGroupModal" aria-hidden="true"></div>

    <div id="groupModal" class="group-modal" role="dialog" aria-modal="true" aria-labelledby="groupModalTitle">
        <div class="group-modal-content">
            <div class="group-modal-header">
                <h5 id="groupModalTitle" class="m-0">Columns & Groups</h5>
                <button class="btn btn-sm btn-outline-secondary" aria-label="Close" @onclick="CloseGroupModal"><span class="bi bi-x-lg"></span></button>
            </div>

            <div class="group-modal-body">
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbWithdrawal" checked="@VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.WithdrawalCOLBreakDown)" />
                    <label class="form-check-label" for="cbWithdrawal">Show Withdrawals for Cost Of Living</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbIncomeBreakDown" checked="@VisibleGroups.Contains(GroupKey.IncomeBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.IncomeBreakDown)" />
                    <label class="form-check-label" for="cbIncomeBreakDown">Show Income & Growth</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbEndingBalances" checked="@VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.EndingBalancesBreakDown)" />
                    <label class="form-check-label" for="cbEndingBalances">Show Ending Balances</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbTaxPaidIncome" checked="@VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.TaxPaidOnIncomeBreakDown)" />
                    <label class="form-check-label" for="cbTaxPaidIncome">Show Tax Paid (Income Breakdown)</label>
                </div>
                <div class="form-check form-switch" style="display:flex; align-items:center; gap:12px; margin-top:8px;">
                    <input class="form-check-input" type="checkbox" role="switch" id="cbTaxPaidTraditional" checked="@VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown)"
                           @onchange="(ChangeEventArgs e) => ToggleGroupAndAnnounce(GroupKey.TaxPaidTraditionalBreakDown)" />
                    <label class="form-check-label" for="cbTaxPaidTraditional">Show Tax Paid (Traditional Breakdown)</label>
                </div>
            </div>

            <div class="group-modal-footer" style="display:flex; justify-content:flex-end; gap:8px; margin-top:12px;">
                <button class="btn btn-sm btn-primary" @onclick="CloseGroupModal">Done</button>
                <button class="btn btn-sm btn-link" @onclick="() => { VisibleGroups.Remove(GroupKey.WithdrawalCOLBreakDown); groupAnnouncement = GetGroupLabelMessage(GroupKey.WithdrawalCOLBreakDown, false); }">Hide</button>
            </div>
        </div>
    </div>

    <div class="visually-hidden" aria-live="polite">@groupAnnouncement</div>

    <style>
        .modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(0,0,0,0.45);
            z-index: 1040;
        }

        .group-modal {
            position: fixed;
            left: 50%;
            top: 12%;
            transform: translateX(-50%);
            z-index: 1050;
            width: 420px;
            max-width: 90%;
        }

        .group-modal-content {
            background: #fff;
            border-radius: 8px;
            padding: 12px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.12);
            border: 1px solid rgba(0,0,0,0.06);
        }

        .group-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .group-modal-body {
            padding: 6px 2px;
        }
    </style>
}

<style>
    /* Centralized styling: apply column-8 visuals to all table headers and body cells */
    .rp-table thead th,
    .rp-table tbody td,
    .rp-table thead th.col-income-sources,
    .rp-table thead th.col-ending-balances,
    .rp-table thead th.col-account-activity,
    .rp-table tbody td.col-income-sources,
    .rp-table tbody td.col-ending-balances,
    .rp-table tbody td.col-account-activity {
        font-size: 0.78rem !important;
        background-color: rgba(37, 99, 235, 0.08) !important;
        font-weight: 600 !important;
        text-align: right !important;
        font-variant-numeric: tabular-nums !important;
    }

    /* Ensure header text is visually distinct but still follows the same sizing/alignment */
    .rp-table thead th {
        text-align: center !important;
    }
</style>

<div id="table-scrollbar-bottom" style="width:100%; overflow-x:auto;">
    <table class="rp-table" aria-label="Yearly grid wireframe">
        <thead class="table-light">
            <!-- Top Row: Groupings with separators -->
            <tr>
                <th colspan="4" style="background-color: #f8f9fa; border-right: 2px solid #d1d5db; text-align: center;">Timeline & Milestones</th>
                <th colspan="2" style="background-color: #f8f9fa; border-right: 2px solid #d1d5db; text-align: center;">
                    Retirement Equation
                    <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Cost of Living </span>

                </th>
                @* Withdrawals for Cost Of Living *@
                @if (VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown))
                {

                    <th colspan="3" style="background-color: #f8f9fa; border-right: 2px solid #d1d5db; text-align: center;">
                        Withdrawals for Cost Of Living
                        <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Actual withdrawals for Cost of Living </span>
                    </th>
                }
                @if (VisibleGroups.Contains(GroupKey.IncomeBreakDown))
                {
                    <th colspan="4" class="col-income-sources" style="background-color: rgba(5,150,105,0.08); border-right: 2px solid #d1d5db; text-align: center;">Income and Growth</th>
                }
                <th colspan="1" class="col-income-sources" style="background-color: rgba(5,150,105,0.08); border-right: 2px solid #d1d5db; text-align: center;">Total Inflow</th>

                @if (VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown))
                {
                    <th colspan="3" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Ending Balances</th>
                }
                <th colspan="1" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Total Ending Balance</th>

                <th colspan="1" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Tax Due (Growth & Income)</th>
                @if (VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown))
                {
                    <th colspan="3" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Tax Paid Breakdown(Growth & Income)</th>
                }
                <th colspan="1" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Tax Paid Total (Growth & Income)</th>

                <th colspan="1" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Tax Due (Traditional A/c withdrawal for Income Tax)</th>

                @if (VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown))
                {
                    <th colspan="2" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Tax Paid (Traditional A/c withdrawal for Income Tax)</th>
                }
                <th colspan="1" class="col-ending-balances" style="background-color: rgba(107,114,128,0.08); text-align: center;">Tax Paid Total (Traditional A/c withdrawal for Income Tax)</th>


            </tr>
            <!-- Second Row: Specific Columns with separators and tooltips -->
            <tr>
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYear = !showToolTipYear" tabindex="0" title="Click for more info"></span>
                    @Numbered(1)Year
                    @if (showToolTipYear)
                    {
                        <div class="info-tooltip">
                            <strong>Year:</strong> The calendar year for the projection.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYear = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYourAge = !showToolTipYourAge" tabindex="0" title="Click for more info"></span>
                    @Numbered(2)Your Age
                    @if (showToolTipYourAge)
                    {
                        <div class="info-tooltip">
                            <strong>Your Age:</strong> Your age during the specified year.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYourAge = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipPartnerAge = !showToolTipPartnerAge" tabindex="0" title="Click for more info"></span>
                    @Numbered(3)Partner Age
                    @if (showToolTipPartnerAge)
                    {
                        <div class="info-tooltip">
                            <strong>Partner Age:</strong> Your partner's age during the specified year.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipPartnerAge = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipMilestones = !showToolTipMilestones" tabindex="0" title="Click for more info"></span>
                    @Numbered(4)Milestones
                    @if (showToolTipMilestones)
                    {
                        <div class="info-tooltip">
                            <strong>Milestones:</strong> Key events or goals for the year.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipMilestones = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipAmountNeeded = !showToolTipAmountNeeded" tabindex="0" title="Click for more info"></span>
                    @Numbered(5)Amount Needed
                    @if (showToolTipAmountNeeded)
                    {
                        <div class="info-tooltip">
                            <strong>Amount Needed:</strong> The total amount required for the year.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipAmountNeeded = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipAmountWithdrawn = !showToolTipAmountWithdrawn" tabindex="0" title="Click for more info"></span>
                    @Numbered(6)Amount Withdrawn
                    <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Excl. Taxes</span>
                    @if (showToolTipAmountWithdrawn)
                    {
                        <div class="info-tooltip">
                            <strong>Amount Withdrawn:</strong> Amount withdrawn for living expenses, excluding taxes.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipAmountWithdrawn = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                @* Withdrawals for Cost Of Living *@
                @if (VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown))
                {
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableWithdrawal = !showToolTipTaxableWithdrawal" tabindex="0" title="Click for more info"></span>
                        @Numbered(7)Taxable A/c
                        @if (showToolTipTaxableWithdrawal)
                        {
                            <div class="info-tooltip">
                                <strong>Taxable Withdrawal:</strong> Amount withdrawn from taxable accounts for living expenses.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableWithdrawal = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalWithdrawal = !showToolTipTraditionalWithdrawal" tabindex="0" title="Click for more info"></span>
                        @Numbered(8)Traditional A/c
                        @if (showToolTipTraditionalWithdrawal)
                        {
                            <div class="info-tooltip">
                                <strong>Traditional Withdrawal:</strong> Amount withdrawn from traditional retirement accounts for living expenses.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalWithdrawal = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothWithdrawal = !showToolTipRothWithdrawal" tabindex="0" title="Click for more info"></span>
                        @Numbered(9)Roth A/c
                        @if (showToolTipRothWithdrawal)
                        {
                            <div class="info-tooltip">
                                <strong>Roth Withdrawal:</strong> Amount withdrawn from Roth accounts for living expenses.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothWithdrawal = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                }
                @if (VisibleGroups.Contains(GroupKey.IncomeBreakDown))
                {
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipSSYou = !showToolTipSSYou" tabindex="0" title="Click for more info"></span>
                        @Numbered(10)SS (You)
                        @if (showToolTipSSYou)
                        {
                            <div class="info-tooltip">
                                <strong>Social Security (You):</strong> Your annual Social Security benefit.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSYou = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipSSPartner = !showToolTipSSPartner" tabindex="0" title="Click for more info"></span>
                        @Numbered(11)SS (Partner)
                        @if (showToolTipSSPartner)
                        {
                            <div class="info-tooltip">
                                <strong>Social Security (Partner):</strong> Your partner's annual Social Security benefit.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSPartner = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipReverseMortgage = !showToolTipReverseMortgage" tabindex="0" title="Click for more info"></span>
                        @Numbered(12)Rev. Mortgage
                        <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Reverse Mortgage is a Loan</span>

                        @if (showToolTipReverseMortgage)
                        {
                            <div class="info-tooltip">
                                <strong>Reverse Mortgage:</strong> Annual income from reverse mortgage.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipReverseMortgage = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipGrowth = !showToolTipGrowth" tabindex="0" title="Click for more info"></span>
                        @Numbered(13)Growth
                        <span style="display:block; font-size:0.72em; color:#6c757d; font-weight:400; margin-top:2px;">Prior to taxes</span>
                        @if (showToolTipGrowth)
                        {
                            <div class="info-tooltip">
                                <strong>Growth:</strong> Interest, Dividend & Investment growth for the year.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipGrowth = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>

                }

                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" tabindex="0" title="Click for more info"></span>
                    @Numbered("13.5")Income
                </th>
                @if (VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown))
                {
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableEnding = !showToolTipTaxableEnding" tabindex="0" title="Click for more info"></span>
                        @Numbered(14)Taxable A/c
                        @if (showToolTipTaxableEnding)
                        {
                            <div class="info-tooltip">
                                <strong>Taxable Balance:</strong> Year-end balance of taxable accounts.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableEnding = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalEnding = !showToolTipTraditionalEnding" tabindex="0" title="Click for more info"></span>
                        @Numbered(15)Traditional A/c
                        @if (showToolTipTraditionalEnding)
                        {
                            <div class="info-tooltip">
                                <strong>Traditional Balance:</strong> Year-end balance of traditional retirement accounts.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalEnding = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>

                    <th>
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothEnding = !showToolTipRothEnding" tabindex="0" title="Click for more info"></span>
                        @Numbered(16)Roth A/c
                        @if (showToolTipRothEnding)
                        {
                            <div class="info-tooltip">
                                <strong>Roth Balance:</strong> Year-end balance of Roth accounts.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothEnding = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>


                }
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" tabindex="0" title="Click for more info"></span>
                    @Numbered("16.5")Total Ending Balance
                </th>

                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxesPaid = !showToolTipTaxesPaid" tabindex="0" title="Click for more info"></span>
                    @Numbered(17)Taxes Due (Growth & Income)
                    @if (showToolTipTaxesPaid)
                    {
                        <div class="info-tooltip">
                            <strong>Taxes Due:</strong> Taxes due on all taxable growth and income.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxesPaid = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                @if (VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown))
                {
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableWithdrawal = !showToolTipTaxableWithdrawal" tabindex="0" title="Click for more info"></span>
                        @Numbered(18)Taxable A/c
                        @if (showToolTipTaxableWithdrawal)
                        {
                            <div class="info-tooltip">
                                <strong>Taxable Withdrawal:</strong> Amount withdrawn from taxable accounts for tax payments.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableWithdrawal = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalWithdrawal = !showToolTipTraditionalWithdrawal" tabindex="0" title="Click for more info"></span>
                        @Numbered(19)Traditional A/c
                        @if (showToolTipTraditionalWithdrawal)
                        {
                            <div class="info-tooltip">
                                <strong>Traditional Withdrawal:</strong> Amount withdrawn from traditional retirement accounts for tax payments.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalWithdrawal = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothWithdrawal = !showToolTipRothWithdrawal" tabindex="0" title="Click for more info"></span>
                        @Numbered(20)Roth A/c
                        @if (showToolTipRothWithdrawal)
                        {
                            <div class="info-tooltip">
                                <strong>Roth Withdrawal:</strong> Amount withdrawn from Roth accounts for tax payments.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothWithdrawal = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                }
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothWithdrawal = !showToolTipRothWithdrawal" tabindex="0" title="Click for more info"></span>
                    @Numbered("20.5")Tax Paid Total (Growth & Income)
                    @if (showToolTipRothWithdrawal)
                    {
                        <div class="info-tooltip">
                            <strong>Roth Withdrawal:</strong> Amount withdrawn from Roth accounts for tax payments.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothWithdrawal = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxPaid = !showToolTipTaxPaid" tabindex="0" title="Click for more info"></span>
                    @Numbered(21)Tax Due
                    @if (showToolTipTaxPaid)
                    {
                        <div class="info-tooltip">
                            <strong>Tax Due:</strong> Tax due to traditional withdrawals for tax on traditional.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxPaid = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
                @if (VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown))
                {

                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxPaid = !showToolTipTaxPaid" tabindex="0" title="Click for more info"></span>
                        @Numbered(22)Tax Paid (Traditional A/c)
                        @if (showToolTipTaxPaid)
                        {
                            <div class="info-tooltip">
                                <strong>Traditional Withdrawal:</strong> Traditional withdrawn for tax on traditional.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxPaid = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>

                    <th style="border-right: 2px solid #d1d5db;">
                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxPaid = !showToolTipTaxPaid" tabindex="0" title="Click for more info"></span>
                        @Numbered(23)Tax Paid (Roth A/c)
                        @if (showToolTipTaxPaid)
                        {
                            <div class="info-tooltip">
                                <strong>Roth Withdrawal:</strong> Roth withdrawn for tax on traditional.
                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxPaid = false"><span class="bi bi-x-lg"></span></span>
                            </div>
                        }
                    </th>
                }
                <th style="border-right: 2px solid #d1d5db;">
                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxPaid = !showToolTipTaxPaid" tabindex="0" title="Click for more info"></span>
                    @Numbered(24)Tax Paid Total (Traditional A/c Withdraw)
                    @if (showToolTipTaxPaid)
                    {
                        <div class="info-tooltip">
                            <strong>Roth Withdrawal:</strong> Roth withdrawn for tax on traditional.
                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxPaid = false"><span class="bi bi-x-lg"></span></span>
                        </div>
                    }
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in YearRows)
            {
                var rowClass = string.IsNullOrEmpty(row.Notes) ? string.Empty : "depleted";
                <tr class="@rowClass">
                    <td class="col-year" style="background-color: #f8f9fa; border-right: 2px solid #d1d5db;">@row.Year</td>
                    <td class="col-age" style="background-color: #f8f9fa; border-right: 2px solid #d1d5db;">@row.AgeYou</td>
                    <td class="col-age" style="background-color: #f8f9fa; border-right: 2px solid #d1d5db;">@row.AgePartner</td>
                    <td class="col-milestones" style="background-color: #f8f9fa; border-right: 2px solid #d1d5db; width: 100px; overflow-x: auto; white-space: nowrap;">@row.Milestone</td>

                    <td class="text-end" style="border-right: 2px solid #d1d5db; color: #2563EB;">
                        @row.AmountNeededForCostOfLiving.ToString("C0")
                    </td>
                    <td class="text-end" style="border-right: 2px solid #d1d5db; color: #2563EB;">
                        @row.TotalWithdrawForCostOfLivingExcludingTaxes.ToString("C0")
                    </td>

                    @* Withdrawals for Cost Of Living *@
                    @if (VisibleGroups.Contains(GroupKey.WithdrawalCOLBreakDown))
                    {

                        <td class="text-end col-account-activity">
                            @row.TaxableWithdrawnForCostOfLivingIfAtAll.ToString("C0")
                        </td>

                        <td class="text-end col-account-activity">
                            @row.TradWithdrawnForCostOfLivingIfAtAll.ToString("C0")
                        </td>
                        <td class="text-end col-account-activity" style="border-right: 2px solid #d1d5db;">
                            @row.RothWithdrawnForCostOfLivingIfAtAll.ToString("C0")
                        </td>
                    }


                    @if (VisibleGroups.Contains(GroupKey.IncomeBreakDown))
                    {
                        <td class="text-end col-income-sources">
                            @row.SSYou.ToString("C0")
                        </td>
                        <td class="text-end col-income-sources">
                            @row.SSPartner.ToString("C0")
                        </td>
                        <td class="text-end col-income-sources" style="border-right: 2px solid #d1d5db;">
                            @row.ReverseMortgage.ToString("C0")
                        </td>
                        <td class="text-end col-income-sources" style="border-right: 2px solid #d1d5db;">
                            @row.GrowthBeforeTaxes.ToString("C0")
                        </td>
                      
                    }

                    <td class="text-end col-income-sources" style="border-right: 2px solid #d1d5db;">
                        @( (row.SSYou + row.SSPartner + row.ReverseMortgage + row.GrowthBeforeTaxes).ToString("C0") )
                    </td>

                    @if (VisibleGroups.Contains(GroupKey.EndingBalancesBreakDown))
                    {
                        <td class="text-end col-ending-balances">
                            @row.EndingTaxable.ToString("C0")
                        </td>
                        <td class="text-end col-ending-balances">
                            @row.EndingTraditional.ToString("C0")
                        </td>
                        <td class="text-end col-ending-balances">
                            @row.EndingRoth.ToString("C0")
                        </td>

                   
                    }

                    <td class="text-end col-ending-balances" style="border-right: 2px solid #d1d5db;">
                        @( (row.EndingTaxable + row.EndingTraditional + row.EndingRoth).ToString("C0") )
                    </td>


                    <td class="text-end col-account-activity" style="color: #F56565;">
                        @row.TaxesDueOnAllTaxableGrowthAndIncome.ToString("C0")
                    </td>

                    @if (VisibleGroups.Contains(GroupKey.TaxPaidOnIncomeBreakDown))
                    {
                        <td class="text-end col-account-activity">
                            @row.TaxableWithdrawForInitialAndProbablyOnlyTaxPaymenOnTaxableIncome.ToString("C0")
                        </td>
                        <td class="text-end col-account-activity">
                            @row.TraditionalWithdrawForInitialTaxPaymentOnTaxableIncome.ToString("C0")
                        </td>
                        <td class="text-end col-account-activity">
                            @row.RothWithdrawForInitialTaxPaymentOnTaxableIncome.ToString("C0")
                        </td>
                    }
                    <td class="text-end col-account-activity">
                        @( (row.TaxableWithdrawForInitialAndProbablyOnlyTaxPaymenOnTaxableIncome + row.TraditionalWithdrawForInitialTaxPaymentOnTaxableIncome + row.RothWithdrawForInitialTaxPaymentOnTaxableIncome).ToString("C0") )
                    </td>

                    <td class="text-end col-account-activity">
                        @row.TaxDueDueToTraditionalWithdrawnForTaxOnTraditional.ToString("C0")
                    </td>

                    @if (VisibleGroups.Contains(GroupKey.TaxPaidTraditionalBreakDown))
                    {
                        <td class="text-end col-account-activity">
                            @row.TraditionalWithdrawnForTaxOnTraditional.ToString("C0")
                        </td>
                        <td class="text-end col-account-activity">
                            @row.RothWithdrawnForTaxOnTraditional.ToString("C0")
                        </td>
                    }
                    <td class="text-end col-account-activity">
                        @( (row.TraditionalWithdrawnForTaxOnTraditional + row.RothWithdrawnForTaxOnTraditional).ToString("C0") )
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
