@using FinPlan.Web.Config
@using Microsoft.Extensions.Options
@inject IJSRuntime JSRuntime
@inject IOptions<AdSettings> AdOptions

@* Render a container. Only mark it with data-ad-type when no AdSense client is configured so local adLoader can insert placeholders.
   When an AdSense client exists we allow the native ins/adsbygoogle flow to run. *@
<div data-ad-type="@(string.IsNullOrEmpty(AdClient) ? "adsbygoogle" : null)" class="adunit-container" style="@Style">
    @if (ShouldRenderAd)
    {
        <ins class="adsbygoogle @Class"
             style="width:100%;height:100%;display:block;"
             data-ad-client="@AdClient"
             data-ad-slot="@ResolvedSlot"
             data-ad-format="@Format"
             data-full-width-responsive="@Responsive"
             data-adtest="@AdTest"
             data-ad-layout-key="@LayoutKey"></ins>
    }
    else if (!string.IsNullOrEmpty(PlaceholderText))
    {
        <div class="adunit-placeholder text-muted small">@PlaceholderText</div>
    }
</div>

@code {
    private AdSettings Settings => AdOptions.Value;
    private string? AdClient => string.IsNullOrWhiteSpace(Settings.ClientId) ? null : Settings.ClientId;
    private string? ResolvedSlot => !string.IsNullOrWhiteSpace(Slot) ? Slot : Settings.DefaultSlot;
    private string? AdTest => Settings.UseTestAds ? "on" : null;
    // Allow rendering when client id is present. Empty slot IDs are valid for Google's test ads.
    private bool ShouldRenderAd => !string.IsNullOrWhiteSpace(AdClient);

    [Parameter]
    public string Slot { get; set; } = string.Empty;

    [Parameter]
    public string Style { get; set; } = "display:block";

    [Parameter]
    public string? Format { get; set; } = "auto";

    [Parameter]
    public string? Responsive { get; set; } = "true";

    [Parameter]
    public string? LayoutKey { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? PlaceholderText { get; set; } = "Advertisement";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!ShouldRenderAd)
        {
            return;
        }

        try
        {
            // Use the safe fpAds.safePush() method designed to avoid Blazor/AdSense DOM conflicts
            // This method includes retry logic and proper timing to avoid DOM mutation conflicts
            await JSRuntime.InvokeVoidAsync("fpAds.safePush");
        }
        catch (JSException ex)
        {
            // Swallow JS initialization issues to avoid breaking the page; they can be inspected in browser console.
            System.Diagnostics.Debug.WriteLine($"AdUnit JS error: {ex.Message}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"AdUnit error: {ex.Message}");
        }
    }
}
