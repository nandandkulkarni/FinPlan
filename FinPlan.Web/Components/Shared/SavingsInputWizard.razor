@using FinPlan.Shared.Models.Savings
@using Microsoft.AspNetCore.Components
@using System.Reflection

<style>
    .wizard-step-bubble {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        background: #6D5DFC; /* accent color used elsewhere */
        color: #fff;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(109,93,252,0.18);
    }

    .wizard-header-row {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .wizard-step-text {
        color: var(--muted);
        font-size: 0.9rem;
    }
</style>

@if (Visible && Model != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1055;">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="wizard-header-row">
                        <div class="wizard-step-bubble">@wizardStep</div>
                        <div>
                            <h5 class="modal-title" style="margin:0;">Savings Plan Inputs</h5>
                            <div class="wizard-step-text">Step @wizardStep of 5</div>
                        </div>
                    </div>
                    <button type="button" class="btn-close" aria-label="Save & Close" @onclick="CloseClicked"></button>
                </div>
                <div class="modal-body" style="min-height:360px; max-height:520px; overflow:auto;">
                    @if (wizardStep == 1)
                    {
                        <label class="form-label">Milestones & ages</label>
                        <div class="row g-2">
                            <div class="col-md-6">
                                <label class="form-label">Current Age</label>
                                <input class="form-control" type="number" @bind="Model.CurrentAge" @bind:after="OnFieldChanged" min="0" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Planned Retirement Age</label>
                                <input class="form-control" type="number" @bind="Model.RetirementAge" @bind:after="OnFieldChanged" min="40" max="80" />
                            </div>
                        </div>
                        <div class="row g-2 mt-3">
                            <div class="col-md-6">
                                <label class="form-label">Life expectancy (age)</label>
                                <input class="form-control" type="number" @bind="LifeExpectancy" @bind:after="OnFieldChanged" min="55" max="120" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Years until retirement (auto)</label>
                                <input class="form-control" type="number" value="@Model.Years" disabled />
                            </div>
                        </div>
                    }
                    else if (wizardStep == 2)
                    {
                        <label class="form-label">Starting Balances</label>
                        <div class="row mb-2">
                            <div class="col-md-4">
                                <label class="form-label">Taxable ($)</label>
                                <input class="form-control" type="number" @bind="Model.InitialTaxableAmount" @bind:after="OnFieldChanged" step="1" min="0" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Traditional ($)</label>
                                <input class="form-control" type="number" @bind="Model.InitialTraditionalAmount" @bind:after="OnFieldChanged" step="1" min="0" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Roth ($)</label>
                                <input class="form-control" type="number" @bind="Model.InitialRothAmount" @bind:after="OnFieldChanged" step="1" min="0" />
                            </div>
                        </div>
                        <div class="mt-2 p-2" style="background:#f8f9fa; border-radius:6px;">
                            <strong>Total starting balance:</strong> @Model.InitialAmount.ToString("C0")
                        </div>
                    }
                    else if (wizardStep == 3)
                    {
                        <label class="form-label">Monthly Contributions</label>
                        <div class="row mb-2">
                            <div class="col-md-4">
                                <label class="form-label">Taxable / mo</label>
                                <input class="form-control" type="number" @bind="Model.MonthlyTaxableContribution" @bind:after="OnFieldChanged" step="1" min="0" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Traditional / mo</label>
                                <input class="form-control" type="number" @bind="Model.MonthlyTraditionalContribution" @bind:after="OnFieldChanged" step="1" min="0" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Roth / mo</label>
                                <input class="form-control" type="number" @bind="Model.MonthlyRothContribution" @bind:after="OnFieldChanged" step="1" min="0" />
                            </div>
                        </div>
                    }
                    else if (wizardStep == 4)
                    {
                        <label class="form-label">Estimated Growth Rates (annual %)</label>
                        <div class="row mb-2">
                            <div class="col-md-4">
                                <label class="form-label">Taxable</label>
                                <input class="form-control" type="number" @bind="Model.AnnualGrowthRateTaxable" @bind:after="OnFieldChanged" step="0.1" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Traditional</label>
                                <input class="form-control" type="number" @bind="Model.AnnualGrowthRateTraditional" @bind:after="OnFieldChanged" step="0.1" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Roth</label>
                                <input class="form-control" type="number" @bind="Model.AnnualGrowthRateRoth" @bind:after="OnFieldChanged" step="0.1" />
                            </div>
                        </div>
                    }
                    else if (wizardStep == 5)
                    {
                        <label class="form-label">Tax treatment</label>
                        <div class="row g-2">
                            <div class="col-md-4">
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" id="useTaxAdv" @bind="Model.UseTaxAdvantaged" @bind:after="OnFieldChanged" />
                                    <label class="form-check-label" for="useTaxAdv">Use tax advantaged accounts</label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Taxable Income Type</label>
                                <select class="form-select" @bind="Model.TaxableIncomeType" @bind:after="OnFieldChanged">
                                    @foreach (var name in Enum.GetNames(typeof(FinPlan.Shared.Enums.IncomeType)))
                                    {
                                        <option value="@name">@name</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Tax Bracket</label>
                                <select class="form-select" @bind="Model.TaxBracket" @bind:after="OnFieldChanged">
                                    @foreach (var name in Enum.GetNames(typeof(FinPlan.Shared.Enums.TaxBracket)))
                                    {
                                        <option value="@name">@name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" aria-label="Save & Close" @onclick="CloseClicked">Save & Close</button>
                    <button type="button" class="btn btn-primary" @onclick="PrevwizardStep" disabled="@(wizardStep == 1)">Previous</button>
                    <button type="button" class="btn btn-primary" @onclick="NextOrSubmit">@(wizardStep == 5 ? "Save & Finish" : "Save & Next")</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public SavingsCalculatorModel? Model { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback<(int AgeYou, int AgePartner)> OnFinished { get; set; }

    [Parameter]
    public int InitialStep { get; set; } = 1;

    private int wizardStep = 1;
    private bool _wasVisible = false;
    private int _lastInitialStep = 1;

    // Helper property for life expectancy (if the model doesn't have this property)
    private int LifeExpectancy { get; set; } = 100;

    protected override void OnParametersSet()
    {
        if (Visible)
        {
            if (!_wasVisible)
            {
                if (InitialStep >= 1 && InitialStep <= 5) wizardStep = InitialStep;
                _lastInitialStep = InitialStep;
            }
            else if (InitialStep != _lastInitialStep)
            {
                if (InitialStep >= 1 && InitialStep <= 5) wizardStep = InitialStep;
                _lastInitialStep = InitialStep;
            }
        }

        _wasVisible = Visible;
    }

    private async Task PrevwizardStep()
    {
        if (wizardStep > 1)
        {
            await InvokeOnSave();
            wizardStep--;
            StateHasChanged();
        }
    }

    private async Task NextOrSubmit()
    {
        if (wizardStep < 5)
        {
            // minimal validation for step 1
            if (wizardStep == 1 && (Model?.RetirementAge ?? 0) <= 0) return;

            await InvokeOnSave();
            wizardStep++;
            StateHasChanged();
            return;
        }

        // final step: save and close
        await InvokeOnSave();

        if (OnFinished.HasDelegate && Model != null)
        {
            // send back ages to parent for any additional mapping
            await OnFinished.InvokeAsync((Model.CurrentAge, Model.CurrentAge));
        }

        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private async Task CloseClicked()
    {
        await InvokeOnSave();
        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private async Task InvokeOnSave()
    {
        try
        {
            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync();
            }
        }
        catch { /* swallow - original code ignored errors */ }
    }

    // Single event handler for all field changes
    private async Task OnFieldChanged()
    {
        await InvokeOnSave();
        StateHasChanged();
    }
}