@inherits InputNumber<decimal>

<input @attributes="AdditionalAttributes"
       class="@CssClass"
       value="@CurrentValueAsString"
       @oninput="OnInputHandler"
       @onblur="HandleBlur" />

@code {
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

    private string currentValueAsString = string.Empty;
    private bool isEditing = false;

    protected override void OnParametersSet()
    {
        if (!isEditing)
        {
            currentValueAsString = FormatValue(CurrentValue);
        }
        base.OnParametersSet();
    }

    private string GetFormattedValue()
    {
        if (isEditing)
        {
            return currentValueAsString;
        }
        return string.IsNullOrEmpty(currentValueAsString)
            ? FormatValue(CurrentValue)
            : currentValueAsString;
    }

    private string FormatValue(decimal value)
    {
        string id = "";
        if (AdditionalAttributes != null && AdditionalAttributes.TryGetValue("id", out var idObj))
        {
            id = idObj?.ToString() ?? "";
        }
        if (id.Contains("initial") || id.Contains("monthly"))
        {
            return value.ToString("C0", new System.Globalization.CultureInfo("en-US"));
        }
        return value.ToString("C", new System.Globalization.CultureInfo("en-US"));
    }

    private void OnInputHandler(ChangeEventArgs e)
    {
        isEditing = true;
        string inputValue = e.Value?.ToString() ?? string.Empty;
        string id = "";
        if (AdditionalAttributes != null && AdditionalAttributes.TryGetValue("id", out var idObj))
        {
            id = idObj?.ToString() ?? "";
        }
        string validInput;
        if (id.Contains("initial") || id.Contains("monthly"))
        {
            validInput = new string(inputValue.Where(char.IsDigit).ToArray());
        }
        else
        {
            validInput = new string(inputValue.Where(c => char.IsDigit(c) || c == '.').ToArray());
        }
        currentValueAsString = validInput;
        if (decimal.TryParse(validInput, out decimal parsedValue))
        {
            CurrentValueAsString = parsedValue.ToString();
        }
    }

    private async Task HandleBlur(FocusEventArgs e)
    {
        OnBlurHandler();
        if (OnBlur.HasDelegate)
        {
            await OnBlur.InvokeAsync(e);
        }
    }

    private void OnBlurHandler()
    {
        isEditing = false;
        if (decimal.TryParse(currentValueAsString, out decimal parsedValue))
        {
            CurrentValueAsString = parsedValue.ToString();
            currentValueAsString = FormatValue(parsedValue);
        }
        else if (string.IsNullOrWhiteSpace(currentValueAsString))
        {
            CurrentValueAsString = "0";
            currentValueAsString = FormatValue(0);
        }
    }
}