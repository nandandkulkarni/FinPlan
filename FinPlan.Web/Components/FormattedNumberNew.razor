@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@namespace FinPlan.Web.Components
@inherits InputBase<decimal>

<input @attributes="AdditionalAttributes" class="@CssClass" value="@CurrentValueAsString" @oninput="OnInput" @onblur="HandleOnBlur" />

@code {
    [Parameter]
    public int Decimals { get; set; } = 0;

    // Allow parent components to handle blur (accepts parameterless Task or FocusEventArgs handler)
    [Parameter]
    public EventCallback<FocusEventArgs> OnBlur { get; set; }

    private string FormatString => $"N{Decimals}";

    protected override bool TryParseValueFromString(string? value, out decimal result, out string validationErrorMessage)
    {
        validationErrorMessage = string.Empty;
        result = default;
        if (string.IsNullOrWhiteSpace(value))
        {
            result = default;
            return true;
        }

        var ns = System.Globalization.CultureInfo.CurrentCulture.NumberFormat;
        var cleaned = value.Replace(ns.NumberGroupSeparator, string.Empty)
                           .Replace(ns.CurrencySymbol, string.Empty)
                           .Trim();

        if (decimal.TryParse(cleaned, System.Globalization.NumberStyles.Number, System.Globalization.CultureInfo.CurrentCulture, out var dec))
        {
            result = dec;
            return true;
        }

        validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not a valid number.";
        return false;
    }

    protected override string FormatValueAsString(decimal value)
    {
        return value.ToString(FormatString, System.Globalization.CultureInfo.CurrentCulture);
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        var s = e?.Value?.ToString() ?? string.Empty;
        if (TryParseValueFromString(s, out var parsed, out _))
        {
            CurrentValue = parsed;
        }
        else
        {
            // allow intermediate input
            CurrentValueAsString = s;
        }
        await Task.CompletedTask;
    }

    private async Task HandleOnBlur(FocusEventArgs args)
    {
        // Format value when leaving input
        CurrentValueAsString = FormatValueAsString(CurrentValue);

        // Forward the blur event to consumer if provided
        if (OnBlur.HasDelegate)
        {
            await OnBlur.InvokeAsync(args);
        }
    }
}