@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <!-- Top ad banner reserved spot (responsive) -->
        <div class="ad-banner-placeholder" aria-hidden="true" title="Ad banner placeholder">
            <div class="ad-placeholder">Top banner ad</div>
        </div>

        <div class="content-rail d-flex">
            <article class="content px-4">
                @Body
            </article>

            <!-- Right rail for desktop ads; hidden on small screens -->
            <aside class="right-rail d-none d-lg-block">
                <div class="ad-sidebar-placeholder ad-placeholder" aria-hidden="true" title="Right rail ad">Right rail ad</div>
            </aside>
        </div>

        <!-- Mobile sticky bottom ad (hidden on large screens) -->
        <div class="mobile-sticky-ad d-lg-none" aria-hidden="true">
            <div class="ad-placeholder small">Mobile sticky ad</div>
        </div>

    </main>
</div>

<!-- Consent banner -->
<div id="consent-banner" style="display:none; position:fixed; right:16px; bottom:16px; z-index:1050; max-width:420px;">
    <div class="card shadow">
        <div class="card-body">
            <h6 class="card-title">Cookies & Consent</h6>
            <p class="small">We use cookies to improve calculators and personalize ads. Manage consent:</p>
            <div class="d-flex align-items-center mb-2">
                <div class="form-check me-2">
                    <input class="form-check-input" type="checkbox" id="consent-analytics" />
                    <label class="form-check-label small" for="consent-analytics">Analytics</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="consent-ads" />
                    <label class="form-check-label small" for="consent-ads">Ads personalization</label>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-link btn-sm me-2" id="consent-decline">Decline all</button>
                <button class="btn btn-primary btn-sm" id="consent-accept">Save</button>
            </div>
        </div>
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script>
    // Consent logic: show banner if no consent cookie exists
    (function(){
        const consentKey = 'finplan_consent_v1';

        function showBanner() {
            const el = document.getElementById('consent-banner');
            if (!el) return;
            el.style.display = 'block';
            // initialise checkbox states from stored consent
            const existing = window.cookieHandlerExtension.GetConsentObject(consentKey);
            if (existing) {
                const a = document.getElementById('consent-analytics');
                const p = document.getElementById('consent-ads');
                if (a) a.checked = !!existing.analytics;
                if (p) p.checked = !!existing.personalizedAds;
            } else {
                const a = document.getElementById('consent-analytics');
                const p = document.getElementById('consent-ads');
                if (a) a.checked = true; // default analytics allowed
                if (p) p.checked = false; // default ads off
            }
        }

        function saveConsent() {
            const aEl = document.getElementById('consent-analytics');
            const pEl = document.getElementById('consent-ads');
            const obj = {
                analytics: !!(aEl && aEl.checked),
                personalizedAds: !!(pEl && pEl.checked),
                timestamp: new Date().toISOString()
            };
            window.cookieHandlerExtension.SetConsentObject(consentKey, obj, 365);
            window.cookieHandlerExtension.ApplyConsentToWindow(consentKey);
            const el = document.getElementById('consent-banner'); if (el) el.style.display = 'none';
        }

        function declineAll() {
            const obj = { analytics: false, personalizedAds: false, timestamp: new Date().toISOString() };
            window.cookieHandlerExtension.SetConsentObject(consentKey, obj, 365);
            window.cookieHandlerExtension.ApplyConsentToWindow(consentKey);
            const el = document.getElementById('consent-banner'); if (el) el.style.display = 'none';
        }

        // Wait for the layout DOM to be available (handles Blazor render replacing DOM)
        function initWhenReady() {
            let attempts = 0;
            const maxAttempts = 50; // ~5s
            const interval = setInterval(() => {
                attempts++;
                const banner = document.getElementById('consent-banner');
                const accept = document.getElementById('consent-accept');
                const decline = document.getElementById('consent-decline');
                if (banner && accept && decline) {
                    clearInterval(interval);

                    // Attach listeners (avoid duplicate attachments)
                    accept.removeEventListener('click', saveConsent);
                    decline.removeEventListener('click', declineAll);
                    accept.addEventListener('click', saveConsent);
                    decline.addEventListener('click', declineAll);

                    // Apply stored consent to window flags
                    try { window.cookieHandlerExtension.ApplyConsentToWindow(consentKey); } catch(e) { console.error(e); }

                    const has = window.cookieHandlerExtension.GetConsentObject(consentKey);
                    if (!has) {
                        // slight delay so layout paint is visible and it doesn't flash due to re-render
                        setTimeout(() => showBanner(), 80);
                    }
                }

                if (attempts >= maxAttempts) {
                    clearInterval(interval);
                }
            }, 100);
        }

        // Start init after a short tick to allow Blazor to render
        setTimeout(initWhenReady, 50);

    })();
</script>
