@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager Navigation
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject FinPlan.Web.Services.UserGuidService UserGuidService
@inject IJSRuntime JSRuntime

<style>
    /* Top strip: primary navigation shortcuts */
    .top-strip {
        background: #FFD600; /* yellow background */
        color: #222;
        border-bottom: 1px solid rgba(0,0,0,0.06);
        padding: 6px 0;
        box-shadow: 0 1px 2px rgba(0,0,0,0.03);
        z-index: 1030;
    }

        .top-strip .menu-container {
            display: flex;
            align-items: center;
            gap: 12px;
            position: relative; /* allow absolute positioning of actions */
        }

        /* Centered links wrapper */
        .top-strip .menu-links {
            margin: 0 auto;
            display: flex;
            gap: 12px;
            justify-content: center;
            align-items: center;
        }

        .top-strip .menu-link {
            color: #222;
            font-weight: 600;
            padding: 6px 10px;
            border-radius: 6px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

            /* make links more legible on yellow background on hover */
            .top-strip .menu-link:hover {
                background: rgba(0,0,0,0.04);
                text-decoration: none;
            }

            /* Active/current page highlight for NavLink (NavLink adds 'active' automatically) */
            .top-strip .menu-link.active,
            .top-strip .menu-link[aria-current="page"] {
                background-color: #fff8d6; /* soft yellow/white contrast */
                color: #111;
                font-weight: 700;
                box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                border-radius: 8px;
                padding: 6px 12px;
                transform: translateY(-1px);
            }

        /* Keep actions pinned to the right */
        .top-strip .menu-actions {
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            gap: 8px;
            align-items: center;
        }

    /* Mobile hamburger menu */
    .mobile-menu-toggle {
        display: none;
        background: none;
        border: none;
        color: #222;
        font-size: 1.5rem;
        padding: 8px;
        cursor: pointer;
        border-radius: 4px;
    }

        .mobile-menu-toggle:hover {
            background: rgba(0,0,0,0.04);
        }

    /* Mobile menu overlay */
    .mobile-menu-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        z-index: 1040;
    }

    .mobile-menu {
        display: none;
        position: fixed;
        top: 0;
        right: 0;
        width: 280px;
        height: 100vh;
        background: #fff;
        box-shadow: -2px 0 10px rgba(0,0,0,0.1);
        z-index: 1050;
        overflow-y: auto;
        padding: 20px;
    }

    .mobile-menu.show {
        display: block !important;
    }

    .mobile-menu-overlay {
        display: none;
    }

    .mobile-menu-overlay.show {
        display: block !important;
    }

    .mobile-menu-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
    }

    .mobile-menu-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #666;
        cursor: pointer;
        padding: 5px;
    }

    .mobile-menu-links {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .mobile-menu-link {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 16px;
        color: #222;
        text-decoration: none;
        border-radius: 8px;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .mobile-menu-link:hover {
            background: #f8f9fa;
            text-decoration: none;
        }

        .mobile-menu-link.active {
            background: #fff8d6;
            color: #111;
            font-weight: 600;
        }

    .mobile-menu-step-badge {
        width: 32px;
        height: 32px;
        min-width: 32px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: #222;
        color: #fff;
        font-weight: 700;
        font-size: 0.9rem;
        flex-shrink: 0;
    }

    .mobile-menu-link.active .mobile-menu-step-badge {
        background: #fff8d6;
        color: #111;
        border: 1px solid rgba(0,0,0,0.1);
    }

    /* separator + auth box */
    .top-sep {
        width: 1px;
        height: 28px;
        background: rgba(0,0,0,0.08);
        margin-left: 12px;
        margin-right: 8px;
        align-self: center;
    }

    .auth-box {
        display: inline-flex;
        gap: 8px;
        align-items: center;
        padding-left: 6px;
    }

    .auth-name {
        font-weight: 600;
        color: #222;
        margin-right: 6px;
    }

    .auth-btn {
        min-width: 74px;
    }

    /* Feedback banner styles (placed above top-strip) */
    .feedback-strip {
        background: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,0.04);
        padding: 8px 0;
        font-size: 0.95rem;
    }

        .feedback-strip .feedback-title {
            font-weight: 700;
            margin-right: 8px;
        }

        .feedback-strip .feedback-links {
            display: flex;
            gap: 8px;
            align-items: center;
        }

            .feedback-strip .feedback-links .btn {
                min-width: 160px;
            }

    /* Numbered step badge for navigation */
    .nav-step-badge {
        width: 36px;
        height: 36px;
        min-width: 36px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: #1F6FEB;
        color: #fff;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        margin-right: 8px;
        flex-shrink: 0;
    }

    /* Slightly larger badge for emphasis on desktop */
    @@media (min-width: 1200px) {
        .nav-step-badge {
            width: 40px;
            height: 40px;
            min-width: 40px;
            font-size: 1.05rem;
        }
    }

    /* When the menu-link is active, invert badge so it matches active background */
    .top-strip .menu-link.active .nav-step-badge,
    .top-strip .menu-link[aria-current="page"] .nav-step-badge {
        background: #fff8d6;
        color: #111;
        border: 1px solid rgba(0,0,0,0.04);
    }

    /* Keep icon spacing consistent when badge present */
    .menu-link .bi {
        font-size: 1.05rem;
    }

    /* Mobile responsive breakpoints */
    @@media (max-width: 992px) {
        .top-strip .menu-links {
            display: none; /* Hide desktop menu on tablets and below */
        }
        
        .mobile-menu-toggle {
            display: block; /* Show hamburger menu */
        }
        
        .top-strip .menu-actions {
            position: static;
            transform: none;
            margin-left: auto;
        }
        
    }

    @@media (max-width: 768px) {
        .nav-step-badge {
            width: 30px;
            height: 30px;
            min-width: 30px;
            font-size: 0.95rem;
            margin-right: 6px;
        }

        .top-strip .menu-link {
            padding: 6px 8px;
            font-size: .92rem;
        }
        
        .top-strip {
            padding: 8px 0;
        }
        
        .top-strip .menu-container {
            padding: 0 15px;
        }
    }

    @@media (max-width: 480px) {
        /* If extremely small, reduce label length (use existing icons + smaller text) */
        .nav-step-badge {
            width: 26px;
            height: 26px;
            min-width: 26px;
            font-size: 0.85rem;
            margin-right: 6px;
        }
        
        .top-strip .menu-container {
            padding: 0 10px;
        }
        
        .mobile-menu {
            width: 100vw;
        }
    }

    /* Shift page content inward so it doesn't sit under fixed sidebars */
    /* Use full viewport width for the layout container; center the inner content rail using a max-width.
           This allows the page to use the full screen but keeps the main content centered on large screens. */
    .page-with-sidebars {
        width: 100vw;
        padding-left: 0;
        padding-right: 0;
        box-sizing: border-box;
    }

    /* Constrain and center the primary content area so it appears centered on large screens while
           allowing background/side elements to use full width. Adjust max-width as needed. */
    .content {
        /*         max-width: 1140px; /* Bootstrap container-lg width; adjust for tighter or wider layouts */
        */ margin-left: auto;
        margin-right: auto;
        width: 100%;
    }

    /* Make content rail use full width inside the container */
    .content-rail {
        width: 100%;
    }

    /* Mobile content improvements */
    @@media (max-width: 768px) {
        .content {
            padding-left: 15px !important;
            padding-right: 15px !important;
        }
        
        .page-with-sidebars {
            padding-left: 0;
            padding-right: 0;
        }
    }

    @@media (max-width: 480px) {
        .content {
            padding-left: 10px !important;
            padding-right: 10px !important;
        }
    }
</style>

<!-- Feedback strip placed above navigation -->
@* <div class="feedback-strip" role="region" aria-label="Feedback">
    <div class="container d-flex align-items-center justify-content-between">
        <div>
            <span class="feedback-title">Feedback</span>
            <span class="small text-muted">Share quick survey responses or general feedback</span>
        </div>
        <div class="feedback-links">
            <NavLink class="btn btn-sm btn-outline-primary" href="/cost-of-living-survey">Cost of Living Survey</NavLink>
            <NavLink class="btn btn-sm btn-outline-primary" href="/wealth-journey-survey">Wealth Journey Survey</NavLink>
            <NavLink class="btn btn-sm btn-outline-primary" href="/sample-survey">Simple Survey</NavLink>
        </div>
    </div>
</div> *@

<div class="top-strip">
    <div class="container menu-container">
        <!-- Mobile hamburger menu button -->
        <button class="mobile-menu-toggle" @onclick="ToggleMobileMenu" aria-label="Open navigation menu">
            <span class="bi bi-list"></span>
        </button>

        <!-- Desktop menu links -->
        <div class="menu-links">
            <NavLink class="menu-link" href="/home">
                <span class="bi bi-house-door" aria-hidden="true"></span>
                <span>Home</span>
            </NavLink>

            <NavLink class="menu-link" href="/future-cost-of-living">
                <span class="nav-step-badge" aria-hidden="true">1</span>
                <span class="bi bi-list-ul" aria-hidden="true"></span>
                <span>Future Cost of Living</span>
            </NavLink>

            <NavLink class="menu-link" href="/savings-wealth-building">
                <span class="nav-step-badge" aria-hidden="true">2</span>
                <span class="bi bi-piggy-bank" aria-hidden="true"></span>
                <span>Savings & Wealth-Building</span>
            </NavLink>

            <NavLink class="menu-link" href="/retirement-income-planner">
                <span class="nav-step-badge" aria-hidden="true">3</span>
                <span class="bi bi-wallet2" aria-hidden="true"></span>
                <span>Retirement Income Planner</span>
            </NavLink>
            
            <NavLink class="menu-link" href="/about-rewealthen">
                <span>About</span>
            </NavLink>
        </div>

        <div class="menu-actions">
            <div class="top-sep" aria-hidden="true"></div>

            @if (isAuthLoaded)
            {
                @* if (isAuthenticated && currentUser != null)
                {
                    var first = currentUser.FindFirst("given_name")?.Value ?? string.Empty;
                    var last = currentUser.FindFirst("family_name")?.Value ?? string.Empty;
                    var display = (!string.IsNullOrWhiteSpace(first) || !string.IsNullOrWhiteSpace(last)) ? $"{first} {last}".Trim() : (currentUser.FindFirst("name")?.Value ?? currentUser.Identity?.Name ?? "User");
                    <div class="auth-box" role="region" aria-label="User account">
                        <span class="auth-name">@display</span>
                        <button class="btn btn-sm btn-outline-secondary auth-btn" @onclick="SignOutClicked" aria-label="Sign out">Sign out</button>
                    </div>
                }
                else
                {
                    <div class="auth-box" role="region" aria-label="Authentication">
                        <a class="btn btn-sm btn-primary auth-btn" href="/signin-google-challenge" aria-label="Sign in with Google">Sign in</a>
                        <a class="btn btn-sm btn-outline-secondary d-none d-md-inline auth-btn" href="/signin-google-challenge" aria-label="Sign up with Google">Sign up</a>
                    </div>
                } *@
            }
            else
            {
                <div class="auth-box" role="region" aria-label="Authentication">
                    <div class="spinner-border spinner-border-sm text-dark" role="status" aria-hidden="true"></div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Mobile menu overlay -->
<div class="mobile-menu-overlay @(showMobileMenu ? "show" : "")" @onclick="CloseMobileMenu"></div>
<div class="mobile-menu @(showMobileMenu ? "show" : "")">
    <div class="mobile-menu-header">
        <h5 class="mb-0">Navigation</h5>
        <button class="mobile-menu-close" @onclick="CloseMobileMenu" aria-label="Close menu">
            <span class="bi bi-x"></span>
        </button>
    </div>
    
    <div class="mobile-menu-links">
        <NavLink class="mobile-menu-link" href="/home" @onclick="CloseMobileMenu">
            <span class="bi bi-house-door" aria-hidden="true"></span>
            <span>Home</span>
        </NavLink>

        <NavLink class="mobile-menu-link" href="/future-cost-of-living" @onclick="CloseMobileMenu">
            <span class="mobile-menu-step-badge" aria-hidden="true">1</span>
            <span class="bi bi-list-ul" aria-hidden="true"></span>
            <span>Future Cost of Living</span>
        </NavLink>

        <NavLink class="mobile-menu-link" href="/savings-wealth-building" @onclick="CloseMobileMenu">
            <span class="mobile-menu-step-badge" aria-hidden="true">2</span>
            <span class="bi bi-piggy-bank" aria-hidden="true"></span>
            <span>Savings & Wealth-Building</span>
        </NavLink>

        <NavLink class="mobile-menu-link" href="/retirement-income-planner" @onclick="CloseMobileMenu">
            <span class="mobile-menu-step-badge" aria-hidden="true">3</span>
            <span class="bi bi-wallet2" aria-hidden="true"></span>
            <span>Retirement Income Planner</span>
        </NavLink>
        
        <NavLink class="mobile-menu-link" href="/about-rewealthen" @onclick="CloseMobileMenu">
            <span class="bi bi-info-circle" aria-hidden="true"></span>
            <span>About</span>
        </NavLink>
    </div>
</div>

<main>
    <div class="container-fluid page-with-sidebars">
        <div class="content-rail d-flex">
            <article class="content px-4">
                @Body
            </article>
        </div>
    </div>
</main>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="/js/adLoader.js"></script>
<script src="/js/audioInterop.js"></script>
<script>
    // Cookie consent functionality - COMPLETELY DISABLED
    // Automatically set consent to decline all tracking to prevent any prompts
    (function(){
        const consentKey = 'finplan_consent_v1';

        function setDefaultConsent() {
            const obj = { 
                analytics: false, 
                personalizedAds: false, 
                timestamp: new Date().toISOString() 
            };
            try {
                window.cookieHandlerExtension.SetConsentObject(consentKey, obj, 365);
                window.cookieHandlerExtension.ApplyConsentToWindow(consentKey);
            } catch(e) { 
                console.log('Cookie handler not available, consent tracking disabled');
            }
        }

        // Wait for the layout DOM to be available
        function initWhenReady() {
            let attempts = 0;
            const maxAttempts = 50;
            const interval = setInterval(() => {
                attempts++;
                
                try {
                    // wire blazor error UI controls safely
                    const reloadLink = document.querySelector('#blazor-error-ui .reload');
                    const dismissLink = document.querySelector('#blazor-error-ui .dismiss');
                    if (reloadLink && typeof reloadLink.addEventListener === 'function') {
                        reloadLink.removeEventListener('click', window.__fp_reload_handler__);
                        window.__fp_reload_handler__ = function(ev) { ev.preventDefault(); try { window.location.reload(); } catch(e) { console.error(e); } };
                        reloadLink.addEventListener('click', window.__fp_reload_handler__);
                    }
                    if (dismissLink && typeof dismissLink.addEventListener === 'function') {
                        dismissLink.removeEventListener('click', window.__fp_dismiss_handler__);
                        window.__fp_dismiss_handler__ = function(ev) { ev.preventDefault(); var ui = document.getElementById('blazor-error-ui'); if (ui) ui.style.display = 'none'; };
                        dismissLink.addEventListener('click', window.__fp_dismiss_handler__);
                    }
                } catch (e) { console.error('blazor-error-ui handlers', e); }

                // Always ensure consent is set to decline all
                setDefaultConsent();
                
                // Initialize ad loader with no consent
                try {
                    if (window.adLoader && typeof window.adLoader.init === 'function') {
                        window.adLoader.init({ consentKey: consentKey });
                    }
                } catch(e) { 
                    console.log('Ad loader not available'); 
                }
                
                clearInterval(interval);

                if (attempts >= maxAttempts) {
                    clearInterval(interval);
                }
            }, 100);
        }

        // Handle escape key for mobile menu
        window.addMobileMenuEscapeListener = function(dotNetRef) {
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    const mobileMenu = document.querySelector('.mobile-menu.show');
                    if (mobileMenu) {
                        dotNetRef.invokeMethodAsync('CloseMobileMenu');
                    }
                }
            });
        };

        // Start init after a short tick to allow Blazor to render
        setTimeout(initWhenReady, 50);
    })();
</script>

<!-- Global JS error capture to help troubleshooting -->
<script>
    (function(){
        if (!window.fpDebug) window.fpDebug = {};

        window.addEventListener('error', function (e) {
            try {
                console.error('Global error:', e.message, e.filename + ':' + e.lineno, e.error ? e.error.stack : null);
            } catch (ex) { /* ignore */ }
        });

        window.addEventListener('unhandledrejection', function (e) {
            try {
                console.error('Unhandled Promise rejection:', e.reason);
            } catch (ex) { /* ignore */ }
        });

        // helper to log from C# via JSRuntime
        window.fpDebug.log = function () {
            try { console.log.apply(console, arguments); } catch (e) { }
        };
        window.fpDebug.error = function () {
            try { console.error.apply(console, arguments); } catch (e) { }
        };
    })();
</script>

@code {
    private ClaimsPrincipal? currentUser;
    private bool isAuthenticated = false;
    private bool isAuthLoaded = false;
    private bool userRecordCreated = false;

    // mobile menu state
    private bool showMobileMenu = false;
    private DotNetObjectReference<MainLayout>? dotNetRef;

    private void SignOutClicked()
    {
        // Force full navigation so the server signout endpoint runs and cookies are cleared
        Navigation.NavigateTo("/signout", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAuthStateAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add escape key listener for mobile menu after first render
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addMobileMenuEscapeListener", dotNetRef);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadAuthStateAsync()
    {
        try
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            currentUser = state.User;
            isAuthenticated = currentUser?.Identity?.IsAuthenticated ?? false;
        }
        catch
        {
            currentUser = null;
            isAuthenticated = false;
        }
        isAuthLoaded = true;

        // If signed in, ensure server has a user record
        if (isAuthenticated && currentUser != null && !userRecordCreated)
        {
            _ = EnsureUserRecordAsync(); // fire-and-forget but do not block UI
        }

        StateHasChanged();
    }

    private string GetApiBaseUrl()
    {
#if DEBUG
            return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

    private async Task EnsureUserRecordAsync()
    {
        if (currentUser == null) return;

        try
        {
            // Best stable identifier from claims: prefer 'sub', fallback to NameIdentifier or email
            var sub = currentUser.FindFirst("sub")?.Value ?? currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? currentUser.FindFirst("email")?.Value;
            if (string.IsNullOrWhiteSpace(sub)) return;

            var email = currentUser.FindFirst(ClaimTypes.Email)?.Value ?? currentUser.FindFirst("email")?.Value;
            var firstName = currentUser.FindFirst(ClaimTypes.GivenName)?.Value ?? currentUser.FindFirst("given_name")?.Value;
            var lastName = currentUser.FindFirst(ClaimTypes.Surname)?.Value ?? currentUser.FindFirst("family_name")?.Value;
            var name = currentUser.FindFirst(ClaimTypes.Name)?.Value ?? currentUser.FindFirst("name")?.Value ?? ((firstName ?? string.Empty) + " " + (lastName ?? string.Empty)).Trim();

            // include client's cookie-guid so server can detect local data
            // Use the JS-safe method since this runs after authentication (not during prerender)
            var cookieGuid = await UserGuidService.GetOrCreateUserGuidWithJSAsync();

            var request = new
            {
                UserGuid = sub,
                Email = email,
                FirstName = firstName,
                LastName = lastName,
                DisplayName = name,
                Provider = "Google",
                CookieGuid = cookieGuid
            };

            var apiBase = GetApiBaseUrl();
            var url = $"{apiBase}/api/User/upsert";
            var client = FinPlan.Web.Services.HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var json = System.Text.Json.JsonSerializer.Serialize(request);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            Console.WriteLine($"Posting user upsert to {url} with payload: {json}");
            var resp = await client.PostAsync(url, content);
            var respBody = await resp.Content.ReadAsStringAsync();
            Console.WriteLine($"Upsert response: {resp.StatusCode}; body: {respBody}");

            if (resp.IsSuccessStatusCode)
            {
                // Cookie association functionality completely removed - just mark as created
                userRecordCreated = true;
            }
            else
            {
                try { Console.Error.WriteLine($"User upsert failed: {resp.StatusCode}; body: {respBody}"); } catch { }
            }
        }
        catch (Exception ex)
        {
            try { Console.Error.WriteLine($"EnsureUserRecordAsync exception: {ex.Message}"); } catch { }
        }
    }

    private void ToggleMobileMenu()
    {
        showMobileMenu = !showMobileMenu;
        StateHasChanged();
    }

    [JSInvokable]
    public void CloseMobileMenu()
    {
        showMobileMenu = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
