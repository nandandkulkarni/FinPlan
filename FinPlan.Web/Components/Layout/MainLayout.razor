@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <CascadingAuthenticationState>
            <NavMenu />
        </CascadingAuthenticationState>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <!-- Top ad banner reserved spot (responsive) -->
        <div class="ad-banner-placeholder" data-ad-type="banner" aria-hidden="true" title="Ad banner placeholder">
            <div class="ad-placeholder">Top banner ad</div>
        </div>

        <div class="content-rail d-flex">
            <article class="content px-4">
                @Body

                <!-- example in-content native ad placeholder (between sections) -->
                <div class="ad-inline-placeholder" data-ad-type="native" aria-hidden="true">In-content native ad</div>

            </article>

            <!-- Right rail for desktop ads; hidden on small screens -->
            <aside class="right-rail d-none d-lg-block">
                <div class="ad-sidebar-placeholder ad-placeholder" data-ad-type="sidebar" aria-hidden="true" title="Right rail ad">Right rail ad</div>
            </aside>
        </div>

        <!-- Mobile sticky bottom ad (hidden on large screens) -->
        <div class="mobile-sticky-ad d-lg-none" aria-hidden="true" data-ad-type="mobile-sticky">
            <div class="ad-placeholder small">Mobile sticky ad</div>
        </div>

    </main>
</div>

<!-- Consent banner -->
<div id="consent-banner" style="display:none; position:fixed; right:16px; bottom:16px; z-index:1050; max-width:420px;">
    <div class="card shadow">
        <div class="card-body">
            <h6 class="card-title">Cookies & Consent</h6>
            <p class="small">We use cookies to improve calculators and personalize ads. Manage consent:</p>
            <div class="d-flex align-items-center mb-2">
                <div class="form-check me-2">
                    <input class="form-check-input" type="checkbox" id="consent-analytics" />
                    <label class="form-check-label small" for="consent-analytics">Analytics</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="consent-ads" />
                    <label class="form-check-label small" for="consent-ads">Ads personalization</label>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-link btn-sm me-2" id="consent-decline">Decline all</button>
                <button class="btn btn-primary btn-sm" id="consent-accept">Save</button>
            </div>
        </div>
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="/js/adLoader.js"></script>
<script>
    // Consent logic: show banner if no consent cookie exists
    (function(){
        const consentKey = 'finplan_consent_v1';

        function showBanner() {
            const el = document.getElementById('consent-banner');
            if (!el) return;
            el.style.display = 'block';
            // initialise checkbox states from stored consent
            const existing = window.cookieHandlerExtension.GetConsentObject(consentKey);
            if (existing) {
                const a = document.getElementById('consent-analytics');
                const p = document.getElementById('consent-ads');
                if (a) a.checked = !!existing.analytics;
                if (p) p.checked = !!existing.personalizedAds;
            } else {
                const a = document.getElementById('consent-analytics');
                const p = document.getElementById('consent-ads');
                if (a) a.checked = true; // default analytics allowed
                if (p) p.checked = false; // default ads off
            }
        }

        function saveConsent() {
            const aEl = document.getElementById('consent-analytics');
            const pEl = document.getElementById('consent-ads');
            const obj = {
                analytics: !!(aEl && aEl.checked),
                personalizedAds: !!(pEl && pEl.checked),
                timestamp: new Date().toISOString()
            };
            window.cookieHandlerExtension.SetConsentObject(consentKey, obj, 365);
            window.cookieHandlerExtension.ApplyConsentToWindow(consentKey);
            const el = document.getElementById('consent-banner'); if (el) el.style.display = 'none';

            // Initialize ads now that consent stored
            if (window.adLoader && typeof window.adLoader.init === 'function') window.adLoader.init({ consentKey: consentKey });
        }

        function declineAll() {
            const obj = { analytics: false, personalizedAds: false, timestamp: new Date().toISOString() };
            window.cookieHandlerExtension.SetConsentObject(consentKey, obj, 365);
            window.cookieHandlerExtension.ApplyConsentToWindow(consentKey);
            const el = document.getElementById('consent-banner'); if (el) el.style.display = 'none';

            // Still init adLoader so non-personalized placeholders load
            if (window.adLoader && typeof window.adLoader.init === 'function') window.adLoader.init({ consentKey: consentKey });
        }

        // Wait for the layout DOM to be available (handles Blazor render replacing DOM)
        function initWhenReady() {
            let attempts = 0;
            const maxAttempts = 50; // ~5s
            const interval = setInterval(() => {
                attempts++;
                const banner = document.getElementById('consent-banner');
                const accept = document.getElementById('consent-accept');
                const decline = document.getElementById('consent-decline');
                if (banner && accept && decline) {
                    clearInterval(interval);

                    // Attach listeners (avoid duplicate attachments)
                    try {
                        if (accept && typeof accept.addEventListener === 'function') {
                            try { accept.removeEventListener('click', saveConsent); } catch(e) { /* ignore */ }
                            accept.addEventListener('click', saveConsent);
                        }
                        if (decline && typeof decline.addEventListener === 'function') {
                            try { decline.removeEventListener('click', declineAll); } catch(e) { /* ignore */ }
                            decline.addEventListener('click', declineAll);
                        }
                    } catch (handlerEx) { console.error('Consent handlers attach failed', handlerEx); }

                    // wire blazor error UI controls safely
                    try {
                        const reloadLink = document.querySelector('#blazor-error-ui .reload');
                        const dismissLink = document.querySelector('#blazor-error-ui .dismiss');
                        if (reloadLink && typeof reloadLink.addEventListener === 'function') {
                            reloadLink.removeEventListener('click', window.__fp_reload_handler__);
                            window.__fp_reload_handler__ = function(ev) { ev.preventDefault(); try { window.location.reload(); } catch(e) { console.error(e); } };
                            reloadLink.addEventListener('click', window.__fp_reload_handler__);
                        }
                        if (dismissLink && typeof dismissLink.addEventListener === 'function') {
                            dismissLink.removeEventListener('click', window.__fp_dismiss_handler__);
                            window.__fp_dismiss_handler__ = function(ev) { ev.preventDefault(); var ui = document.getElementById('blazor-error-ui'); if (ui) ui.style.display = 'none'; };
                            dismissLink.addEventListener('click', window.__fp_dismiss_handler__);
                        }
                    } catch (e) { console.error('blazor-error-ui handlers', e); }

                    // Apply stored consent to window flags
                    try { window.cookieHandlerExtension.ApplyConsentToWindow(consentKey); } catch(e) { console.error(e); }

                    const has = window.cookieHandlerExtension.GetConsentObject(consentKey);
                    if (!has) {
                        // slight delay so layout paint is visible and it doesn't flash due to re-render
                        setTimeout(() => showBanner(), 80);
                    } else {
                        // If consent already present, initialize ad loader immediately
                        if (window.adLoader && typeof window.adLoader.init === 'function') window.adLoader.init({ consentKey: consentKey });
                    }
                }

                if (attempts >= maxAttempts) {
                    clearInterval(interval);
                }
            }, 100);
        }

        // Start init after a short tick to allow Blazor to render
        setTimeout(initWhenReady, 50);

    })();
</script>

<!-- Global JS error capture to help troubleshooting -->
<script>
    (function(){
        if (!window.fpDebug) window.fpDebug = {};

        window.addEventListener('error', function (e) {
            try {
                console.error('Global error:', e.message, e.filename + ':' + e.lineno, e.error ? e.error.stack : null);
            } catch (ex) { /* ignore */ }
        });

        window.addEventListener('unhandledrejection', function (e) {
            try {
                console.error('Unhandled Promise rejection:', e.reason);
            } catch (ex) { /* ignore */ }
        });

        // helper to log from C# via JSRuntime
        window.fpDebug.log = function () {
            try { console.log.apply(console, arguments); } catch (e) { }
        };
        window.fpDebug.error = function () {
            try { console.error.apply(console, arguments); } catch (e) { }
        };
    })();
</script>
