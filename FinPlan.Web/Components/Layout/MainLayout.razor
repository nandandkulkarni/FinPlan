@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject FinPlan.Web.Services.UserGuidService UserGuidService

<style>
    /* Top strip: primary navigation shortcuts */
    .top-strip {
        background: #FFD600; /* yellow background */
        color: #222;
        border-bottom: 1px solid rgba(0,0,0,0.06);
        padding: 6px 0;
        box-shadow: 0 1px 2px rgba(0,0,0,0.03);
        z-index: 1030;
    }

    .top-strip .menu-container {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .top-strip .menu-link {
        color: #222;
        font-weight: 600;
        padding: 6px 10px;
        border-radius: 6px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    /* make links more legible on yellow background on hover */
    .top-strip .menu-link:hover {
        background: rgba(0,0,0,0.04);
        text-decoration: none;
    }

    .top-strip .menu-actions {
        margin-left: auto;
        display: flex;
        gap: 8px;
        align-items: center;
    }

    /* separator + auth box */
    .top-sep {
        width: 1px;
        height: 28px;
        background: rgba(0,0,0,0.08);
        margin-left: 12px;
        margin-right: 8px;
        align-self: center;
    }

    .auth-box {
        display: inline-flex;
        gap: 8px;
        align-items: center;
        padding-left: 6px;
    }

    .auth-name {
        font-weight: 600;
        color: #222;
        margin-right: 6px;
    }

    .auth-btn { min-width: 74px; }

@@media (max-width: 768px) {
    .top-strip .menu-container {
        gap: 8px;
    }

    .top-strip .menu-link {
        padding: 6px 8px;
        font-size: .92rem;
    }
}
</style>

<div class="top-strip"> 
    <div class="container menu-container">
        <NavLink class="menu-link" href="/wealth-journey"> <span class="bi bi-piggy-bank"></span> Wealth Building</NavLink>
        @* <NavLink class="menu-link d-none d-md-inline" href="/howmuch-to-save-per-month"> <span class="bi bi-piggy-bank"></span> Goal Savings</NavLink> *@
        <NavLink class="menu-link" href="/living-cost"> <span class="bi bi-list-ul"></span> Living Cost</NavLink>
        <NavLink class="menu-link" href="/retirement-fire"> <span class="bi bi-wallet2"></span> Retirement Drawdown</NavLink>


        <div class="menu-actions">
            <div class="top-sep" aria-hidden="true"></div>

            @if (isAuthLoaded)
            {
                if (isAuthenticated && currentUser != null)
                {
                    var first = currentUser.FindFirst("given_name")?.Value ?? string.Empty;
                    var last = currentUser.FindFirst("family_name")?.Value ?? string.Empty;
                    var display = (!string.IsNullOrWhiteSpace(first) || !string.IsNullOrWhiteSpace(last)) ? $"{first} {last}".Trim() : (currentUser.FindFirst("name")?.Value ?? currentUser.Identity?.Name ?? "User");
                    <div class="auth-box" role="region" aria-label="User account">
                        <span class="auth-name">@display</span>
                        <button class="btn btn-sm btn-outline-secondary auth-btn" @onclick="SignOutClicked" aria-label="Sign out">Sign out</button>
                    </div>
                }
                else
                {
                    <div class="auth-box" role="region" aria-label="Authentication">
                        <a class="btn btn-sm btn-primary auth-btn" href="/signin-google-challenge" aria-label="Sign in with Google">Sign in</a>
                        <a class="btn btn-sm btn-outline-secondary d-none d-md-inline auth-btn" href="/signin-google-challenge" aria-label="Sign up with Google">Sign up</a>
                    </div>
                }
            }
            else
            {
                <div class="auth-box" role="region" aria-label="Authentication">
                    <div class="spinner-border spinner-border-sm text-dark" role="status" aria-hidden="true"></div>
                </div>
            }
         </div>
     </div>
 </div>
   

@* Confirmation modal for cookie association *@
@if (showCookieAssocModal)
{
    <div class="modal-backdrop fade show" style="z-index:1040"></div>
    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Associate locally-stored data with your account</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="DeclineAssociate"></button>
                </div>
                <div class="modal-body">
                    <p>We detected saved calculator data on this browser (<strong>@pendingItemCount</strong> items) that is tied to this device's local identifier. If you confirm, this data will be associated with your account <strong>@pendingEmail</strong> so you'll be able to access it from other devices.</p>
                    <p><strong>What will happen if you accept</strong>:</p>
                    <ul>
                        <li>The locally-stored calculators and settings (saved on this device) will be linked to your account.</li>
                        <li>Future sign-ins from other devices using your account will be able to load this data.</li>
                        <li>No data will be deleted.</li>
                    </ul>
                    <p><strong>What will happen if you decline</strong>:</p>
                    <ul>
                        <li>The locally-stored data will remain only on this browser and will not be associated with your account.</li>
                        <li>You will be signed out now to prevent accidental association.</li>
                    </ul>
                    <p class="text-muted small">If you'd like to review or export the items before associating, use the Debug > Saved Data tools (development only).</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary btn-sm" @onclick="DeclineAssociate">No, sign me out</button>
                    <button class="btn btn-primary btn-sm" @onclick="ConfirmAssociate">Yes, associate my data</button>
                </div>
            </div>
        </div>
    </div>
}

<main>
    <div class="content-rail d-flex">
        <article class="content px-4">
            @Body
        </article>
    </div>
</main>

<!-- Consent banner -->
<div id="consent-banner" style="display:none; position:fixed; right:16px; bottom:16px; z-index:1050; max-width:420px;">
    <div class="card shadow">
        <div class="card-body">
            <h6 class="card-title">Cookies & Consent</h6>
            <p class="small">We use cookies to improve calculators and personalize ads. Manage consent:</p>
            <div class="d-flex align-items-center mb-2">
                <div class="form-check me-2">
                    <input class="form-check-input" type="checkbox" id="consent-analytics" />
                    <label class="form-check-label small" for="consent-analytics">Analytics</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="consent-ads" />
                    <label class="form-check-label small" for="consent-ads">Ads personalization</label>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-link btn-sm me-2" id="consent-decline">Decline all</button>
                <button class="btn btn-primary btn-sm" id="consent-accept">Save</button>
            </div>
        </div>
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="/js/adLoader.js"></script>
<script>
    // Consent logic: show banner if no consent cookie exists
    (function(){
        const consentKey = 'finplan_consent_v1';

        function showBanner() {
            const el = document.getElementById('consent-banner');
            if (!el) return;
            el.style.display = 'block';
            // initialise checkbox states from stored consent
            const existing = window.cookieHandlerExtension.GetConsentObject(consentKey);
            if (existing) {
                const a = document.getElementById('consent-analytics');
                const p = document.getElementById('consent-ads');
                if (a) a.checked = !!existing.analytics;
                if (p) p.checked = !!existing.personalizedAds;
            } else {
                const a = document.getElementById('consent-analytics');
                const p = document.getElementById('consent-ads');
                if (a) a.checked = true; // default analytics allowed
                if (p) p.checked = false; // default ads off
            }
        }

        function saveConsent() {
            const aEl = document.getElementById('consent-analytics');
            const pEl = document.getElementById('consent-ads');
            const obj = {
                analytics: !!(aEl && aEl.checked),
                personalizedAds: !!(pEl && pEl.checked),
                timestamp: new Date().toISOString()
            };
            window.cookieHandlerExtension.SetConsentObject(consentKey, obj, 365);
            window.cookieHandlerExtension.ApplyConsentToWindow(consentKey);
            const el = document.getElementById('consent-banner'); if (el) el.style.display = 'none';

            // Initialize ads now that consent stored
            if (window.adLoader && typeof window.adLoader.init === 'function') window.adLoader.init({ consentKey: consentKey });
        }

        function declineAll() {
            const obj = { analytics: false, personalizedAds: false, timestamp: new Date().toISOString() };
            window.cookieHandlerExtension.SetConsentObject(consentKey, obj, 365);
            window.cookieHandlerExtension.ApplyConsentToWindow(consentKey);
            const el = document.getElementById('consent-banner'); if (el) el.style.display = 'none';

            // Still init adLoader so non-personalized placeholders load
            if (window.adLoader && typeof window.adLoader.init === 'function') window.adLoader.init({ consentKey: consentKey });
        }

        // Wait for the layout DOM to be available (handles Blazor render replacing DOM)
        function initWhenReady() {
            let attempts = 0;
            const maxAttempts = 50; // ~5s
            const interval = setInterval(() => {
                attempts++;
                const banner = document.getElementById('consent-banner');
                const accept = document.getElementById('consent-accept');
                const decline = document.getElementById('consent-decline');
                if (banner && accept && decline) {
                    clearInterval(interval);

                    // Attach listeners (avoid duplicate attachments)
                    try {
                        if (accept && typeof accept.addEventListener === 'function') {
                            try { accept.removeEventListener('click', saveConsent); } catch(e) { /* ignore */ }
                            accept.addEventListener('click', saveConsent);
                        }
                        if (decline && typeof decline.addEventListener === 'function') {
                            try { decline.removeEventListener('click', declineAll); } catch(e) { /* ignore */ }
                            decline.addEventListener('click', declineAll);
                        }
                    } catch (handlerEx) { console.error('Consent handlers attach failed', handlerEx); }

                    // wire blazor error UI controls safely
                    try {
                        const reloadLink = document.querySelector('#blazor-error-ui .reload');
                        const dismissLink = document.querySelector('#blazor-error-ui .dismiss');
                        if (reloadLink && typeof reloadLink.addEventListener === 'function') {
                            reloadLink.removeEventListener('click', window.__fp_reload_handler__);
                            window.__fp_reload_handler__ = function(ev) { ev.preventDefault(); try { window.location.reload(); } catch(e) { console.error(e); } };
                            reloadLink.addEventListener('click', window.__fp_reload_handler__);
                        }
                        if (dismissLink && typeof dismissLink.addEventListener === 'function') {
                            dismissLink.removeEventListener('click', window.__fp_dismiss_handler__);
                            window.__fp_dismiss_handler__ = function(ev) { ev.preventDefault(); var ui = document.getElementById('blazor-error-ui'); if (ui) ui.style.display = 'none'; };
                            dismissLink.addEventListener('click', window.__fp_dismiss_handler__);
                        }
                    } catch (e) { console.error('blazor-error-ui handlers', e); }

                    // Apply stored consent to window flags
                    try { window.cookieHandlerExtension.ApplyConsentToWindow(consentKey); } catch(e) { console.error(e); }

                    const has = window.cookieHandlerExtension.GetConsentObject(consentKey);
                    if (!has) {
                        // slight delay so layout paint is visible and it doesn't flash due to re-render
                        setTimeout(() => showBanner(), 80);
                    } else {
                        // If consent already present, initialize ad loader immediately
                        if (window.adLoader && typeof window.adLoader.init === 'function') window.adLoader.init({ consentKey: consentKey });
                    }
                }

                if (attempts >= maxAttempts) {
                    clearInterval(interval);
                }
            }, 100);
        }

        // Start init after a short tick to allow Blazor to render
        setTimeout(initWhenReady, 50);

    })();
</script>

<!-- Global JS error capture to help troubleshooting -->
<script>
    (function(){
        if (!window.fpDebug) window.fpDebug = {};

        window.addEventListener('error', function (e) {
            try {
                console.error('Global error:', e.message, e.filename + ':' + e.lineno, e.error ? e.error.stack : null);
            } catch (ex) { /* ignore */ }
        });

        window.addEventListener('unhandledrejection', function (e) {
            try {
                console.error('Unhandled Promise rejection:', e.reason);
            } catch (ex) { /* ignore */ }
        });

        // helper to log from C# via JSRuntime
        window.fpDebug.log = function () {
            try { console.log.apply(console, arguments); } catch (e) { }
        };
        window.fpDebug.error = function () {
            try { console.error.apply(console, arguments); } catch (e) { }
        };
    })();
</script>

@code {
    private ClaimsPrincipal? currentUser;
    private bool isAuthenticated = false;
    private bool isAuthLoaded = false;
    private bool userRecordCreated = false;

    // modal state
    private bool showCookieAssocModal = false;
    private string? pendingCookieGuid;
    private int pendingItemCount = 0;
    private string? pendingEmail;

    private void SignOutClicked()
    {
        // Force full navigation so the server signout endpoint runs and cookies are cleared
        Navigation.NavigateTo("/signout", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAuthStateAsync();
    }

    private async Task LoadAuthStateAsync()
    {
        try
        {
            var state = await AuthStateProvider.GetAuthenticationStateAsync();
            currentUser = state.User;
            isAuthenticated = currentUser?.Identity?.IsAuthenticated ?? false;
        }
        catch
        {
            currentUser = null;
            isAuthenticated = false;
        }
        isAuthLoaded = true;

        // If signed in, ensure server has a user record
        if (isAuthenticated && currentUser != null && !userRecordCreated)
        {
            _ = EnsureUserRecordAsync(); // fire-and-forget but do not block UI
        }

        StateHasChanged();
    }

    private string GetApiBaseUrl()
    {
#if DEBUG
            return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

    private async Task EnsureUserRecordAsync()
    {
        if (currentUser == null) return;

        try
        {
            // Best stable identifier from claims: prefer 'sub', fallback to NameIdentifier or email
            var sub = currentUser.FindFirst("sub")?.Value ?? currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? currentUser.FindFirst("email")?.Value;
            if (string.IsNullOrWhiteSpace(sub)) return;

            var email = currentUser.FindFirst(ClaimTypes.Email)?.Value ?? currentUser.FindFirst("email")?.Value;
            var firstName = currentUser.FindFirst(ClaimTypes.GivenName)?.Value ?? currentUser.FindFirst("given_name")?.Value;
            var lastName = currentUser.FindFirst(ClaimTypes.Surname)?.Value ?? currentUser.FindFirst("family_name")?.Value;
            var name = currentUser.FindFirst(ClaimTypes.Name)?.Value ?? currentUser.FindFirst("name")?.Value ?? ((firstName ?? string.Empty) + " " + (lastName ?? string.Empty)).Trim();

            // include client's cookie-guid so server can detect local data
            var cookieGuid = await UserGuidService.GetOrCreateUserGuidAsync();

            var request = new
            {
                UserGuid = sub,
                Email = email,
                FirstName = firstName,
                LastName = lastName,
                DisplayName = name,
                Provider = "Google",
                CookieGuid = cookieGuid
            };

            var apiBase = GetApiBaseUrl();
            var url = $"{apiBase}/api/User/upsert";
            var client = FinPlan.Web.Services.HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var json = System.Text.Json.JsonSerializer.Serialize(request);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            Console.WriteLine($"Posting user upsert to {url} with payload: {json}");
            var resp = await client.PostAsync(url, content);
            var respBody = await resp.Content.ReadAsStringAsync();
            Console.WriteLine($"Upsert response: {resp.StatusCode}; body: {respBody}");

            if (resp.IsSuccessStatusCode)
            {
                try
                {
                    using var doc = System.Text.Json.JsonDocument.Parse(respBody);
                    var root = doc.RootElement;
                    if (root.TryGetProperty("needsCookieAssociation", out var needProp) && needProp.GetBoolean())
                    {
                        pendingCookieGuid = root.GetProperty("cookieGuid").GetString();
                        pendingItemCount = root.GetProperty("itemCount").GetInt32();
                        pendingEmail = email;
                        showCookieAssocModal = true;
                        StateHasChanged();
                        return;
                    }
                    else
                    {
                        userRecordCreated = true;
                    }
                }
                catch
                {
                    userRecordCreated = true;
                }
            }
            else
            {
                try { Console.Error.WriteLine($"User upsert failed: {resp.StatusCode}; body: {respBody}"); } catch { }
            }
        }
        catch (Exception ex)
        {
            try { Console.Error.WriteLine($"EnsureUserRecordAsync exception: {ex.Message}"); } catch { }
        }
    }

    private async Task ConfirmAssociate()
    {
        showCookieAssocModal = false;
        StateHasChanged();

        if (string.IsNullOrWhiteSpace(pendingEmail) || string.IsNullOrWhiteSpace(pendingCookieGuid))
        {
            // nothing to do
            return;
        }

        try
        {
            var apiBase = GetApiBaseUrl();
            var url = $"{apiBase}/api/User/associate-cookie";
            var client = FinPlan.Web.Services.HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var req = new { UserEmail = pendingEmail, CookieGuid = pendingCookieGuid };
            var json = System.Text.Json.JsonSerializer.Serialize(req);
            var resp = await client.PostAsync(url, new StringContent(json, System.Text.Encoding.UTF8, "application/json"));
            var body = await resp.Content.ReadAsStringAsync();
            Console.WriteLine($"AssociateCookie response: {resp.StatusCode}; body: {body}");

            // Re-run upsert so server can proceed now that registration exists
            await EnsureUserRecordAsync();
        }
        catch (Exception ex)
        {
            try { Console.Error.WriteLine($"ConfirmAssociate exception: {ex.Message}"); } catch { }
        }
    }

    private void DeclineAssociate()
    {
        showCookieAssocModal = false;
        StateHasChanged();
        // if user declines, sign them out
        Navigation.NavigateTo("/signout", forceLoad: true);
    }

    public void Dispose()
    {
    }
}