@page "/living-cost"
@using FinPlan.Web.Components.Models
@using Microsoft.AspNetCore.Components.Forms

<h3>Cost Breakdown</h3>

<p>Enter your current breakdown of costs. Use categories and subcategories (standard defaults provided). Four columns: Heading, Current Value, Retirement Adjust, Retirement Value.</p>

<EditForm Model="this">
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Heading</th>
                <th>Current Value</th>
                <th>Retirement Adjust</th>
                <th>Retirement Value</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                var groups = Items.GroupBy(i => i.Category ?? string.Empty);
            }

            @foreach (var group in groups)
            {
                var groupKey = group.Key ?? string.Empty;
                <tr class="table-active">
                    <td colspan="5">
                        <div class="d-flex align-items-center">
                            <input class="form-control form-control-sm fw-bold" value="@groupKey" @onchange="(ChangeEventArgs e) => UpdateGroupCategory(groupKey, e.Value?.ToString() ?? string.Empty)" />
                        </div>
                    </td>
                </tr>

                @foreach (var item in group)
                {
                    var idx = Items.IndexOf(item);
                    <tr>
                        <td>
                            <div>
                                <input class="form-control form-control-sm" @bind="item.Subcategory" placeholder="Subcategory" />
                            </div>
                        </td>
                        <td style="width:140px;">
                            <InputNumber class="form-control form-control-sm" @bind-Value="item.CurrentValue" />
                        </td>
                        <td style="width:220px;">
                            <select class="form-select form-select-sm" @bind="item.AdjustOption">
                                @foreach (var opt in Enum.GetValues(typeof(RetirementAdjustOption)))
                                {
                                    <option value="@opt">@opt</option>
                                }
                            </select>
                            @if (item.AdjustOption == RetirementAdjustOption.CustomPercentage)
                            {
                                <div class="input-group input-group-sm mt-1">
                                    <input class="form-control" type="number" step="1" min="0" @bind="item.CustomPercentage" />
                                    <span class="input-group-text">%</span>
                                </div>
                            }
                            @if (item.AdjustOption == RetirementAdjustOption.AdjustForInflation)
                            {
                                <div class="input-group input-group-sm mt-1">
                                    <input class="form-control" type="number" step="0.1" min="0" @bind="item.PerItemInflationPercent" placeholder="Inflation % (optional)" />
                                    <span class="input-group-text">% (optional)</span>
                                </div>
                            }
                            <div class="form-check form-check-sm mt-1">
                                <input class="form-check-input" type="checkbox" @bind="item.IncludeInRetirement" id="inc_@idx" />
                                <label class="form-check-label" for="inc_@idx">Include in retirement</label>
                            </div>
                        </td>
                        <td style="width:180px; vertical-align:middle;">
                            <div class="fw-bold">@FormatCurrency(item.GetRetirementValue(YearsToRetirement, InflationRate))</div>
                        </td>
                        <td style="width:80px;">
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(idx)">Remove</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div class="mb-2">
        <button class="btn btn-sm btn-primary me-2" @onclick="AddRow">Add Row</button>
        <button class="btn btn-sm btn-secondary" @onclick="ResetToDefaults">Load Standard Defaults</button>
    </div>

    <div class="row g-2 align-items-center">
        <div class="col-auto">
            <label class="form-label">Years to retirement</label>
            <InputNumber class="form-control form-control-sm" @bind-Value="YearsToRetirement" />
        </div>
        <div class="col-auto">
            <label class="form-label">Inflation rate (%)</label>
            <InputNumber class="form-control form-control-sm" @bind-Value="InflationRate" />
        </div>
        <div class="col-auto">
            <label class="form-label">Total current monthly</label>
            <div class="fw-bold">@FormatCurrency(TotalCurrent)</div>
        </div>
        <div class="col-auto">
            <label class="form-label">Total retirement monthly</label>
            <div class="fw-bold text-primary">@FormatCurrency(TotalRetirement)</div>
        </div>
    </div>
</EditForm>

@code {
    private List<CostItem> Items { get; set; } = StandardCostCategories.GetDefaults();

    private int YearsToRetirement { get; set; } = 20;
    private decimal InflationRate { get; set; } = 2.5m;

    private void AddRow()
    {
        Items.Add(new CostItem { Category = "", Subcategory = "", CurrentValue = 0m });
    }

    private void RemoveItem(int index)
    {
        if (index >= 0 && index < Items.Count)
        {
            Items.RemoveAt(index);
        }
    }

    private void ResetToDefaults()
    {
        Items = StandardCostCategories.GetDefaults();
    }

    private void UpdateGroupCategory(string oldCategory, string newCategory)
    {
        if (oldCategory == newCategory) return;

        foreach (var it in Items.Where(i => (i.Category ?? string.Empty) == (oldCategory ?? string.Empty)))
        {
            it.Category = newCategory;
        }
    }

    private decimal TotalCurrent => Math.Round(Items.Sum(i => i.CurrentValue), 2);

    private decimal TotalRetirement => Math.Round(Items.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate)), 2);

    private static string FormatCurrency(decimal value)
    {
        return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C0}", value);
    }
}
