@page "/living-cost"
@using FinPlan.Shared.Models.LivingCosts
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject FinPlan.Web.Services.UserGuidService UserGuidService
<style>
    /* softer danger button (light tint + muted text) */
    .btn-soft-danger {
        background-color: rgba(220, 53, 69, 0.08);
        color: #b02a37;
        border: 1px solid rgba(176, 42, 55, 0.10);
        padding: 0.18rem 0.36rem;
    }

        .btn-soft-danger:hover,
        .btn-soft-danger:focus {
            background-color: rgba(220, 53, 69, 0.12);
            color: #8a1f2a;
            text-decoration: none;
        }

    /* completely subtle text-only control */
    .btn-subtle {
        background: transparent;
        border: none;
        color: rgba(176, 42, 55, 0.85);
        padding: 0.12rem 0.25rem;
        opacity: 0.9;
    }

        .btn-subtle:hover,
        .btn-subtle:focus {
            opacity: 1;
            color: #b02a37;
            text-decoration: none;
        }

    /* small icon sizing / subtle opacity */
    .icon-muted {
        font-size: 0.95rem;
        opacity: 0.85;
    }
</style>
<h3>Cost Breakdown</h3>

<p>Enter your current breakdown of costs. Use categories and subcategories (standard defaults provided). Four columns: Heading, Current Value, Retirement Adjust, Retirement Value.</p>

<EditForm Model="this">
    @* <div class="me-3">
                <label class="form-label small mb-1">Add to category</label>
                <select class="form-select form-select-sm" @bind="SelectedAddCategory">
                    @foreach (var cat in Categories)
                    {
                        <option value="@cat">@cat</option>
                    }
                    <option value="@NewCategorySentinel">+ New category...</option>
                </select>
            </div> *@

    @* @if (SelectedAddCategory == NewCategorySentinel)
            {
                <div class="me-3">
                    <label class="form-label small mb-1">New category name</label>
                    <input class="form-control form-control-sm" @bind="NewCategoryName" placeholder="Category name" />
                </div>
            }

            <div>
                <label class="form-label small mb-1">&nbsp;</label>
                <div>
                    <button class="btn btn-sm btn-primary me-2" @onclick="AddRow">Add Row</button>
                    <button class="btn btn-sm btn-secondary" @onclick="ResetToDefaults">Load Standard Defaults</button>
                </div>
            </div> *@
    @* </div> *@

    <div class="text-start">
        <label class="mb-1 small">Years to retirement / Inflation</label>
        <div class="d-flex mb-1">
            <InputNumber class="form-control form-control-sm me-2" style="width:80px;" @bind-Value="YearsToRetirement" />
            <InputNumber class="form-control form-control-sm" style="width:90px;" @bind-Value="InflationRate" />
        </div>
        @* <div>
        <button class="btn btn-sm btn-outline-secondary" @onclick="LoadFromApi">Load Standard</button>
    </div> *@
    </div>
    @* </div> *@

    <table class="table table-sm">
        <thead>
            <tr>
                <th style="width:40px;"></th>
                <th>Heading</th>
                <th style="width:140px;">Current Value</th>
                <th>Retirement Adjust</th>
                <th style="width:160px;">Inflation</th>
                <th style="width:60px;">Incl.</th>
                <th style="width:180px;">Retirement Value</th>
                <th></th>
            </tr>
            <tr class="table-secondary">
                <td></td>
                <td></td>
                <td style="vertical-align:middle;" class="fw-bold">@FormatCurrency(TotalCurrent)</td>
                <td></td>
                <td></td>
                <td></td>
                <td style="vertical-align:middle;" class="fw-bold text-primary">@FormatCurrency(TotalRetirement)</td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @{
                var groups = Items.GroupBy(i => i.Category ?? string.Empty).OrderBy(g => g.Key ?? string.Empty);
            }

            @foreach (var group in groups)
            {
                var groupKey = group.Key ?? string.Empty;
                var groupCurrentTotal = group.Sum(i => i.CurrentValue);
                var groupRetirementTotal = group.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate));

                <tr class="table-active">
                    <td style="width:40px; vertical-align:middle;">
                        <!-- soft trash: less aggressive than btn-danger -->
                        <button class="btn btn-sm btn-soft-danger" title="Remove category" aria-label="Remove category" @onclick="() => RemoveCategory(groupKey)">
                            <span class="bi bi-trash-fill icon-muted" aria-hidden="true"></span>
                        </button>

                        @* <button class="btn btn-sm btn-danger" title="Remove category" aria-label="Remove category" @onclick="() => RemoveCategory(groupKey)">ðŸ—‘</button> *@
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <button class="btn btn-link btn-sm me-2 p-0" @onclick="() => ToggleCollapse(groupKey)">
                                @(IsCollapsed(groupKey) ? "â–¶" : "â–¼")
                            </button>
                            <button class="btn btn-success btn-sm me-2 p-0" title="Add item" @onclick="() => AddItemToCategory(groupKey)">
                                +
                            </button>
                            <input class="form-control form-control-sm fw-bold" value="@groupKey" @onchange="(ChangeEventArgs e) => UpdateGroupCategory(groupKey, e.Value?.ToString() ?? string.Empty)" />
                        </div>
                    </td>
                    <td style="width:140px; vertical-align:middle;">
                        <div class="fw-bold">@FormatCurrency(groupCurrentTotal)</div>
                    </td>
                    <td></td>
                    <td style="width:160px;"></td>
                    <td style="width:60px; vertical-align:middle; text-align:center;">
                        <div class="small">@group.Count(i => i.IncludeInRetirement)</div>
                    </td>
                    <td style="width:180px; vertical-align:middle;">
                        <div class="fw-bold text-primary">@FormatCurrency(groupRetirementTotal)</div>
                    </td>
                    <td></td>
                </tr>

                @if (!IsCollapsed(groupKey))
                {
                    var sortedItems = group.OrderBy(i => i.Subcategory ?? string.Empty);
                    @foreach (var item in sortedItems)
                    {
                        var idx = Items.IndexOf(item);
                        <tr>
                            <td style="width:40px; vertical-align:middle;">
                                <!-- subtle minus button: text-only and muted -->
                                <button class="btn btn-sm btn-subtle" title="Remove item" aria-label="Remove item" @onclick="() => RemoveItem(idx)">
                                    <span class="icon-muted">âˆ’</span>
                                </button>
@*                                 <button class="btn btn-sm btn-danger" title="Remove item" aria-label="Remove item" @onclick="() => RemoveItem(idx)">âˆ’</button>
 *@                            </td>
                            <td>
                                <div>
                                    <input class="form-control form-control-sm" @bind="item.Subcategory" placeholder="Subcategory" @onblur="ScheduleAutosave" />
                                </div>
                            </td>
                            <td style="width:140px;">
                                <InputNumber class="form-control form-control-sm" @bind-Value="item.CurrentValue" @onblur="ScheduleAutosave" />
                            </td>
                            <td style="width:220px;">
                                <select class="form-select form-select-sm" @bind="item.AdjustOption" @onblur="ScheduleAutosave">
                                    @foreach (var opt in Enum.GetValues(typeof(RetirementAdjustOption)))
                                    {
                                        if (opt.ToString() == "Remove") continue; // hide Remove from UI
                                                                                  <option value="@opt">@opt</option>
                                    }
                                </select>
                                @if (item.AdjustOption == RetirementAdjustOption.CustomPercentage)
                                {
                                    <div class="input-group input-group-sm mt-1">
                                        <input class="form-control" type="number" step="1" min="0" @bind="item.CustomPercentage" @onblur="ScheduleAutosave" />
                                        <span class="input-group-text">%</span>
                                    </div>
                                }
                                @if (item.AdjustOption == RetirementAdjustOption.Manual)
                                {
                                    <div class="input-group input-group-sm mt-1" style="width:180px;">
                                        <input class="form-control text-success" type="number" step="0.01" min="0" @bind="item.ManualRetirementValue" />
                                        <span class="input-group-text">@System.Globalization.CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol</span>
                                    </div>
                                }
                            </td>
                            <td style="width:160px; vertical-align:middle;">
                                @if (item.AdjustOption == RetirementAdjustOption.AdjustForInflation)
                                {
                                    <div class="d-flex gap-2 align-items-center">
                                        <select class="form-select form-select-sm" style="width:170px;" @bind="item.PerItemInflationSource" @onblur="ScheduleAutosave">
                                            <option value="@InflationSource.UseGlobal">Global (@FormatDecimal(InflationRate)%)</option>
                                            <option value="@InflationSource.Custom">Custom</option>
                                        </select>
                                        @if (item.PerItemInflationSource == InflationSource.Custom)
                                        {
                                            <div class="input-group input-group-sm" style="width:120px;">
                                                <input class="form-control text-danger" type="number" step="0.1" min="0" @bind="item.PerItemInflationPercent" @onblur="ScheduleAutosave" />
                                                <span class="input-group-text">%</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </td>
                            <td style="width:60px; vertical-align:middle; text-align:center;">
                                <input class="form-check-input" type="checkbox" @bind="item.IncludeInRetirement" id="inc_@idx" @oninput="ScheduleAutosave" />
                            </td>
                            <td style="width:180px; vertical-align:middle;">
                                <div class="fw-bold">@FormatCurrency(item.GetRetirementValue(YearsToRetirement, InflationRate))</div>
                            </td>

                        </tr>
                    }
                }
            }
        </tbody>
    </table>

    @* <div class="mb-2 d-flex align-items-center g-2">
        <div class="me-2">
            <label class="form-label small mb-1">Add to category</label>
            <select class="form-select form-select-sm" @bind="SelectedAddCategory">
                @foreach (var cat in Categories)
                {
                    <option value="@cat">@cat</option>
                }
                <option value="@NewCategorySentinel">+ New category...</option>
            </select>
        </div>

        @if (SelectedAddCategory == NewCategorySentinel)
        {
            <div class="me-2">
                <label class="form-label small mb-1">New category name</label>
                <input class="form-control form-control-sm" @bind="NewCategoryName" placeholder="Category name" />
            </div>
        }

        <div class="me-2">
            <label class="form-label small mb-1">&nbsp;</label>
            <div>
                <button class="btn btn-sm btn-primary me-2" @onclick="AddRow">Add Row</button>
                <button class="btn btn-sm btn-secondary" @onclick="ResetToDefaults">Load Standard Defaults</button>
            </div>
        </div>
    </div> *@

    @* <div class="row g-2 align-items-center">
        <div class="col-auto">
            <label class="form-label">Years to retirement</label>
            <InputNumber class="form-control form-control-sm" @bind-Value="YearsToRetirement" />
        </div>
        <div class="col-auto">
            <label class="form-label">Inflation rate (%)</label>
            <InputNumber class="form-control form-control-sm" @bind-Value="InflationRate" />
        </div>
        </div> 
    *@
</EditForm>

@code {
    private List<CostItem> Items { get; set; } = new List<CostItem>(); // = StandardCostCategories.GetDefaults();

    private int YearsToRetirement { get; set; } = 20;
    private decimal InflationRate { get; set; } = 2.5m;

    private void AddRow()
    {
        var category = SelectedAddCategory == NewCategorySentinel ? (string.IsNullOrWhiteSpace(NewCategoryName) ? "Uncategorized" : NewCategoryName) : SelectedAddCategory;

        var newItem = new CostItem { Category = category, Subcategory = "", CurrentValue = 0m };
        Items.Add(newItem);

        // if we added a new category, refresh categories list and select it
        if (SelectedAddCategory == NewCategorySentinel && !string.IsNullOrWhiteSpace(NewCategoryName))
        {
            RefreshCategories();
            SelectedAddCategory = NewCategoryName;
            NewCategoryName = string.Empty;
        }
    }

    private void RemoveItem(int index)
    {
        if (index >= 0 && index < Items.Count)
        {
            Items.RemoveAt(index);
            ScheduleAutosave();
        }
    }

    private void RemoveCategory(string category)
    {
        if (string.IsNullOrEmpty(category)) return;
        Items.RemoveAll(i => (i.Category ?? string.Empty) == category);
        ScheduleAutosave();
    }

    private void ResetToDefaults()
    {
        Items = StandardCostCategories.GetDefaults();
    }

    private string NewCategorySentinel { get; } = "__new__";
    private List<string> Categories => Items.Select(i => i.Category ?? string.Empty).Distinct().OrderBy(c => c).ToList();
    private string SelectedAddCategory { get; set; }
    private string NewCategoryName { get; set; } = string.Empty;

    private void RefreshCategories()
    {
        // no-op; Categories getter reads from Items so UI will update
        InvokeAsync(StateHasChanged);
    }

    private string userGuid = Guid.NewGuid().ToString();
    private string calculatorType = "CostBreakdown";

    private string GetApiBaseUrl()
    {
        // follow existing pattern: try configuration then fallback to hardcoded localhost
        var baseUrl = Configuration["ApiBaseUrl"];
        if (!string.IsNullOrWhiteSpace(baseUrl)) return baseUrl.TrimEnd('/');
        return "https://localhost:7330";
    }

    private System.Timers.Timer? autosaveTimer;
    private readonly object autosaveLock = new object();
    private int autosaveDelayMs = 800; // debounce

    private void ScheduleAutosave()
    {
        lock (autosaveLock)
        {
            if (autosaveTimer == null)
            {
                autosaveTimer = new System.Timers.Timer(autosaveDelayMs);
                autosaveTimer.AutoReset = false;
                autosaveTimer.Elapsed += async (_, __) =>
                {
                    try
                    {
                        await InvokeAsync(async () => await SaveToApi());
                    }
                    catch { }
                };
            }
            else
            {
                autosaveTimer.Stop();
                autosaveTimer.Interval = autosaveDelayMs;
            }

            autosaveTimer.Start();
        }
    }

    public void Dispose()
    {
        if (autosaveTimer != null)
        {
            autosaveTimer.Dispose();
            autosaveTimer = null;
        }
    }

    private async Task SaveToApi()
    {
        var apiBaseUrl = GetApiBaseUrl();
        var url = $"{apiBaseUrl}/api/CostOfLiving/save";

        try
        {
            var dto = new PersistCostOfLivingRequest
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = new CostBreakdownData
                {
                    Items = Items.Select(i => new CostItem
                    {
                        Category = i.Category,
                        Subcategory = i.Subcategory,
                        CurrentValue = i.CurrentValue,
                        AdjustOption = (RetirementAdjustOption)i.AdjustOption,
                        PerItemInflationPercent = i.PerItemInflationPercent,
                        PerItemInflationSource = i.PerItemInflationSource == InflationSource.Custom ? InflationSource.Custom : InflationSource.UseGlobal,
                        CustomPercentage = i.CustomPercentage,
                        ManualRetirementValue = i.ManualRetirementValue,
                        IncludeInRetirement = i.IncludeInRetirement
                    }).ToList(),
                    CollapsedCategories = collapsed.ToList(),
                    YearsToRetirement = YearsToRetirement,
                    InflationRate = InflationRate
                }
            };

            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Saved cost breakdown");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Save failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving: {ex.Message}");
        }
    }

    private async Task LoadFromApi()
    {
        var apiBaseUrl = GetApiBaseUrl();
        var url = $"{apiBaseUrl}/api/CostOfLiving/load?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calculatorType)}";

        try
        {
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                try
                {
                    var data = System.Text.Json.JsonSerializer.Deserialize<CostBreakdownData>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (data != null)
                    {
                        Items = data.Items ?? new List<CostItem>();
                        // Items = data.Items.Select(d => new CostItem
                        // {
                        //     Category = d.Category,
                        //     Subcategory = d.Subcategory,
                        //     CurrentValue = d.CurrentValue,
                        //     AdjustOption = (RetirementAdjustOption) d.AdjustOption,
                        //     PerItemInflationPercent = d.PerItemInflationPercent,
                        //     PerItemInflationSource = (d.PerItemInflationSource == InflationSource.Custom) ? InflationSource.Custom : InflationSource.UseGlobal,
                        //     CustomPercentage = d.CustomPercentage,
                        //     ManualRetirementValue = d.ManualRetirementValue,
                        //     IncludeInRetirement = d.IncludeInRetirement
                        // }).ToList();

                        // collapsed = new HashSet<string>(data.CollapsedCategories ?? new List<string>());
                        // YearsToRetirement = data.YearsToRetirement;
                        // InflationRate = data.InflationRate;
                        StateHasChanged();
                        return;
                    }
                }
                catch { }

                // Fallback: try deserialize into raw list of items
                var loaded = System.Text.Json.JsonSerializer.Deserialize<List<CostItem>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (loaded != null)
                {
                    Items = loaded;
                    StateHasChanged();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // no saved data, load defaults
                Items = StandardCostCategories.GetDefaults();
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Load failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading: {ex.Message}");
        }
    }

    private void UpdateGroupCategory(string oldCategory, string newCategory)
    {
        if (oldCategory == newCategory) return;

        foreach (var it in Items.Where(i => (i.Category ?? string.Empty) == (oldCategory ?? string.Empty)))
        {
            it.Category = newCategory;
        }
    }

    private HashSet<string> collapsed = new HashSet<string>();

    private void AddItemToCategory(string category)
    {
        var cat = category ?? string.Empty;
        var newItem = new CostItem
        {
            Category = cat,
            Subcategory = "<new item - edit me>",
            CurrentValue = 0m,
            AdjustOption = RetirementAdjustOption.Same,
            IncludeInRetirement = true
        };

        // insert at end of that category's block (just add; rendering sorts by Subcategory)
        Items.Add(newItem);
        StateHasChanged();
        ScheduleAutosave();
    }

    private void ToggleCollapse(string category)
    {
        var key = category ?? string.Empty;
        if (collapsed.Contains(key)) collapsed.Remove(key);
        else collapsed.Add(key);
    }

    private bool IsCollapsed(string category)
    {
        return collapsed.Contains(category ?? string.Empty);
    }

    private decimal TotalCurrent => Math.Round(Items.Sum(i => i.CurrentValue), 2);

    private decimal TotalRetirement => Math.Round(Items.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate)), 2);

    private static string FormatCurrency(decimal value)
    {
        return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C0}", value);
    }

    private string FormatDecimal(decimal value)
    {
        return value.ToString("0.0", System.Globalization.CultureInfo.CurrentCulture);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SelectedAddCategory = Categories.FirstOrDefault() ?? NewCategorySentinel;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            }
            catch { }

            await LoadFromApi();
            StateHasChanged();
        }
    }
}
