@page "/tabs"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations

<PageTitle>Blazor Tabs Example</PageTitle>

<div class="container mt-4">
    <h2>Data Management Tabs</h2>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <button class="nav-link @(activeTab == "user" ? "active" : "")"
                    @onclick="UserTabClick">
                User Profile
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(activeTab == "product" ? "active" : "")"
                    @onclick="ProductTabClick">
                Product Info
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content">
        @if (activeTab == "user")
        {
            <div class="tab-pane fade show active">
                <div class="card">
                    <div class="card-header">
                        <h4>User Profile Management</h4>
                    </div>
                    <div class="card-body">
                        <EditForm Model="userProfile" OnValidSubmit="SaveUserProfile">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">First Name1:</label>
                                <InputText @bind-Value="userProfile.FirstName" class="form-control" />
                                <ValidationMessage For="() => userProfile.FirstName" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Last Name:</label>
                                <InputText @bind-Value="userProfile.LastName" class="form-control" />
                                <ValidationMessage For="() => userProfile.LastName" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Email:</label>
                                <InputText @bind-Value="userProfile.Email" class="form-control" type="email" />
                                <ValidationMessage For="() => userProfile.Email" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Age:</label>
                                <InputNumber @bind-Value="userProfile.Age" class="form-control" />
                                <ValidationMessage For="() => userProfile.Age" />
                            </div>

                            <button type="submit" class="btn btn-primary me-2">Save User</button>
                            <button type="button" class="btn btn-secondary" @onclick="ClearUserProfile">Clear</button>
                        </EditForm>

                        @if (!string.IsNullOrEmpty(userMessage))
                        {
                            <div class="alert alert-success mt-3">@userMessage</div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (activeTab == "product")
        {
            <div class="tab-pane fade show active">
                <div class="card">
                    <div class="card-header">
                        <h4>Product Information</h4>
                    </div>
                    <div class="card-body">
                        <EditForm Model="productInfo" OnValidSubmit="SaveProductInfo">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Product Name1:</label>
                                <InputText @bind-Value="productInfo.Name" class="form-control" />
                                <ValidationMessage For="() => productInfo.Name" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Description1:</label>
                                <InputTextArea @bind-Value="productInfo.Description" class="form-control" rows="3" />
                                <ValidationMessage For="() => productInfo.Description" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Price:</label>
                                <InputNumber @bind-Value="productInfo.Price" class="form-control" step="0.01" />
                                <ValidationMessage For="() => productInfo.Price" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Category:</label>
                                <InputSelect @bind-Value="productInfo.Category" class="form-select">
                                    <option value="">Select Category</option>
                                    <option value="Electronics">Electronics</option>
                                    <option value="Clothing">Clothing</option>
                                    <option value="Books">Books</option>
                                    <option value="Home">Home & Garden</option>
                                    <option value="Sports">Sports</option>
                                </InputSelect>
                                <ValidationMessage For="() => productInfo.Category" />
                            </div>

                            <div class="mb-3 form-check">
                                <InputCheckbox @bind-Value="productInfo.InStock" class="form-check-input" id="inStock" />
                                <label class="form-check-label" for="inStock">In Stock</label>
                            </div>

                            <button type="submit" class="btn btn-primary me-2">Save Product</button>
                            <button type="button" class="btn btn-secondary" @onclick="ClearProductInfo">Clear</button>
                        </EditForm>

                        @if (!string.IsNullOrEmpty(productMessage))
                        {
                            <div class="alert alert-success mt-3">@productMessage</div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string activeTab = "user";
    private string userMessage = string.Empty;
    private string productMessage = string.Empty;

    
    private void UserTabClick()
    {
        Console.WriteLine("User tab clicked");
        SetActiveTab("user");
    }

    private void ProductTabClick()
    {
        Console.WriteLine("Product tab clicked");
        SetActiveTab("product");
    }

    // User Profile Class
    public class UserProfile
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name must be less than 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name must be less than 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Range(1, 120, ErrorMessage = "Age must be between 1 and 120")]
        public int Age { get; set; }
    }

    // Product Information Class
    public class ProductInfo
    {
        [Required(ErrorMessage = "Product name is required")]
        [StringLength(100, ErrorMessage = "Product name must be less than 100 characters")]
        public string Name { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "Description must be less than 500 characters")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Price is required")]
        [Range(0.01, 10000.00, ErrorMessage = "Price must be between $0.01 and $10,000.00")]
        public decimal Price { get; set; }

        [Required(ErrorMessage = "Category is required")]
        public string Category { get; set; } = string.Empty;

        public bool InStock { get; set; } = true;
    }

    // Class instances - these persist their data
    private UserProfile userProfile = new UserProfile();
    private ProductInfo productInfo = new ProductInfo();

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        // Clear messages when switching tabs
        userMessage = string.Empty;
        productMessage = string.Empty;
    }

    private void SaveUserProfile()
    {
        userMessage = $"User profile saved: {userProfile.FirstName} {userProfile.LastName} ({userProfile.Email})";
    }

    private void SaveProductInfo()
    {
        productMessage = $"Product saved: {productInfo.Name} - ${productInfo.Price:F2}";
    }

    private void ClearUserProfile()
    {
        userProfile = new UserProfile();
        userMessage = "User profile cleared";
    }

    private void ClearProductInfo()
    {
        productInfo = new ProductInfo();
        productMessage = "Product info cleared";
    }
}