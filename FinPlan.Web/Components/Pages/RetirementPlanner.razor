@page "/retirement-fire"
@using System.ComponentModel.DataAnnotations
@using FinPlan.Shared.Models
@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Models.Spending
@using FinPlan.Shared.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.Routing
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.JSInterop
@using System.IO
@using ClosedXML.Excel
@using FinPlan.Web.Services
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using FinPlan.Shared
@using FinPlan.Shared.Enums
@using FinPlan.Shared.Models
@using FinPlan.Shared.Services
@using FinPlan.Web
@using FinPlan.Web.Components
@using FinPlan.Web.Models
@using FinPlan.Web.Services
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@implements IDisposable
@inject FinPlan.Web.Services.DebugMessageService DebugService
@inject FinPlan.Web.Services.UserGuidService UserGuidService


<PageTitle>Retirement Spending Planner</PageTitle>

<style>
    .tab-active-custom {
        background-color: #FFD600 !important; /* Bright yellow */
        color: #222 !important; /* Black text */
        font-weight: 600;
        border: 1px solid #FFD600 !important;
        border-bottom: none !important;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s, color 0.2s;
    }
    /* Dark theme styles */
    .dark-theme {
        background-color: #121212;
        color: #E2E8F0;
    }

        .dark-theme .card {
            background-color: #1E1E1E;
            border-color: #333;
        }

        .dark-theme .card-header {
            background-color: #252525 !important;
            border-bottom-color: #333;
            color: #E2E8F0 !important;
        }

        .dark-theme .form-control {
            background-color: #252525;
            border-color: #333;
            color: #E2E8F0;
        }

            .dark-theme .form-control:focus {
                background-color: #2D2D2D;
                box-shadow: 0 0 0 0.25rem rgba(109, 93, 252, 0.25);
            }

        .dark-theme .btn-primary {
            background-color: #6D5DFC;
            border-color: #6D5DFC;
        }

            .dark-theme .btn-primary:hover {
                background-color: #5A4AE3;
                border-color: #5A4AE3;
            }

        .dark-theme .text-primary {
            color: #6D5DFC !important;
        }

        .dark-theme .text-success {
            color: #38B2AC !important;
        }

        .dark-theme .text-info {
            color: #4FD1C5 !important;
        }

        .dark-theme .text-warning {
            color: #F6AD55 !important;
        }

        .dark-theme .text-danger {
            color: #F56565 !important;
        }

        .dark-theme .progress-bar.bg-info {
            background-color: #4FD1C5 !important;
        }

        .dark-theme .progress-bar.bg-success {
            background-color: #38B2AC !important;
        }

        .dark-theme .progress-bar.bg-warning {
            background-color: #F6AD55 !important;
        }

        .dark-theme .table {
            color: #E2E8F0;
        }

        .dark-theme .table-striped > tbody > tr:nth-of-type(odd) {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .dark-theme .form-text {
            color: #A0AEC0;
        }

        .dark-theme .interval-summary {
            background-color: #252525;
        }

            .dark-theme .interval-summary:hover {
                background-color: #2D2D2D;
            }

        .dark-theme .card.bg-light {
            background-color: #252525 !important;
        }

        .dark-theme .alert-info {
            background-color: rgba(79, 209, 197, 0.15);
            color: #E2E8F0;
            border-color: rgba(79, 209, 197, 0.4);
        }

        .dark-theme .alert-warning {
            background-color: rgba(246, 173, 85, 0.15);
            color: #E2E8F0;
            border-color: rgba(246, 173, 85, 0.4);
        }

        .dark-theme .alert-danger {
            background-color: rgba(245, 101, 101, 0.15);
            color: #E2E8F0;
            border-color: rgba(245, 101, 101, 0.4);
        }

    .theme-toggle {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }

    /* Special styles for this page */
    .sustainability-high {
        color: #38B2AC;
    }

    .sustainability-medium {
        color: #F6AD55;
    }

    .sustainability-low {
        color: #F56565;
    }

    .dark-theme .sustainability-high {
        color: #38B2AC;
    }

    .dark-theme .sustainability-medium {
        color: #F6AD55;
    }

    .dark-theme .sustainability-low {
        color: #F56565;
    }

    .duration-exceeded {
        text-decoration: line-through;
        opacity: 0.6;
    }

    /* Smaller font size for monetary values in tables */
    .money-value {
        font-size: 0.70rem;
    }

    /* More compact table headers */
    .retirement-table th {
        font-size: 0.85rem;
        padding: 0.4rem;
    }

    /* More compact table cells */
    .retirement-table td {
        padding: 0.4rem;
    }
</style>

<div class="container-fluid @(isDarkTheme ? "dark-theme" : "")">
    <!-- Theme toggle button -->
    <button @onclick="ToggleTheme" class="btn btn-sm theme-toggle @(isDarkTheme ? "btn-light" : "btn-dark")">
        <i class="bi @(isDarkTheme ? "bi-sun" : "bi-moon")"></i>
        @(isDarkTheme ? "Light Mode" : "Dark Mode")
    </button>
    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <button class="nav-link @(activeTab == "your" ? "tab-active-custom" : "")"
                    @onclick="YourTabClick">
                Your Retirement
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(activeTab == "partner" ? "tab-active-custom" : "")"
                    @onclick="PartnerTabClick">
                Partner Retirement
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(activeTab == "joint" ? "tab-active-custom" : "")"
                    @onclick="JointTabClick">
                Joint Retirement
            </button>
        </li>
    </ul>
    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header @(isDarkTheme ? "" : "bg-primary text-white")">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-wallet2"></i> Retirement Spending Planner
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@spendingModel" OnValidSubmit="@Calculate" FormName="SpendingPlannerForm">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Account Balances ($)</label>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-floating mb-2">
                                        <input type="number" id="taxableBalance" class="form-control"
                                               @bind-value="spendingModel.TaxableBalance" @bind-value:event="oninput" />
                                        <label for="taxableBalance">Post-Tax</label>
                                        <ValidationMessage For="@(() => spendingModel.TaxableBalance)" class="text-danger" />
                                    </div>
                                    <div class="form-text">Brokerage accounts</div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating mb-2">
                                        <input type="number" id="traditionalBalance" class="form-control"
                                               @bind-value="spendingModel.TraditionalBalance" @bind-value:event="oninput" />
                                        <label for="traditionalBalance">Traditional</label>
                                        <ValidationMessage For="@(() => spendingModel.TraditionalBalance)" class="text-danger" />
                                    </div>
                                    <div class="form-text">401k, Traditional IRA</div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating mb-2">
                                        <input type="number" id="rothBalance" class="form-control"
                                               @bind-value="spendingModel.RothBalance" @bind-value:event="oninput" />
                                        <label for="rothBalance">Roth</label>
                                        <ValidationMessage For="@(() => spendingModel.RothBalance)" class="text-danger" />
                                    </div>
                                    <div class="form-text">Roth IRA, Roth 401k</div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="traditionalTaxRate" class="form-label">Traditional Account Tax Rate (%)</label>
                            <input type="number" id="traditionalTaxRate" class="form-control" step="0.1" min="0" max="50"
                                   @bind-value="spendingModel.TraditionalTaxRate" @bind-value:event="oninput" />
                            <ValidationMessage For="@(() => spendingModel.TraditionalTaxRate)" class="text-danger" />
                            <div class="form-text">Estimated tax rate on Traditional account withdrawals</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Ages and Duration</label>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-floating mb-2">
                                        <input type="number" id="retirementAge" class="form-control"
                                               @bind-value="spendingModel.RetirementAge" @bind-value:event="oninput" />
                                        <label for="retirementAge">Retirement Age</label>
                                        <ValidationMessage For="@(() => spendingModel.RetirementAge)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating mb-2">
                                        <input type="number" id="lifeExpectancy" class="form-control"
                                               @bind-value="spendingModel.LifeExpectancy" @bind-value:event="oninput" />
                                        <label for="lifeExpectancy">Life Expectancy</label>
                                        <ValidationMessage For="@(() => spendingModel.LifeExpectancy)" class="text-danger" />
                                    </div>
                                    <div class="form-text">The age you want your money to last until</div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating mb-2">
                                        <input type="text" id="planDuration" class="form-control bg-light" value="@spendingModel.PlanYears" readonly />
                                        <label for="planDuration">Plan Years</label>
                                    </div>
                                    <div class="form-text">Automatically calculated</div>
                                </div>
                            </div>
                        </div>
                        @if (activeTab == "your")
                        {
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Your Social Security</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <label class="form-label">Start Age</label>
                                            <input type="number" class="form-control" min="50" max="100"
                                                   @bind-value="spendingModel.SocialSecurityStartAgeIndividual" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityStartAgeIndividual)" class="text-danger" />
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label">Estimated Monthly Benefit ($)</label>
                                            <input type="number" class="form-control" step="1" min="0"
                                                   @bind-value="spendingModel.SocialSecurityMonthlyAmountIndividual" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityMonthlyAmountIndividual)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="form-text mt-2">Enter the age you plan to claim and the expected monthly benefit.</div>
                                </div>
                            </div>
                        }
                        else if (activeTab == "partner")
                        {
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Partner Social Security</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <label class="form-label">Start Age</label>
                                            <input type="number" class="form-control" min="50" max="100"
                                                   @bind-value="spendingModel.SocialSecurityStartAgeIndividual" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityStartAgeIndividual)" class="text-danger" />
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label">Estimated Monthly Benefit ($)</label>
                                            <input type="number" class="form-control" step="1" min="0"
                                                   @bind-value="spendingModel.SocialSecurityMonthlyAmountIndividual" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityMonthlyAmountIndividual)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="form-text mt-2">Enter the age your partner will claim and their expected monthly benefit.</div>
                                </div>
                            </div>
                        }
                        else if (activeTab == "joint")
                        {
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Your Social Security</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <label class="form-label">Start Age</label>
                                            <input type="number" class="form-control" min="50" max="100"
                                                   @bind-value="spendingModel.SocialSecurityStartAgeYour" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityStartAgeYour)" class="text-danger" />
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label">Estimated Monthly Benefit ($)</label>
                                            <input type="number" class="form-control" step="1" min="0"
                                                   @bind-value="spendingModel.SocialSecurityMonthlyAmountYour" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityMonthlyAmountYour)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="form-text mt-2">Enter the age you plan to claim and the expected monthly benefit.</div>
                                </div>
                            </div>
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Partner Social Security</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row g-2">
                                        <div class="col-6">
                                            <label class="form-label">Start Age</label>
                                            <input type="number" class="form-control" min="50" max="100"
                                                   @bind-value="spendingModel.SocialSecurityStartAgePartner" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityStartAgePartner)" class="text-danger" />
                                        </div>
                                        <div class="col-6">
                                            <label class="form-label">Estimated Monthly Benefit ($)</label>
                                            <input type="number" class="form-control" step="1" min="0"
                                                   @bind-value="spendingModel.SocialSecurityMonthlyAmountPartner" @bind-value:event="oninput" />
                                            <ValidationMessage For="@(() => spendingModel.SocialSecurityMonthlyAmountPartner)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="form-text mt-2">Enter the age your partner will claim and their expected monthly benefit.</div>
                                </div>
                            </div>
                        }
                        <div class="mb-3">
                            <label for="withdrawalStrategy" class="form-label">Spending Strategy</label>
                            <select id="withdrawalStrategy" class="form-control" @bind="spendingModel.Strategy">
                                <option value="@SpendingPlanModel.WithdrawalStrategy.FixedAmount">Fixed Yearly Amount</option>
                                <option value="@SpendingPlanModel.WithdrawalStrategy.FixedPercentage">Fixed Percentage of Balance</option>
                                <option value="@SpendingPlanModel.WithdrawalStrategy.InflationAdjusted">Inflation-Adjusted Amount</option>
                            </select>
                            <div class="form-text">How you plan to withdraw money during retirement</div>
                        </div>

                        @if (spendingModel.Strategy == SpendingPlanModel.WithdrawalStrategy.FixedAmount ||
                                                spendingModel.Strategy == SpendingPlanModel.WithdrawalStrategy.InflationAdjusted)
                        {
                            <div class="mb-3">
                                <label for="annualWithdrawal" class="form-label">Yearly Spending Amount ($)</label>
                                <input type="number" id="annualWithdrawal" class="form-control"
                                       @bind-value="spendingModel.AnnualWithdrawal" @bind-value:event="oninput" />
                                <ValidationMessage For="@(() => spendingModel.AnnualWithdrawal)" class="text-danger" />
                                <div class="form-text">How much you plan to spend each year in retirement</div>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <label for="withdrawalPercentage" class="form-label">Yearly Spending Percentage (%)</label>
                                <input type="number" id="withdrawalPercentage" class="form-control" step="0.1"
                                       @bind-value="spendingModel.WithdrawalPercentage" @bind-value:event="oninput" />
                                <ValidationMessage For="@(() => spendingModel.WithdrawalPercentage)" class="text-danger" />
                                <div class="form-text">Percentage of your balance you'll spend each year (4% is a common rule of thumb)</div>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="priorityStrategy" class="form-label">Account Withdrawal Strategy</label>
                            <select id="priorityStrategy" class="form-control" @bind="spendingModel.PriorityStrategy">
                                <option value="@SpendingPlanModel.WithdrawalPriorityStrategy.TaxOptimized">Tax Optimized (Post-Tax → Traditional → Roth)</option>
                                <option value="@SpendingPlanModel.WithdrawalPriorityStrategy.ProportionalSplit">Proportional Split (All accounts)</option>
                                <option value="@SpendingPlanModel.WithdrawalPriorityStrategy.CustomOrder">Custom Order</option>
                            </select>
                            <div class="form-text">Which accounts to withdraw from first</div>
                        </div>

                        @if (spendingModel.PriorityStrategy == SpendingPlanModel.WithdrawalPriorityStrategy.CustomOrder)
                        {
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Custom Withdrawal Order</h5>
                                </div>
                                <div class="card-body">
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle"></i> Select the order in which you want to withdraw from your accounts
                                    </div>

                                    <div class="row mb-2">
                                        <div class="col-2 d-flex align-items-center">
                                            <span class="fw-bold">1st:</span>
                                        </div>
                                        <div class="col-10">
                                            <select class="form-control" @bind="firstWithdrawalType" @bind:after="UpdateWithdrawalOrder">
                                                <option value="Taxable">Post-Tax Account</option>
                                                <option value="Traditional">Traditional Account</option>
                                                <option value="Roth">Roth Account</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="row mb-2">
                                        <div class="col-2 d-flex align-items-center">
                                            <span class="fw-bold">2nd:</span>
                                        </div>
                                        <div class="col-10">
                                            <select class="form-control" @bind="secondWithdrawalType" @bind:after="UpdateWithdrawalOrder">
                                                <option value="Taxable">Post-Tax Account</option>
                                                <option value="Traditional">Traditional Account</option>
                                                <option value="Roth">Roth Account</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 d-flex align-items-center">
                                            <span class="fw-bold">3rd:</span>
                                        </div>
                                        <div class="col-10">
                                            <select class="form-control" @bind="thirdWithdrawalType" @bind:after="UpdateWithdrawalOrder">
                                                <option value="Taxable">Post-Tax Account</option>
                                                <option value="Traditional">Traditional Account</option>
                                                <option value="Roth">Roth Account</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="mb-3">
                            <label for="investmentReturn" class="form-label">Investment Growth Rate (%)</label>
                            <input type="number" id="investmentReturn" class="form-control" step="0.1"
                                   @bind-value="spendingModel.InvestmentReturn" @bind-value:event="oninput" />
                            <ValidationMessage For="@(() => spendingModel.InvestmentReturn)" class="text-danger" />
                            <div class="form-text">Expected annual return on investments during retirement (typically 4-5%)</div>
                        </div>

                        <div class="mb-3">
                            <label for="inflationRate" class="form-label">Inflation Rate (%)</label>
                            <input type="number" id="inflationRate" class="form-control" step="0.1"
                                   @bind-value="spendingModel.InflationRate" @bind-value:event="oninput" />
                            <ValidationMessage For="@(() => spendingModel.InflationRate)" class="text-danger" />
                            <div class="form-text">Expected annual inflation rate (typically 2-3%)</div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header bg-info text-white">
                                <div class="form-check mb-0">
                                    <input type="checkbox" id="hasPartialRetirement" class="form-check-input"
                                           @bind="hasPartialRetirementChecked" />
                                    <label for="hasPartialRetirement" class="form-check-label fw-bold">
                                        I plan to work part-time during early retirement
                                    </label>
                                </div>
                            </div>
                            @if (hasPartialRetirementChecked)
                            {
                                <div class="card-body">
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle"></i> Many retirees work part-time in early retirement for health insurance,
                                        social connection, or extra income. This can significantly extend your portfolio's life.
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="partialRetirementEndAge" class="form-label">Work part-time until age</label>
                                            <input type="number" id="partialRetirementEndAge" class="form-control"
                                                   @bind-value="spendingModel.PartialRetirementEndAge" @bind-value:event="oninput" />
                                            <div class="form-text">When you plan to fully retire</div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="partialRetirementIncome" class="form-label">Annual part-time income ($)</label>
                                            <input type="number" id="partialRetirementIncome" class="form-control"
                                                   @bind-value="spendingModel.PartialRetirementIncome" @bind-value:event="oninput" />
                                            <div class="form-text">Estimated yearly income from part-time work</div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg w-100">
                            <i class="bi bi-calculator"></i> Calculate Spending Plan
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-lg-8">
            @if (results != null)
            {
                <div class="card">
                    <div class="card-header @(isDarkTheme ? "" : "bg-success text-white")">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3 class="card-title mb-0">
                                <i class="bi bi-graph-up"></i> Results
                            </h3>
                            <RetirementExportButton Results="@results"
                                                    YearlyBreakdown="@yearlyBreakdown"
                                                    Model="@spendingModel"
                                                    Text="Export to Excel"
                                                    CssClass="@(isDarkTheme ? "btn btn-outline-light btn-sm" : "btn btn-light btn-sm")" />
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-primary money-value">@results.TotalWithdrawals.ToString("C0")</h4>
                                        <p class="mb-0">Total Spending</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-success money-value">@results.TotalGrowth.ToString("C0")</h4>
                                        <p class="mb-0">Investment Growth</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="@GetSustainabilityClass(results.IsSustainable) money-value">
                                            @(results.FinalBalance > 0 ? results.FinalBalance.ToString("C0") : "$0")
                                        </h4>
                                        <p class="mb-0">Final Balance</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="@GetSustainabilityClass(results.IsSustainable)">
                                            @(results.MoneyRunsOutAge > 0 && !results.IsSustainable
                                                                                    ? $"Age {results.MoneyRunsOutAge}"
                                                                                    : "Lifetime")
                                    </h4>
                                    <p class="mb-0">Money Lasts Until</p>
                                </div>
                            </div>
                        </div>
                    </div>

                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <h5 class="mb-0">Final Account Balances</h5>
                            </div>
                            <div class="card-body p-0">
                                <table class="table mb-0">
                                    <tbody>
                                        <tr>
                                            <td><strong>Post-Tax Account:</strong></td>
                                            <td class="text-end money-value">@results.TaxableBalance.ToString("C0")</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Traditional Account:</strong></td>
                                            <td class="text-end money-value">@results.TraditionalBalance.ToString("C0")</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Roth Account:</strong></td>
                                            <td class="text-end money-value">@results.RothBalance.ToString("C0")</td>
                                        </tr>
                                        <tr class="table-active">
                                            <td><strong>Total:</strong></td>
                                            <td class="text-end money-value"><strong>@results.FinalBalance.ToString("C0")</strong></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="progress mb-3" style="height: 30px;">
                            <div class="progress-bar bg-info" role="progressbar"
                                 style="width: @(CalculateProgressBarWidth(spendingModel.StartingBalance, results.TotalWithdrawals, results.TotalGrowth, 1))%">
                                Original Balance
                            </div>
                            <div class="progress-bar bg-success" role="progressbar"
                                 style="width: @(CalculateProgressBarWidth(spendingModel.StartingBalance, results.TotalWithdrawals, results.TotalGrowth, 2))%">
                                Investment Growth
                            </div>
                            <div class="progress-bar bg-warning" role="progressbar"
                                 style="width: @(CalculateProgressBarWidth(spendingModel.StartingBalance, results.TotalWithdrawals, results.TotalGrowth, 3))%">
                                Remaining Balance
                            </div>
                        </div>

                        <div class="alert @(results.IsSustainable ? "alert-info" : "alert-warning")">
                            <strong>💡 @(results.IsSustainable ? "Your Plan Looks Sustainable!" : "Caution: Your Money May Not Last")</strong><br>
                        @if (results.IsSustainable)
                            {
                                <span>
                                    You'll spend <strong class="money-value">@results.TotalWithdrawals.ToString("C0")</strong> over @spendingModel.PlanYears years,
                                    pay <strong class="money-value">@results.TotalTaxesPaid.ToString("C0")</strong> in taxes,
                                    and your investments will grow by <strong class="money-value">@results.TotalGrowth.ToString("C0")</strong>,
                                    @if (hasPartialRetirementChecked && results.TotalPartTimeIncome > 0)
                                    {
                                        <span>plus <strong class="money-value">@results.TotalPartTimeIncome.ToString("C0")</strong> from part-time work, </span>
                                    }
                                    leaving you with <strong class="money-value">@results.FinalBalance.ToString("C0")</strong> at age @spendingModel.LifeExpectancy.
                                </span>
                            }
                            else
                            {
                                <span>
                                    Your plan shows that your money will run out at age <strong>@results.MoneyRunsOutAge</strong>, which is
                                    @(spendingModel.LifeExpectancy - results.MoneyRunsOutAge) years before your target age of @spendingModel.LifeExpectancy.
                                    Consider adjusting your spending amount or investment strategy.
                                </span>
                            }
                        </div>

                        <div class="card mb-3">
                            <div class="card-header" @onclick="ToggleSummary" style="cursor: pointer;">
                                <h5 class="mb-0 d-flex justify-content-between align-items-center">
                                    Your Spending Plan Summary
                                    <i class="bi @(isSummaryExpanded ? "bi-chevron-up" : "bi-chevron-down")"></i>
                                </h5>
                            </div>
                            @if (isSummaryExpanded)
                            {
                                <div class="card-body">
                                    <ul class="list-unstyled mb-0">
                                        <li><strong>Retirement Age:</strong> @spendingModel.RetirementAge years old</li>
                                        <li><strong>Plan Duration:</strong> @spendingModel.PlanYears years (until age @spendingModel.LifeExpectancy)</li>
                                        <li>
                                            <strong>Starting Balances:</strong>
                                            <div class="row">
                                                <div class="col-md-4">Post-Tax: <span class="money-value">@spendingModel.TaxableBalance.ToString("C0")</span></div>
                                                <div class="col-md-4">Traditional: <span class="money-value">@spendingModel.TraditionalBalance.ToString("C0")</span></div>
                                                <div class="col-md-4">Roth: <span class="money-value">@spendingModel.RothBalance.ToString("C0")</span></div>
                                            </div>
                                        </li>
                                        <li><strong>Traditional Account Tax Rate:</strong> @spendingModel.TraditionalTaxRate%</li>
                                        <li><strong>Withdrawal Strategy:</strong> @GetStrategyText()</li>
                                        <li><strong>Account Withdrawal Priority:</strong> @GetPriorityStrategyText()</li>
                                        @if (hasPartialRetirementChecked)
                                        {
                                            <li><strong>Part-time Work:</strong> <span class="money-value">@spendingModel.PartialRetirementIncome.ToString("C0")</span>/year until age @spendingModel.PartialRetirementEndAge</li>
                                        }
                                        <li><strong>Investment Return:</strong> @spendingModel.InvestmentReturn% annually</li>
                                        <li><strong>Inflation Rate:</strong> @spendingModel.InflationRate% annually</li>
                                        <li><strong>Sustainability:</strong> <span class="@GetSustainabilityClass(results.IsSustainable)">@GetSustainabilityText(results.IsSustainable)</span></li>
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (yearlyBreakdown.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-graph-down-arrow"></i> Your Age-Based Spending Journey
                                @if (spendingModel.PlanYears > 10)
                                {
                                    <small class="text-muted ms-2">Click age ranges to see yearly details (@intervalSummaries.Count intervals)</small>
                                }
                            </h5>
                        </div>
                        <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                            @if (spendingModel.PlanYears > 10 && intervalSummaries.Any())
                            {
                                <!-- 5-Year Interval View for Long-Term Plans -->
                                @foreach (var interval in intervalSummaries)
                                {
                                    var isExpanded = expandedIntervals.Contains(interval.StartYear);
                                    var isFundsDepleted = interval.FundsDepletedInInterval;

                                    <div class="interval-group mb-3">
                                        <!-- Interval Summary Row -->
                                        <div class="interval-summary p-3 border rounded @(isExpanded ? "border-primary" : "") @(isFundsDepleted ? "border-danger" : "")"
                                             style="cursor: pointer; transition: all 0.2s ease;">
                                            <div class="row align-items-center" @onclick="@(() => ToggleInterval(interval.StartYear))">
                                                <div class="col-md-3">
                                                    <h6 class="mb-1 @(isFundsDepleted ? "text-danger" : "")">
                                                        <i class="bi bi-@(isExpanded ? "chevron-down" : "chevron-right")"></i>
                                                        Ages @interval.StartAge-@interval.EndAge
                                                    </h6>
                                                    @if (!string.IsNullOrEmpty(interval.StatusMessage))
                                                    {
                                                        <small class="@(isFundsDepleted ? "text-danger" : "text-success") fw-bold">@interval.StatusMessage</small>
                                                    }
                                                </div>
                                                <div class="col-md-3">
                                                    <strong class="@(isFundsDepleted ? "text-danger" : "") money-value">@interval.FinalBalance.ToString("C0")</strong>
                                                    <br><small class="text-muted">Final Balance</small>
                                                </div>
                                                <div class="col-md-3">
                                                    <span class="text-success money-value">+@interval.TotalGrowth.ToString("C0")</span>
                                                    <br><small class="text-muted">Investment Growth</small>
                                                </div>
                                                <div class="col-md-3">
                                                    <span class="text-info money-value">-@interval.TotalWithdrawals.ToString("C0")</span>
                                                    <br><small class="text-muted">Total Spending</small>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Expanded Yearly Details -->
                                        @if (isExpanded)
                                        {
                                            <div class="yearly-details mt-2 ms-3 border-start border-primary ps-3">
                                                <div class="table-responsive">
                                                    <table class="table table-sm retirement-table">
                                                        <thead class="table-light">
                                                            <tr>
                                                                <th>Year/Age</th>
                                                                <th>Your SS</th>
                                                                <th>Partner SS</th>
                                                                <th>Joint SS</th>
                                                                <th>Post-Tax Start</th>
                                                                <th>Traditional Start</th>
                                                                <th>Roth Start</th>
                                                               @*  @if (spendingModel.HasPartialRetirement)
                                                                {
                                                                    <th>Part-time Income</th>
                                                                } *@
                                                              
                                                                <th>Post-Tax W/D</th>
                                                                <th>Traditional W/D</th>
                                                                <th>Roth W/D</th>
                                                                <th>Taxes Paid</th>
                                                                <th>Tax Rate</th>
                                                                <th>Post-Tax Growth</th>
                                                                <th>Traditional Growth</th>
                                                                <th>Roth Growth</th>
                                                                <th>Post-Tax End</th>
                                                                <th>Traditional End</th>
                                                                <th>Roth End</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var year in interval.YearlyDetails)
                                                            {
                                                                var rowClass = !year.FundsRemaining ? "text-danger duration-exceeded" : "";
                                                                rowClass += year.IsPartialRetirement ? " bg-light" : "";

                                                                <tr class="@rowClass">
                                                                    <td>
                                                                        Year @year.Year (Age @year.Age)
                                                                        @* @if (year.IsPartialRetirement)
                                                                        {
                                                                            <small class="badge bg-info">Part-time work</small>
                                                                        } *@
                                                                    </td>
                                                                    <td class="money-value">@year.EndingSocialSecurityBalanceYour.ToString("C0")</td>
                                                                    <td class="money-value">@year.EndingSocialSecurityBalancePartner.ToString("C0")</td>
                                                                    <td class="money-value">@year.EndingSocialSecurityBalanceJoint.ToString("C0")</td>
                                                                    <td class="money-value">@year.StartingTaxableBalance.ToString("C0")</td>
                                                                    <td class="money-value">@year.StartingTraditionalBalance.ToString("C0")</td>
                                                                    <td class="money-value">@year.StartingRothBalance.ToString("C0")</td>
                                                                    @if (spendingModel.HasPartialRetirement)
                                                                    {
                                                                        <td class="money-value">@year.PartTimeIncome.ToString("C0")</td>
                                                                    }
                                                                    <td class="money-value">@year.TaxableWithdrawal.ToString("C0")</td>
                                                                    <td class="money-value">@year.TraditionalWithdrawal.ToString("C0")</td>
                                                                    <td class="money-value">@year.RothWithdrawal.ToString("C0")</td>
                                                                    <td class="money-value">@year.TaxPaid.ToString("C0")</td>
                                                                    <td>@spendingModel.TraditionalTaxRate%</td>
                                                                    <td class="money-value">@year.TaxableGrowth.ToString("C0")</td>
                                                                    <td class="money-value">@year.TraditionalGrowth.ToString("C0")</td>
                                                                    <td class="money-value">@year.RothGrowth.ToString("C0")</td>
                                                                    <td class="money-value">@year.EndingTaxableBalance.ToString("C0")</td>
                                                                    <td class="money-value">@year.EndingTraditionalBalance.ToString("C0")</td>
                                                                    <td class="money-value">@year.EndingRothBalance.ToString("C0")</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <!-- Traditional Year-by-Year View for Short-Term Plans -->
                                <div class="table-responsive">
                                    <table class="table table-sm table-striped retirement-table">
                                        <thead>
                                            <tr>
                                                <th>Year/Age</th>
                                                <th>Post-Tax Start</th>
                                                <th>Traditional Start</th>
                                                <th>Roth Start</th>
                                                @if (spendingModel.HasPartialRetirement)
                                                {
                                                    <th>Part-time Income</th>
                                                }
                                                <th>Post-Tax W/D</th>
                                                <th>Traditional W/D</th>
                                                <th>Roth W/D</th>
                                                <th>Taxes Paid</th>
                                                <th>Tax Rate</th>
                                                <th>Post-Tax Growth</th>
                                                <th>Traditional Growth</th>
                                                <th>Roth Growth</th>
                                                <th>Post-Tax End</th>
                                                <th>Traditional End</th>
                                                <th>Roth End</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var year in yearlyBreakdown)
                                            {
                                                var rowClass = !year.FundsRemaining ? "text-danger duration-exceeded" : "";
                                                rowClass += year.IsPartialRetirement ? " bg-light" : "";

                                                <tr class="@rowClass">
                                                    <td>
                                                        Year @year.Year (Age @year.Age)
                                                        @if (year.IsPartialRetirement)
                                                        {
                                                            <small class="badge bg-info">Part-time work</small>
                                                        }
                                                    </td>
                                                    <td class="money-value">@year.StartingTaxableBalance.ToString("C0")</td>
                                                    <td class="money-value">@year.StartingTraditionalBalance.ToString("C0")</td>
                                                    <td class="money-value">@year.StartingRothBalance.ToString("C0")</td>
                                                    @if (spendingModel.HasPartialRetirement)
                                                    {
                                                        <td class="money-value">@year.PartTimeIncome.ToString("C0")</td>
                                                    }
                                                    <td class="money-value">@year.TaxableWithdrawal.ToString("C0")</td>
                                                    <td class="money-value">@year.TraditionalWithdrawal.ToString("C0")</td>
                                                    <td class="money-value">@year.RothWithdrawal.ToString("C0")</td>
                                                    <td class="money-value">@year.TaxPaid.ToString("C0")</td>
                                                    <td>@spendingModel.TraditionalTaxRate%</td>
                                                    <td class="money-value">@year.TaxableGrowth.ToString("C0")</td>
                                                    <td class="money-value">@year.TraditionalGrowth.ToString("C0")</td>
                                                    <td class="money-value">@year.RothGrowth.ToString("C0")</td>
                                                    <td class="money-value">@year.EndingTaxableBalance.ToString("C0")</td>
                                                    <td class="money-value">@year.EndingTraditionalBalance.ToString("C0")</td>
                                                    <td class="money-value">@year.EndingRothBalance.ToString("C0")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private bool isDarkTheme = false;
    private bool isSummaryExpanded = false;

    // Properties for custom withdrawal order UI
    private string firstWithdrawalType = "Taxable";
    private string secondWithdrawalType = "Traditional";
    private string thirdWithdrawalType = "Roth";
    private string calculatorType = "Withdrawals_yours"; // Default to "Your" tab
    private string activeTab = "your"; // Track active tab for UI highlighting
    private async Task YourTabClick()
    {
        calculatorType = "Withdrawals_yours";
        Console.WriteLine("Your tab clicked");
        SetActiveTab("your");
        await LoadUserRetirementAsync();
        await Calculate();

    }

    private async Task PartnerTabClick()
    {
        calculatorType = "Withdrawals_partners";
        Console.WriteLine("Partner tab clicked");
        SetActiveTab("partner");
        await LoadUserRetirementAsync();
        await Calculate();

    }
    private async Task JointTabClick()
    {
        calculatorType = "Withdrawals_joint";
        Console.WriteLine("Joint tab clicked");
        SetActiveTab("joint");
        await LoadUserRetirementAsync();
        await Calculate();

    }
    private void ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        Console.WriteLine($"Theme toggled to {(isDarkTheme ? "dark" : "light")} mode");
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }
    private void ToggleSummary()
    {
        isSummaryExpanded = !isSummaryExpanded;
    }

    // Update the withdrawal order based on UI selections
    private async Task UpdateWithdrawalOrder()
    {
        // Ensure no duplicates by checking if user selected the same account type multiple times
        var uniqueTypes = new HashSet<string> { firstWithdrawalType, secondWithdrawalType, thirdWithdrawalType };

        if (uniqueTypes.Count < 3)
        {
            // Handle duplicates - set defaults
            if (!uniqueTypes.Contains("Taxable"))
            {
                if (firstWithdrawalType == secondWithdrawalType)
                    thirdWithdrawalType = "Taxable";
                else if (firstWithdrawalType == thirdWithdrawalType)
                    secondWithdrawalType = "Taxable";
                else
                    firstWithdrawalType = "Taxable";
            }
            else if (!uniqueTypes.Contains("Traditional"))
            {
                if (firstWithdrawalType == secondWithdrawalType)
                    thirdWithdrawalType = "Traditional";
                else if (firstWithdrawalType == thirdWithdrawalType)
                    secondWithdrawalType = "Traditional";
                else
                    firstWithdrawalType = "Traditional";
            }
            else if (!uniqueTypes.Contains("Roth"))
            {
                if (firstWithdrawalType == secondWithdrawalType)
                    thirdWithdrawalType = "Roth";
                else if (firstWithdrawalType == thirdWithdrawalType)
                    secondWithdrawalType = "Roth";
                else
                    firstWithdrawalType = "Roth";
            }
        }

        // Update the model's withdrawal order
        spendingModel.WithdrawalOrder = new[] { firstWithdrawalType, secondWithdrawalType, thirdWithdrawalType };

        // Recalculate results with the new withdrawal order
        await Calculate();
    }

    [SupplyParameterFromForm]
    public SpendingPlanModel spendingModel { get; set; } = new SpendingPlanModel();
    private SpendingResults? results;
    private List<YearlySpendingBreakdown> yearlyBreakdown = new();
    private List<SpendingIntervalSummary> intervalSummaries = new();
    private HashSet<int> expandedIntervals = new();

    // Helper property to handle the checkbox state
    private bool hasPartialRetirementChecked
    {
        get => spendingModel.HasPartialRetirement;
        set
        {
            spendingModel.HasPartialRetirement = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        // Ensure we have a fresh model with all new properties
        spendingModel = new SpendingPlanModel
        {
            RetirementAge = 65,
            LifeExpectancy = 95,
            TaxableBalance = 250000,
            TraditionalBalance = 500000,
            RothBalance = 250000,
            TraditionalTaxRate = 22.0m,
            AnnualWithdrawal = 120000,
            InflationRate = 2.5m,
            InvestmentReturn = 5.0m,
            WithdrawalPercentage = 4.0m,
            Strategy = SpendingPlanModel.WithdrawalStrategy.InflationAdjusted,
            PriorityStrategy = SpendingPlanModel.WithdrawalPriorityStrategy.TaxOptimized,
            WithdrawalOrder = new[] { "Taxable", "Traditional", "Roth" },
            HasPartialRetirement = false,
            PartialRetirementEndAge = 70,
            PartialRetirementIncome = 25000
        };

        base.OnInitialized();
    }

    private async Task Calculate()
    {
        try
        {
            var calculator = new SpendingCalculationEngine();
            results = calculator.Calculate(spendingModel);
            yearlyBreakdown = calculator.GetYearlyBreakdown(spendingModel);

            // Create interval summaries for better UX
            if (spendingModel.PlanYears > 10)
            {
                intervalSummaries = CreateIntervalSummaries(yearlyBreakdown);
            }
            await SaveUserRetirementAsync();
            StateHasChanged(); // Force UI update
        }
        catch (Exception ex)
        {
            // For debugging - you can remove this later
            Console.WriteLine($"Calculation error: {ex.Message}");
        }
    }

    private string GetStrategyText()
    {
        switch (spendingModel.Strategy)
        {
            case SpendingPlanModel.WithdrawalStrategy.FixedAmount:
                return $"Fixed amount of <span class=\"money-value\">{spendingModel.AnnualWithdrawal.ToString("C0")}</span> yearly";
            case SpendingPlanModel.WithdrawalStrategy.FixedPercentage:
                return $"Fixed {spendingModel.WithdrawalPercentage}% of balance yearly";
            case SpendingPlanModel.WithdrawalStrategy.InflationAdjusted:
                return $"Starting at <span class=\"money-value\">{spendingModel.AnnualWithdrawal.ToString("C0")}</span> yearly, adjusted for inflation";
            default:
                return "Custom spending plan";
        }
    }

    private string GetPriorityStrategyText()
    {
        switch (spendingModel.PriorityStrategy)
        {
            case SpendingPlanModel.WithdrawalPriorityStrategy.TaxOptimized:
                return "Tax-optimized (Post-Tax → Traditional → Roth)";
            case SpendingPlanModel.WithdrawalPriorityStrategy.ProportionalSplit:
                return "Proportional from all accounts";
            case SpendingPlanModel.WithdrawalPriorityStrategy.CustomOrder:
                return $"Custom order ({string.Join(" → ", spendingModel.WithdrawalOrder)})";
            default:
                return "Default strategy";
        }
    }

    // Excel export functionality
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = null!;

    private async Task ExportToExcel()
    {
        try
        {
            // Make sure we have results to export
            if (results == null)
            {
                Console.WriteLine("Cannot export to Excel: No results available");
                return;
            }

            using var workbook = new XLWorkbook();

            // Add Summary Sheet
            var summarySheet = workbook.Worksheets.Add("Summary");

            // Title and Date
            summarySheet.Cell("A1").Value = "Retirement Spending Plan Summary";
            summarySheet.Cell("A1").Style.Font.Bold = true;
            summarySheet.Cell("A1").Style.Font.FontSize = 16;
            summarySheet.Range("A1:F1").Merge();

            summarySheet.Cell("A2").Value = $"Generated on {DateTime.Now:MMMM d, yyyy}";
            summarySheet.Range("A2:F2").Merge();

            // Input Parameters
            summarySheet.Cell("A4").Value = "Plan Parameters";
            summarySheet.Cell("A4").Style.Font.Bold = true;
            summarySheet.Range("A4:F4").Merge();

            var row = 5;
            summarySheet.Cell($"A{row}").Value = "Current Age:";
            summarySheet.Cell($"B{row}").Value = spendingModel.RetirementAge - (spendingModel.LifeExpectancy - spendingModel.PlanYears);

            row++;
            summarySheet.Cell($"A{row}").Value = "Retirement Age:";
            summarySheet.Cell($"B{row}").Value = spendingModel.RetirementAge;

            row++;
            summarySheet.Cell($"A{row}").Value = "Life Expectancy:";
            summarySheet.Cell($"B{row}").Value = spendingModel.LifeExpectancy;

            row++;
            summarySheet.Cell($"A{row}").Value = "Plan Duration (Years):";
            summarySheet.Cell($"B{row}").Value = spendingModel.PlanYears;

            row++;
            summarySheet.Cell($"A{row}").Value = "Taxable Account Balance:";
            summarySheet.Cell($"B{row}").Value = spendingModel.TaxableBalance;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Traditional Account Balance:";
            summarySheet.Cell($"B{row}").Value = spendingModel.TraditionalBalance;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Roth Account Balance:";
            summarySheet.Cell($"B{row}").Value = spendingModel.RothBalance;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Traditional Account Tax Rate:";
            summarySheet.Cell($"B{row}").Value = spendingModel.TraditionalTaxRate / 100;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "0.0%";

            row++;
            summarySheet.Cell($"A{row}").Value = "Investment Return:";
            summarySheet.Cell($"B{row}").Value = spendingModel.InvestmentReturn / 100;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "0.0%";

            row++;
            summarySheet.Cell($"A{row}").Value = "Inflation Rate:";
            summarySheet.Cell($"B{row}").Value = spendingModel.InflationRate / 100;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "0.0%";

            row++;
            summarySheet.Cell($"A{row}").Value = "Withdrawal Strategy:";
            summarySheet.Cell($"B{row}").Value = GetStrategyText();

            row++;
            summarySheet.Cell($"A{row}").Value = "Account Withdrawal Priority:";
            summarySheet.Cell($"B{row}").Value = GetPriorityStrategyText();

            if (spendingModel.HasPartialRetirement)
            {
                row++;
                summarySheet.Cell($"A{row}").Value = "Part-time Income:";
                summarySheet.Cell($"B{row}").Value = spendingModel.PartialRetirementIncome;
                summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

                row++;
                summarySheet.Cell($"A{row}").Value = "Part-time Income Until Age:";
                summarySheet.Cell($"B{row}").Value = spendingModel.PartialRetirementEndAge;
            }

            // Results Section
            row += 2;
            summarySheet.Cell($"A{row}").Value = "Results Summary";
            summarySheet.Cell($"A{row}").Style.Font.Bold = true;
            summarySheet.Range($"A{row}:F{row}").Merge();

            row++;
            summarySheet.Cell($"A{row}").Value = "Final Balance (Total):";
            summarySheet.Cell($"B{row}").Value = results.FinalBalance;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Final Taxable Balance:";
            summarySheet.Cell($"B{row}").Value = results.TaxableBalance;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Final Traditional Balance:";
            summarySheet.Cell($"B{row}").Value = results.TraditionalBalance;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Final Roth Balance:";
            summarySheet.Cell($"B{row}").Value = results.RothBalance;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Total Withdrawals:";
            summarySheet.Cell($"B{row}").Value = results.TotalWithdrawals;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Total Taxes Paid:";
            summarySheet.Cell($"B{row}").Value = results.TotalTaxesPaid;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            row++;
            summarySheet.Cell($"A{row}").Value = "Total Investment Growth:";
            summarySheet.Cell($"B{row}").Value = results.TotalGrowth;
            summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";

            if (spendingModel.HasPartialRetirement)
            {
                row++;
                summarySheet.Cell($"A{row}").Value = "Total Part-Time Income:";
                summarySheet.Cell($"B{row}").Value = results.TotalPartTimeIncome;
                summarySheet.Cell($"B{row}").Style.NumberFormat.Format = "$#,##0";
            }

            row++;
            summarySheet.Cell($"A{row}").Value = "Plan Sustainability:";
            summarySheet.Cell($"B{row}").Value = results.IsSustainable ? "Sustainable for lifetime" : $"Money runs out at age {results.MoneyRunsOutAge}";

            // Format Summary Sheet
            summarySheet.Columns().AdjustToContents();

            // Add Yearly Breakdown Sheet
            var detailSheet = workbook.Worksheets.Add("Yearly Breakdown");

            // Headers
            detailSheet.Cell("A1").Value = "Year";
            detailSheet.Cell("B1").Value = "Age";
            detailSheet.Cell("C1").Value = "Starting Taxable";
            detailSheet.Cell("D1").Value = "Starting Traditional";
            detailSheet.Cell("E1").Value = "Starting Roth";
            detailSheet.Cell("F1").Value = "Starting Total";

            if (spendingModel.HasPartialRetirement)
            {
                detailSheet.Cell("G1").Value = "Part-Time Income";
                detailSheet.Cell("H1").Value = "Taxable Withdrawal";
                detailSheet.Cell("I1").Value = "Traditional Withdrawal";
                detailSheet.Cell("J1").Value = "Roth Withdrawal";
                detailSheet.Cell("K1").Value = "Total Withdrawal";
                detailSheet.Cell("L1").Value = "Tax Paid";
                detailSheet.Cell("M1").Value = "Taxable Growth";
                detailSheet.Cell("N1").Value = "Traditional Growth";
                detailSheet.Cell("O1").Value = "Roth Growth";
                detailSheet.Cell("P1").Value = "Total Growth";
                detailSheet.Cell("Q1").Value = "Ending Taxable";
                detailSheet.Cell("R1").Value = "Ending Traditional";
                detailSheet.Cell("S1").Value = "Ending Roth";
                detailSheet.Cell("T1").Value = "Ending Total";
            }
            else
            {
                detailSheet.Cell("G1").Value = "Taxable Withdrawal";
                detailSheet.Cell("H1").Value = "Traditional Withdrawal";
                detailSheet.Cell("I1").Value = "Roth Withdrawal";
                detailSheet.Cell("J1").Value = "Total Withdrawal";
                detailSheet.Cell("K1").Value = "Tax Paid";
                detailSheet.Cell("L1").Value = "Taxable Growth";
                detailSheet.Cell("M1").Value = "Traditional Growth";
                detailSheet.Cell("N1").Value = "Roth Growth";
                detailSheet.Cell("O1").Value = "Total Growth";
                detailSheet.Cell("P1").Value = "Ending Taxable";
                detailSheet.Cell("Q1").Value = "Ending Traditional";
                detailSheet.Cell("R1").Value = "Ending Roth";
                detailSheet.Cell("S1").Value = "Ending Total";
            }

            // Style header row
            var headerRow = detailSheet.Row(1);
            headerRow.Style.Font.Bold = true;
            headerRow.Style.Fill.BackgroundColor = XLColor.LightGray;

            // Data rows
            for (int i = 0; i < yearlyBreakdown.Count; i++)
            {
                var year = yearlyBreakdown[i];
                int dataRow = i + 2; // Start data on row 2

                detailSheet.Cell($"A{dataRow}").Value = year.Year;
                detailSheet.Cell($"B{dataRow}").Value = year.Age;
                detailSheet.Cell($"C{dataRow}").Value = year.StartingTaxableBalance;
                detailSheet.Cell($"D{dataRow}").Value = year.StartingTraditionalBalance;
                detailSheet.Cell($"E{dataRow}").Value = year.StartingRothBalance;
                detailSheet.Cell($"F{dataRow}").Value = year.StartingTotalBalance;

                if (spendingModel.HasPartialRetirement)
                {
                    detailSheet.Cell($"G{dataRow}").Value = year.PartTimeIncome;
                    detailSheet.Cell($"H{dataRow}").Value = year.TaxableWithdrawal;
                    detailSheet.Cell($"I{dataRow}").Value = year.TraditionalWithdrawal;
                    detailSheet.Cell($"J{dataRow}").Value = year.RothWithdrawal;
                    detailSheet.Cell($"K{dataRow}").Value = year.TotalWithdrawal;
                    detailSheet.Cell($"L{dataRow}").Value = year.TaxPaid;
                    detailSheet.Cell($"M{dataRow}").Value = year.TaxableGrowth;
                    detailSheet.Cell($"N{dataRow}").Value = year.TraditionalGrowth;
                    detailSheet.Cell($"O{dataRow}").Value = year.RothGrowth;
                    detailSheet.Cell($"P{dataRow}").Value = year.TotalGrowth;
                    detailSheet.Cell($"Q{dataRow}").Value = year.EndingTaxableBalance;
                    detailSheet.Cell($"R{dataRow}").Value = year.EndingTraditionalBalance;
                    detailSheet.Cell($"S{dataRow}").Value = year.EndingRothBalance;
                    detailSheet.Cell($"T{dataRow}").Value = year.EndingTotalBalance;
                }
                else
                {
                    detailSheet.Cell($"G{dataRow}").Value = year.TaxableWithdrawal;
                    detailSheet.Cell($"H{dataRow}").Value = year.TraditionalWithdrawal;
                    detailSheet.Cell($"I{dataRow}").Value = year.RothWithdrawal;
                    detailSheet.Cell($"J{dataRow}").Value = year.TotalWithdrawal;
                    detailSheet.Cell($"K{dataRow}").Value = year.TaxPaid;
                    detailSheet.Cell($"L{dataRow}").Value = year.TaxableGrowth;
                    detailSheet.Cell($"M{dataRow}").Value = year.TraditionalGrowth;
                    detailSheet.Cell($"N{dataRow}").Value = year.RothGrowth;
                    detailSheet.Cell($"O{dataRow}").Value = year.TotalGrowth;
                    detailSheet.Cell($"P{dataRow}").Value = year.EndingTaxableBalance;
                    detailSheet.Cell($"Q{dataRow}").Value = year.EndingTraditionalBalance;
                    detailSheet.Cell($"R{dataRow}").Value = year.EndingRothBalance;
                    detailSheet.Cell($"S{dataRow}").Value = year.EndingTotalBalance;
                }

                // Format money cells
                if (spendingModel.HasPartialRetirement)
                {
                    for (char col = 'C'; col <= 'T'; col++)
                    {
                        if (col != 'A' && col != 'B')
                        {
                            detailSheet.Cell($"{col}{dataRow}").Style.NumberFormat.Format = "$#,##0";
                        }
                    }
                }
                else
                {
                    for (char col = 'C'; col <= 'S'; col++)
                    {
                        if (col != 'A' && col != 'B')
                        {
                            detailSheet.Cell($"{col}{dataRow}").Style.NumberFormat.Format = "$#,##0";
                        }
                    }
                }

                // Highlight partial retirement years
                if (year.IsPartialRetirement)
                {
                    var rowCells = detailSheet.Row(dataRow).Cells();
                    rowCells.Style.Fill.BackgroundColor = XLColor.LightBlue;
                }

                // Highlight if funds depleted
                if (!year.FundsRemaining)
                {
                    var rowCells = detailSheet.Row(dataRow).Cells();
                    rowCells.Style.Fill.BackgroundColor = XLColor.LightPink;
                    rowCells.Style.Font.FontColor = XLColor.Red;
                }
            }

            // Format detail sheet
            detailSheet.Columns().AdjustToContents();

            // Save to memory stream
            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;

            // Get base64 string
            var base64 = Convert.ToBase64String(stream.ToArray());

            // Use JS to download the file
            if (JSRuntime != null)
            {
                await JSRuntime.InvokeVoidAsync(
                    "downloadFileFromBase64",
                    base64,
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    $"RetirementSpendingPlan_{DateTime.Now:yyyyMMdd}.xlsx"
                );
            }
            else
            {
                Console.WriteLine("JSRuntime is null, cannot download file");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
            // Consider displaying an error message to the user
        }
    }

    private string GetSustainabilityClass(bool isSustainable)
    {
        return isSustainable ? "sustainability-high" : "sustainability-low";
    }

    private string GetSustainabilityText(bool isSustainable)
    {
        return isSustainable ? "Plan is sustainable for your lifetime" : "Money may run out before end of plan";
    }

    private decimal CalculateProgressBarWidth(decimal startingBalance, decimal totalWithdrawals, decimal totalGrowth, int segment)
    {
        decimal total = startingBalance + totalGrowth;

        // Segment 1: Original balance (as percentage of total spent+remaining)
        if (segment == 1)
        {
            return Math.Min(100, (startingBalance / total) * 100);
        }
        // Segment 2: Growth (as percentage of total spent+remaining)
        else if (segment == 2)
        {
            return Math.Min(100, (totalGrowth / total) * 100);
        }
        // Segment 3: Remaining (as percentage of total spent+remaining)
        else
        {
            decimal finalBalance = startingBalance + totalGrowth - totalWithdrawals;
            return Math.Max(0, Math.Min(100, (finalBalance / total) * 100));
        }
    }

    private List<SpendingIntervalSummary> CreateIntervalSummaries(List<YearlySpendingBreakdown> breakdown)
    {
        // Get starting age - round up to next 5-year interval
        int startingAge = spendingModel.RetirementAge;
        int roundedStartAge = (int)Math.Ceiling(startingAge / 5.0) * 5;

        return breakdown
            .Select((y, index) => new
            {
                Year = y,
                Age = spendingModel.RetirementAge + index
            })
            .GroupBy(item => ((item.Age - 1) / 5) * 5 + 5) // Group into 5-year age intervals
            .Select(g => new SpendingIntervalSummary
            {
                StartYear = g.First().Year.Year,
                EndYear = g.Last().Year.Year,
                StartAge = g.Key - 5,
                EndAge = Math.Min(g.Key, spendingModel.LifeExpectancy),
                FinalBalance = g.Last().Year.EndingBalance,
                TotalGrowth = g.Sum(item => item.Year.InvestmentGrowth),
                TotalWithdrawals = g.Sum(item => item.Year.Withdrawal),
                YearlyDetails = g.Select(item => item.Year).ToList(),
                FundsDepletedInInterval = g.Any(item => !item.Year.FundsRemaining),
                StatusMessage = GetIntervalStatusMessage(g.Last().Year)
            })
            .ToList();
    }

    private string GetIntervalStatusMessage(YearlySpendingBreakdown lastYear)
    {
        if (!lastYear.FundsRemaining)
        {
            return "⚠️ Funds depleted";
        }

        decimal withdrawalRate = lastYear.Withdrawal / lastYear.StartingBalance * 100;

        if (withdrawalRate > 7)
        {
            return "⚠️ High withdrawal rate";
        }
        else if (withdrawalRate > 4)
        {
            return "⚠️ Moderate withdrawal rate";
        }
        else if (lastYear.EndingBalance > lastYear.StartingBalance * 1.5m)
        {
            return "💰 Significant growth";
        }

        return "";
    }

    private void ToggleInterval(int startYear)
    {
        if (expandedIntervals.Contains(startYear))
        {
            expandedIntervals.Remove(startYear);
        }
        else
        {
            expandedIntervals.Add(startYear);
        }
        StateHasChanged(); // Force UI refresh
    }

    private string GetApiBaseUrl()
    {
#if DEBUG
            return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

    string userGuid = string.Empty;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            await LoadUserRetirementAsync();
            await Calculate();
            StateHasChanged(); // Trigger UI update after userGuid is set
        }
    }

    private bool isLoading = false;
    private void AddDebugMessage(string message)
    {
        DebugService.AddMessage(message);
    }

    private async Task LoadUserRetirementAsync()
    {
        isLoading = true;
        StateHasChanged();
        var apiBaseUrl = GetApiBaseUrl();
        var url = $"{apiBaseUrl}/api/Retirement/load?userGuid={userGuid}&calculatorType={calculatorType}";
        try
        {
            AddDebugMessage($"Loading");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Loaded.");
                AddDebugMessage($"Loaded");
            }
            else
            {
                AddDebugMessage($"Load Failed");
                Console.WriteLine($"Load failed: {response.StatusCode}");
                return;
            }

            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Response: {json}");

            // Deserialize JSON into SavingsCalculatorModel
            var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SpendingPlanModel>(json, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (loadedModel != null)
            {
                spendingModel = loadedModel;
                // autoCalculate = loadedModel.AutoCalculate;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AddDebugMessage($"Load Failed");
            Console.WriteLine($"Error calling API: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private System.Timers.Timer? debounceTimer;

    public void Dispose()
    {
        debounceTimer?.Dispose();
        saveSemaphore?.Dispose();
    }

    // Semaphore to prevent re-entrant/parallel saves
    private readonly System.Threading.SemaphoreSlim saveSemaphore = new System.Threading.SemaphoreSlim(1, 1);

    private async Task SaveUserRetirementAsync()
    {
        // If a save is already in progress, skip this duplicate call
        if (!saveSemaphore.Wait(0))
        {
            AddDebugMessage($"Skip Dupl. Save");
            Console.WriteLine("Save already in progress; skipping duplicate save.");
            return;
        }

        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/Retirement/save";

            spendingModel.LastUpdateDate = DateTime.UtcNow; // Set last update time

            // Create SaveRequest object
            var saveRequest = new PersistSpendingRequest()
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = spendingModel
            };

            AddDebugMessage($"Saving");

            var json = System.Text.Json.JsonSerializer.Serialize(saveRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Saved");
                AddDebugMessage($"Saved");
            }
            else
            {
                AddDebugMessage($"Save Failed");
                Console.WriteLine($"Save failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            AddDebugMessage($"Save Failed");
            Console.WriteLine($"Error saving data: {ex.Message}");
        }
        finally
        {
            try { saveSemaphore.Release(); } catch { }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        activeTab = "your"; // Ensure "Yours" tab is selected by default

    }
}
