@page "/retirement-drawdown-calendar"
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using FinPlan.Web.Components
@using FinPlan.Shared.Models.Spending
@namespace FinPlan.Web.Components.Pages

<PageTitle>Retirement Drawdown Planner (Calendar Years) - Wireframe</PageTitle>
<style>
    :root {
        --brand-yellow: #FFD600;
        --muted: #6c757d;
        --bg: #f8f9fa;
        --card-bg: #ffffff;
        --card-radius: 10px;
        --accent: #6D5DFC;
        --danger: #F56565;
        --success: #38B2AC;
        --info: #4FD1C5;
    }

    .container-wire {
        padding: 14px;
    }

    /* Page header */
    .page-header {
        text-align: center;
        font-weight: 700;
        font-size: 1.35rem;
        margin-bottom: 12px;
        color: #111;
    }

    /* Top area contains sidebars + input panels. Sidebars are only present inside this area so the grid below is full width */
    .top-area {
        position: relative;
    }

    /* Wrapper around the input panels to give a yellow border that stops where the grid starts */
    .input-panel-wrapper {
        margin-left: 180px; /* leave room for mini sidebars */
        margin-right: 180px;
        border: 2px solid var(--brand-yellow);
        border-radius: 10px;
        padding: 10px;
        background: #ffffff;
        box-shadow: 0 6px 18px rgba(22,28,36,0.03);
    }

    .top-panel {
        display: flex;
        gap: 12px;
        align-items: stretch; /* ensure left and right panels have equal height */
        margin-bottom: 0; /* moved spacing to wrapper */
    }

    .panel {
        background: var(--card-bg);
        border-radius: var(--card-radius);
        box-shadow: 0 6px 18px rgba(22,28,36,0.06);
        padding: 12px;
        border: 1px solid rgba(0,0,0,0.03);
        display: flex; /* make panels flex columns so actions can stick to bottom */
        flex-direction: column;
        flex: 1 1 0%; /* allow panels to grow equally and match height */
    }

    /* Mini sidebars that only cover the top area */
    .left-sidebar-mini, .right-sidebar-mini {
        position: absolute;
        left: 0;
        right: auto;
        top: 0;
        bottom: 0; /* stretch to top-area height */
        width: 160px;
        padding: 10px;
        box-shadow: 0 6px 18px rgba(22,28,36,0.06);
        border-radius: 8px;
        background: linear-gradient(180deg, #ffffff, #fbfbfb);
        border: 1px solid rgba(0,0,0,0.03);
        z-index: 10;
        font-size: 0.9rem;
        overflow: auto;
    }

    .left-sidebar-mini {
        left: 0;
    }

    .right-sidebar-mini {
        right: 0;
        left: auto;
    }

    /* Make left and right panels split 50/50 and stay same height */
    .left-col, .right-col {
        flex: 1 1 0%;
        min-width: 320px;
    }

    .panel h4 {
        margin: 0 0 8px 0;
        font-size: 1.02rem;
        color: #111;
    }
    /* Slightly tighter form rows */
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 6px;
        margin-bottom: 6px;
        align-items: start;
    }

    label {
        display: block;
        font-size: 0.82rem;
        color: var(--muted);
        margin-bottom: 4px;
    }

    input[type="number"], input[type="text"], select {
        width: 100%;
        padding: 6px 8px;
        border-radius: 6px;
        border: 1px solid #e6e9ee;
        background: #fff;
        font-size: 0.92rem;
    }

    .money {
        font-weight: 700;
        color: #0b2545;
    }

    .small-note {
        font-size: 0.8rem;
        color: var(--muted);
        margin-top: 4px;
    }

    .actions {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
        margin-top: 8px;
    }
    /* push actions to bottom of panel */
    .panel .actions {
        margin-top: auto;
    }

    .btn {
        padding: 7px 10px;
        border-radius: 8px;
        border: 0;
        cursor: pointer;
        font-weight: 600;
        font-size: 0.95rem;
    }

    .btn-primary {
        background: var(--accent);
        color: white;
        box-shadow: 0 6px 20px rgba(109,93,252,0.12);
    }

    .btn-ghost {
        background: transparent;
        border: 1px solid #e6e9ee;
        color: #333;
    }

    .badge {
        display: inline-block;
        padding: 6px 8px;
        border-radius: 999px;
        font-size: 0.75rem;
        background: #f1f3f5;
        color: #222;
        margin-right: 6px;
    }

        .badge.milestone {
            background: var(--brand-yellow);
            color: #111;
            font-weight: 700;
        }

    .grid-panel {
        margin-top: 12px;
    }

    .grid-header {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 8px;
    }

    .grid {
        width: 100%;
        border-radius: 8px;
        overflow: auto;
        background: #fff;
        border: 1px solid #e9ecef;
        box-shadow: 0 8px 24px rgba(12,18,30,0.04);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.88rem;
        min-width: 1100px;
    }

    thead th {
        position: sticky;
        top: 0;
        background: #fff;
        padding: 10px 12px;
        border-bottom: 1px solid #eef2f6;
        text-align: left;
        font-weight: 700;
        color: #333;
    }

    tbody td {
        padding: 8px 12px;
        border-bottom: 1px solid #f2f4f7;
        vertical-align: middle;
    }

    tr.depleted {
        background: linear-gradient(90deg, rgba(245,101,101,0.05), transparent);
        color: var(--danger);
    }

    tr.milestone-row td {
        background: linear-gradient(90deg, rgba(255,214,0,0.06), transparent);
    }

    .col-year {
        width: 80px;
        font-weight: 700;
    }

    .col-age {
        width: 70px;
        color: var(--muted);
    }

    .col-milestones {
        width: 200px;
    }

    .money-cell {
        text-align: right;
        font-variant-numeric: tabular-nums;
    }

    .legend {
        margin-left: auto;
        display: flex;
        gap: 8px;
        align-items: center;
        font-size: 0.85rem;
        color: var(--muted);
    }

        .legend .swatch {
            width: 14px;
            height: 14px;
            border-radius: 4px;
            display: inline-block;
        }

    /* Narrow helper class for year and short numeric fields */
    .narrow {
        max-width: 140px;
    }

    @@media (max-width:1024px) {
        .top-panel {
            flex-direction: column;
            margin-left: 0;
            margin-right: 0
        }

        .left-col {
            width: 100%;
            flex: 0 0 auto;
        }

        .right-col {
            min-width: 0;
        }

        .left-sidebar-mini, .right-sidebar-mini {
            display: none;
        }

        table {
            min-width: 900px;
        }

        .input-panel-wrapper {
            margin-left: 0;
            margin-right: 0;
        }
    }
</style>
<div class="container-wire">
  <div class="page-header">Retirement Drawdown</div>

  <div class="top-area">
    <nav class="left-sidebar-mini">
      <div style="font-weight:700; margin-bottom:8px;">Quick Links</div>
      <div style="display:flex; flex-direction:column; gap:6px;">
        <a href="/" class="badge">Home</a>
        <a href="/guides/how-to-use-drawdown-calculator" class="badge">How to</a>
        <a href="/contact" class="badge">Contact</a>
      </div>
      <div style="margin-top:10px; font-size:0.85rem; color:var(--muted);">Mini summary</div>
      <div style="margin-top:6px; background:#f8fafc; padding:8px; border-radius:6px;">Post-Tax <br/><strong>@Model.TaxableBalance.ToString("C0")</strong></div>
    </nav>

    <nav class="right-sidebar-mini">
      <div style="font-weight:700; margin-bottom:8px; display:flex; justify-content:space-between; align-items:center;">
        <div>Debug</div>
        <div>
            <button class="btn-ghost" style="padding:4px 6px; font-size:0.8rem;" @onclick="ToggleRightDebug">Toggle</button>
        </div>
      </div>
      <div style="font-size:0.85rem; color:var(--muted);">Toggle messages</div>
      @if (ShowRightDebug)
      {
        <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:200px; overflow:auto;">
            @foreach (var msg in DebugService.Messages.OrderByDescending(m => m.MessageTime))
            {
                <div style="margin-bottom:6px;">
                    <small style="color:var(--muted);">@msg.MessageTime.ToString("HH:mm:ss")</small>
                    <div>@msg.MessageText</div>
                </div>
            }
        </div>
      }
      else
      {
        <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:120px; overflow:auto;">No messages</div>
      }
    </nav>

    <div class="input-panel-wrapper">
      <div class="top-panel">
        <div class="panel left-col">
          <h4>Inputs (Calendar years)</h4>

          <div class="form-row">
            <div>
              <label>Current Age (You)</label>
              <input class="narrow" type="number" @bind="Model.CurrentAgeYou" @oninput="OnInputChanged" />
            </div>
            <div>
              <label>Current Age (Partner)</label>
              <input class="narrow" type="number" @bind="Model.CurrentAgePartner" @oninput="OnInputChanged" />
            </div>
          </div>

          <div class="form-row">
            <div>
              <label>Retirement Age (You)</label>
              <input class="narrow" type="number" @bind="Model.RetirementAgeYou" @oninput="OnInputChanged" />
            </div>
            <div>
              <label>Retirement Age (Partner)</label>
              <input class="narrow" type="number" @bind="Model.RetirementAgePartner" @oninput="OnInputChanged" />
            </div>
          </div>

          <div class="form-row">
            <div>
              <label>Retirement Year (You)</label>
              <input class="narrow" type="text" value="@Model.RetirementYearYou" readonly />
            </div>
            <div>
              <label>Retirement Year (Partner)</label>
              <input class="narrow" type="text" value="@Model.RetirementYearPartner" readonly />
            </div>
          </div>

          <div class="form-row">
            <div>
              <label>SS Start Year (You)</label>
              <input class="narrow" type="number" @bind="Model.SSStartYearYou" />
            </div>
            <div>
              <label>SS Start Year (Partner)</label>
              <input class="narrow" type="number" @bind="Model.SSStartYearPartner" />
            </div>
          </div>

          <div class="form-row">
            <div>
              <label>Life Expectancy Year (You)</label>
              <input class="narrow" type="number" @bind="Model.LifeExpectancyYou" />
            </div>
            <div>
              <label>Life Expectancy Year (Partner)</label>
              <input class="narrow" type="number" @bind="Model.LifeExpectancyPartner" />
            </div>
          </div>

          <div style="margin-top:8px; display:flex; gap:8px; align-items:center;">
            <div style="flex:1;">
              <label>Simulation Start Year</label>
              <input class="narrow" type="number" @bind="Model.SimulationStartYear" />
              <div class="small-note">Simulation runs by calendar year between start and latest life expectancy.</div>
            </div>
            <div style="display:flex; flex-direction:column; align-items:flex-end; gap:4px;">
              <label style="visibility:hidden">auto</label>
              <div style="display:flex; align-items:center; gap:6px;">
                <input type="checkbox" id="autocalc" @bind="Model.AutoCalculate" />
                <label for="autocalc">Auto-calc</label>
              </div>
            </div>
          </div>

          <div class="actions">
            <button class="btn btn-ghost" @onclick="Save">Save</button>
            <button class="btn btn-primary" @onclick="Calculate">Calculate</button>
          </div>
        </div>

        <div class="panel right-col">
          <h4>Money & flows (starting balances = at first retire year)</h4>

          <div class="form-row">
            <div>
              <label>Taxable Balance</label>
              <FormattedNumberNew class="form-control" @bind-Value="Model.TaxableBalance" Decimals="0" @oninput="OnInputChanged" />
            </div>
            <div>
              <label>Traditional Balance</label>
              <FormattedNumberNew class="form-control" @bind-Value="Model.TraditionalBalance" Decimals="0" @oninput="OnInputChanged" />
            </div>
          </div>

          <div class="form-row">
            <div>
              <label>Roth Balance</label>
              <FormattedNumberNew class="form-control" @bind-Value="Model.RothBalance" Decimals="0" @oninput="OnInputChanged" />
            </div>
            <div>
              <label>Traditional Tax Rate (%)</label>
              <input class="narrow" type="number" step="0.1" @bind="Model.TraditionalTaxRate" @oninput="OnInputChanged" />
            </div>
          </div>

          <div class="form-row">
            <div>
              <label>Investment Return (%)</label>
              <input class="narrow" type="number" step="0.1" @bind="Model.InvestmentReturn" @oninput="OnInputChanged" />
            </div>
            <div>
              <label>Inflation (%)</label>
              <input class="narrow" type="number" step="0.1" @bind="Model.InflationRate" @oninput="OnInputChanged" />
            </div>
          </div>

          <hr style="margin:8px 0; border:none; border-top:1px solid #f1f3f5;">

          <h4 style="margin-top:6px;">Phase withdrawals</h4>

          <div class="form-row">
            <div>
              <label>Annual Withdrawal: One Retired</label>
              <FormattedNumberNew class="form-control" @bind-Value="Model.AnnualWithdrawalOne" Decimals="0" @oninput="OnInputChanged" />
            </div>
            <div>
              <label>Annual Withdrawal: Both Retired</label>
              <FormattedNumberNew class="form-control" @bind-Value="Model.AnnualWithdrawalBoth" Decimals="0" @oninput="OnInputChanged" />
            </div>
          </div>

          <div class="form-row">
            <div>
              <label>Reverse Mortgage Start Year</label>
              <input class="narrow" type="number" @bind="Model.ReverseMortgageStartYear" @oninput="OnInputChanged" />
            </div>
            <div>
              <label>Reverse Mortgage Monthly ($)</label>
              <FormattedNumberNew class="narrow form-control" @bind-Value="Model.ReverseMortgageMonthly" Decimals="0" @oninput="OnInputChanged" />
            </div>
          </div>

          <div style="margin-top:6px;">
            <label>Partial retirement (optional)</label>
            <div class="form-row">
              <div>
                <input class="narrow" type="number" @bind="Model.PartialRetirementStart" placeholder="start year" @oninput="OnInputChanged" />
              </div>
              <div>
                <input class="narrow" type="number" @bind="Model.PartialRetirementEnd" placeholder="end year" @oninput="OnInputChanged" />
              </div>
            </div>
            <div style="margin-top:6px;">
              <label>Part-time annual income</label>
              <FormattedNumberNew class="form-control" @bind-Value="Model.PartTimeIncome" Decimals="0" @oninput="OnInputChanged" />
            </div>
          </div>

          <div class="small-note" style="margin-top:8px;">
              Current ages are requested to show ages in labels/charts but simulation uses calendar years for calculations.
          </div>

        </div>
      </div>
    </div>
  </div>

  <!-- Full-width grid placeholder -->
  <div class="grid-panel panel">
    <div class="grid-header">
      <div style="font-weight:800; font-size:1rem;">Yearly Simulation</div>
      <div class="legend">
        <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--brand-yellow)"></span><small> Milestone</small></div>
        <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--success)"></span><small> Growth</small></div>
        <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--danger)"></span><small> Depletion</small></div>
      </div>
    </div>

    <div class="grid">
      <table aria-label="Yearly grid wireframe">
        <thead>
          <tr>
            <th class="col-year">Year</th>
            <th class="col-age">Age You</th>
            <th class="col-age">Age Partner</th>
            <th class="col-milestones">Milestones</th>
            <th>SS (You)</th>
            <th>SS (Partner)</th>
            <th>Reverse Mortgage</th>
            <th>Withdrawal Taxable</th>
            <th>Withdrawal Traditional</th>
            <th>Withdrawal Roth</th>
            <th>Taxes Paid</th>
            <th>Growth</th>
            <th>Ending Taxable</th>
            <th>Ending Traditional</th>
            <th>Ending Roth</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          @foreach(var row in YearRows)
          {
            var rowClass = string.IsNullOrEmpty(row.Notes) ? string.Empty : "depleted";
            <tr class="@rowClass">
              <td class="col-year">@row.Year</td>
              <td class="col-age">@row.AgeYou</td>
              <td class="col-age">@row.AgePartner</td>
              <td class="col-milestones">@row.Milestone</td>
              <td class="money-cell">@row.SSYou.ToString("C0")</td>
              <td class="money-cell">@row.SSPartner.ToString("C0")</td>
              <td class="money-cell">@row.ReverseMortgage.ToString("C0")</td>
              <td class="money-cell">@row.TaxableWithdrawal.ToString("C0")</td>
              <td class="money-cell">@row.TraditionalWithdrawal.ToString("C0")</td>
              <td class="money-cell">@row.RothWithdrawal.ToString("C0")</td>
              <td class="money-cell">@row.TaxesPaid.ToString("C0")</td>
              <td class="money-cell">@row.Growth.ToString("C0")</td>
              <td class="money-cell">@row.EndingTaxable.ToString("C0")</td>
              <td class="money-cell">@row.EndingTraditional.ToString("C0")</td>
              <td class="money-cell">@row.EndingRoth.ToString("C0")</td>
              <td>@row.Notes</td>
            </tr>
          }
        </tbody>
      </table>
    </div>
  </div>

</div>
