@using System.ComponentModel.DataAnnotations
@using FinPlan.Web.Components

<div class="card mb-4">
    <div class="card-header">
        <h3>@Title</h3>
    </div>
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleCalculate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Initial Taxable Amount</label>
                    <InputNumber @bind-Value="Model.InitialTaxableAmount" class="form-control" />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Initial Traditional Amount</label>
                    <InputNumber @bind-Value="Model.InitialTraditionalAmount" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Initial Roth Amount</label>
                    <InputNumber @bind-Value="Model.InitialRothAmount" class="form-control" />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Monthly Taxable Contribution</label>
                    <InputNumber @bind-Value="Model.MonthlyTaxableContribution" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Monthly Traditional Contribution</label>
                    <InputNumber @bind-Value="Model.MonthlyTraditionalContribution" class="form-control" />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Monthly Roth Contribution</label>
                    <InputNumber @bind-Value="Model.MonthlyRothContribution" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Annual Growth Rate (%)</label>
                    <InputNumber @bind-Value="Model.AnnualGrowthRate" class="form-control" step="0.1" />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label">Current Age</label>
                    <InputNumber @bind-Value="Model.CurrentAge" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 mb-3">
                    <label class="form-label">Retirement Age</label>
                    <InputNumber @bind-Value="Model.RetirementAge" class="form-control" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Calculate</button>
        </EditForm>
        @if (Results != null)
        {
            <div class="mt-4">
                <h5>Results</h5>
                <ul>
                    <li><strong>Final Amount:</strong> @Results.FinalAmount.ToString("C")</li>
                    <li><strong>Total Contributions:</strong> @Results.TotalContributions.ToString("C")</li>
                    <li><strong>Total Interest Earned:</strong> @Results.TotalInterestEarned.ToString("C")</li>
                </ul>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Savings";
    [Parameter] public SavingsCalculatorModel Model { get; set; } = new();
    [Parameter] public SavingsResults? Results { get; set; }
    [Parameter] public EventCallback<SavingsCalculatorModel> OnCalculate { get; set; }

    private void HandleCalculate()
    {
        OnCalculate.InvokeAsync(Model);
    }

    public class SavingsCalculatorModel
    {
        [Required]
        [Range(18, 100)]
        public int CurrentAge { get; set; } = 30;
        [Required]
        [Range(50, 100)]
        public int RetirementAge { get; set; } = 65;
        [Required]
        [Range(0, double.MaxValue)]
        public decimal InitialTaxableAmount { get; set; } = 0;
        [Required]
        [Range(0, double.MaxValue)]
        public decimal InitialTraditionalAmount { get; set; } = 0;
        [Required]
        [Range(0, double.MaxValue)]
        public decimal InitialRothAmount { get; set; } = 0;
        [Required]
        [Range(0, double.MaxValue)]
        public decimal MonthlyTaxableContribution { get; set; } = 0;
        [Required]
        [Range(0, double.MaxValue)]
        public decimal MonthlyTraditionalContribution { get; set; } = 0;
        [Required]
        [Range(0, double.MaxValue)]
        public decimal MonthlyRothContribution { get; set; } = 0;
        [Required]
        [Range(0, 50)]
        public decimal AnnualGrowthRate { get; set; } = 7;
    }

    public class SavingsResults
    {
        public decimal FinalAmount { get; set; }
        public decimal TotalContributions { get; set; }
        public decimal TotalInterestEarned { get; set; }
    }

    public class SavingsCalculationEngine
    {
        public SavingsResults Calculate(SavingsCalculatorModel model)
        {
            decimal monthlyRate = model.AnnualGrowthRate / 100 / 12;
            int totalMonths = (model.RetirementAge - model.CurrentAge) * 12;
            decimal balance = model.InitialTaxableAmount + model.InitialTraditionalAmount + model.InitialRothAmount;
            decimal totalContributions = balance;
            decimal totalInterest = 0;
            decimal monthlyContribution = model.MonthlyTaxableContribution + model.MonthlyTraditionalContribution + model.MonthlyRothContribution;
            for (int i = 0; i < totalMonths; i++)
            {
                decimal interest = balance * monthlyRate;
                balance += interest + monthlyContribution;
                totalInterest += interest;
                totalContributions += monthlyContribution;
            }
            return new SavingsResults
            {
                FinalAmount = Math.Round(balance, 2),
                TotalContributions = Math.Round(totalContributions, 2),
                TotalInterestEarned = Math.Round(totalInterest, 2)
            };
        }
    }
}
