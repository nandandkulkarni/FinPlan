@page "/retirement-income-planner"
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using FinPlan.Web.Components
@using FinPlan.Shared.Models.Spending
@using FinPlan.Web.Components.Shared
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json
@using System.Text

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@namespace FinPlan.Web.Components.Pages

<PageTitle>Retirement Income Planner</PageTitle>

<!-- Retirement input wizard: shown when _isDataAvaiableForTheUser is true -->
<RetirementInputWizard Model="@Model"
                       Visible="@_isDataAvaiableForTheUser"
                       VisibleChanged="@(v => _isDataAvaiableForTheUser = v)"
                       OnFinished="HandleWizardFinished"
                       OnSave="Save"
                       InitialStep="@_wizardOpenStep" />

<!-- Sample Data Modal -->
<SetupRetirementSampeData Visible="@showSampleDataModal"
                          OnClose="@(() => showSampleDataModal = false)"
                          OnSampleDataSelected="HandleSampleDataSelected" />

<style>
    :root {
        --fp-accent: #1F6FEB;
        --fp-accent-contrast: #ffffff;
    }

    /* Reusable action button with solid blue border + variants */
    .btn-outline-accent {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.45rem 0.9rem;
        font-size: 0.95rem;
        font-weight: 600;
        color: var(--fp-accent);
        background: transparent;
        border: 2px solid var(--fp-accent);
        border-radius: 8px;
        cursor: pointer;
        transition: background 120ms ease, box-shadow 120ms ease, transform 60ms ease;
        text-decoration: none;
    }

        /* Hover / focus / active */
        .btn-outline-accent:hover {
            background: rgba(31,111,235,0.06);
            box-shadow: 0 8px 20px rgba(31,111,235,0.08);
            transform: translateY(-1px);
        }

        .btn-outline-accent:active {
            transform: translateY(0);
            box-shadow: 0 4px 10px rgba(31,111,235,0.06);
        }

        .btn-outline-accent:focus {
            outline: none;
            box-shadow: 0 0 0 4px rgba(31,111,235,0.12);
        }

    /* Solid filled variant (use when you need stronger emphasis) */
    .btn-outline-accent--solid {
        background: var(--fp-accent);
        color: var(--fp-accent-contrast);
        border-color: var(--fp-accent);
    }

    /* Ghost / low-emphasis variant */
    .btn-outline-accent--ghost {
        background: transparent;
        color: var(--fp-accent);
        border-color: rgba(31,111,235,0.12);
    }

    /* Small / compact */
    .btn-outline-accent--sm {
        padding: 0.3rem 0.6rem;
        font-size: 0.85rem;
    }

    /* Utility: align actions container */
    .actions {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
        align-items: center;
    }
</style>
<!-- Intro Modal - Moved outside blurred wrapper -->
@if (showIntroModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal d-block" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered modal-lg modal-fullscreen-sm-down">
            <div class="modal-content" style="border-top: 4px solid #FFD600;">
                <div class="d-block d-md-none"><br><br /></div>

                <div class="modal-header bg-light">
                    <h5 class="modal-title">
                        <i class="bi bi-graph-up-arrow text-warning me-2"></i>Welcome to Retirement Planning!
                    </h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseIntroModal"></button>
                </div>

                <div class="modal-body" style="background-color: #fffef7;">
                    <div class="text-center mb-4">
                        <div style="font-size: 3rem; margin-bottom: 12px;">🎯</div>
                        <p class="text-muted mb-0">
                            Let's create your personalized retirement income plan. We'll walk you through setting up your ages, account balances,
                            Social Security, and withdrawal strategy in just a few quick steps.
                        </p>
                    </div>

                    <!-- Action Buttons -->
                    <div class="d-flex gap-3 justify-content-center mb-3 flex-wrap">
                        <button class="btn btn-primary btn-lg px-4" @onclick="() => { OpenWizard(1); CloseIntroModal(); }">
                            <i class="bi bi-play-circle me-2"></i>Start Planning
                        </button>
                        <button class="btn btn-outline-primary btn-lg px-4"
                                @onclick="() => { showSampleDataModal = true; CloseIntroModal(); }">
                            <i class="bi bi-clipboard-data me-2"></i>Try Sample Data
                        </button>
                    </div>

                    <!-- Don't Show Again -->
                    <div class="text-center pt-3 border-top">
                        <div class="form-check d-inline-flex align-items-center">
                            <input class="form-check-input me-2" type="checkbox"
                                   id="dontShowIntroAgainCheck" @onchange="OnDontShowIntroChanged" />
                            <label class="form-check-label small text-muted" for="dontShowIntroAgainCheck">
                                Don't show this welcome screen again
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Main content - hide on mobile, blur on desktop when modal is open -->
<div class="@(showIntroModal ? "intro-modal-active" : "")">
    <style>
        .col-milestones {
            width: 150px; /* Adjusted to match the header size */
            overflow-x: auto; /* Enable horizontal scrolling */
            white-space: nowrap; /* Prevent text wrapping */
        }
    </style>

    <style>
        :root {
            --brand-yellow: #FFD600;
            --muted: #6c757d;
            --bg: #f8f9fa;
            --card-bg: #ffffff;
            --card-radius: 10px;
            --accent: #1F6FEB; /* Changed from #6D5DFC (purple) to #1F6FEB (blue) */
            --danger: #F56565;
            --success: #38B2AC;
            --info: #4FD1C5;
            --financial-blue: #2563EB;
            --financial-gray: #6B7280;
            --financial-green: #059669;
            --financial-amber: #D97706;
            --background-subtle: #F8FAFC;
        }

        .projection-cards {
            margin-bottom: 12px; /* ~3-4mm on most screens */
        }

        .survey-card {
            border-right: 8px solid #1F6FEB !important;
            border-top: 1px solid #e9ecef;
            border-bottom: 1px solid #e9ecef;
            border-left: 1px solid #e9ecef;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(31,111,235,0.08);
            background: #fff;
        }

        .survey-card-narrow {
            width: 75%;
            min-width: 180px;
            max-width: 320px;
            margin-left: 0;
            margin-right: auto;
            align-self: flex-start;
        }

        .missing-badge {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 0.7rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
        }

        .incomplete-section {
            border: 1px solid rgba(220, 53, 69, 0.3);
            box-shadow: 0 2px 8px rgba(220, 53, 69, 0.1);
        }

        .info-icon {
            font-size: 0.85rem;
            color: #1F6FEB;
            cursor: pointer;
            margin-right: 0.25rem;
            transition: transform 0.2s ease, color 0.2s ease;
        }

            .info-icon:hover {
                transform: scale(1.1);
                color: #0E62DA;
            }

        .info-tooltip {
            background-color: #EBF5FF;
            border: 1px solid #BEDAFF;
            border-radius: 6px;
            padding: 0.5rem 1rem;
            margin-top: 0.25rem;
            margin-bottom: 0.5rem;
            font-size: 0.85rem;
            position: relative;
            line-height: 1.4;
        }

        thead th {
            position: sticky;
            top: 0;
            background: #fff;
            padding: 10px 12px;
            border-bottom: 2px solid #d1d5db;
            text-align: left;
            font-weight: 700;
            color: #333;
        }

        .col-income-sources {
            background-color: rgba(5, 150, 105, 0.02);
            border-left: 1px solid #059669;
        }

        .col-account-activity {
            background-color: rgba(37, 99, 235, 0.02);
            border-left: 1px solid #2563EB;
        }

        .col-ending-balances {
            background-color: rgba(107, 114, 128, 0.02);
            border-left: 1px solid #6B7280;
        }

        .container-wire {
            padding: 14px;
        }

        .page-header {
            text-align: center;
            font-weight: 700;
            font-size: 1.45rem;
            margin-bottom: 12px;
            color: #111;
        }

        .top-area {
            position: relative;
        }

        .panel {
            background: var(--card-bg);
            border-radius: var(--card-radius);
            box-shadow: 0 6px 18px rgba(22,28,36,0.06);
            padding: 12px;
            border: 1px solid rgba(0,0,0,0.03);
            display: flex;
            flex-direction: column;
            flex: 1 1 0%;
        }

        .section-card {
            border: 1px solid rgba(16,24,36,0.12);
            padding: 10px;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            min-height: 92px;
            background: #fff;
        }

            .section-card .actions {
                margin-top: auto;
                display: flex;
                justify-content: flex-start;
                gap: 8px;
                padding-top: 16px; /* Increased from 6px to 16px for more space */
            }
        /* .section-card .actions {
                                                                margin-top: auto;
                                                                display: flex;
                                                                justify-content: flex-start;
                                                                gap: 8px;
                                                                padding-top: 6px;
                                                            } */

        .btn-update {
            background: #1F6FEB;
            color: #ffffff;
            border: 0;
            padding: 7px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
        }

        /* Keep old class name for backward compatibility */
        .btn-edit {
            background: #1F6FEB;
            color: #ffffff;
            border: 0;
            padding: 7px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
        }

        .section-panel {
            border: 3px solid var(--brand-yellow);
            border-radius: 10px;
            box-shadow: 0 12px 30px rgba(13,38,76,0.06), 0 4px 18px rgba(255,214,0,0.08);
            padding: 14px;
            background: linear-gradient(180deg, #fff, #fff);
        }

        .panel h4 {
            margin: 0 0 8px 0;
            font-size: 1.12rem;
            color: #111;
        }

        .small-note {
            font-size: 0.9rem;
            color: var(--muted);
            margin-top: 4px;
        }

        .btn {
            padding: 7px 10px;
            border-radius: 8px;
            border: 0;
            cursor: pointer;
            font-weight: 600;
            font-size: 1.05rem;
        }

        .btn-primary {
            background: var(--accent);
            color: white;
            box-shadow: 0 6px 20px rgba(109,93,252,0.12);
        }

        .btn-ghost {
            background: transparent;
            border: 1px solid #e6e9ee;
            color: #333;
        }

        .btn-outline-danger {
            background: transparent;
            border: 2px solid #F56565;
            color: #F56565;
        }

        .badge {
            display: inline-block;
            padding: 6px 8px;
            border-radius: 999px;
            font-size: 0.85rem;
            background: #f1f3f5;
            color: #222;
            margin-right: 6px;
        }

        .grid-panel {
            margin-top: 12px;
        }

        .grid-header {
            display: flex;
            gap: 12px;
            align-items: center;
            margin-bottom: 8px;
        }

        .grid {
            width: 100%;
            border-radius: 8px;
            overflow: auto;
            background: #fff;
            border: 1px solid #e9ecef;
            box-shadow: 0 8px 24px rgba(12,18,30,0.04);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.98rem;
            min-width: 1100px;
        }

        tbody td {
            padding: 8px 12px;
            border-bottom: 1px solid #f2f4f7;
            vertical-align: middle;
        }

        .col-year {
            width: 80px;
            font-weight: 700;
        }

        .col-age {
            width: 70px;
            color: var(--muted);
        }

        .col-milestones {
            width: 200px;
        }

        .legend {
            margin-left: auto;
            display: flex;
            gap: 8px;
            align-items: center;
            font-size: 0.95rem;
            color: var(--muted);
        }

            .legend .swatch {
                width: 14px;
                height: 14px;
                border-radius: 4px;
                display: inline-block;
            }

        .step-badge {
            width: 36px;
            height: 36px;
            min-width: 36px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background: var(--brand-yellow);
            color: #111;
            font-weight: 800;
            font-size: 1rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.12);
            margin-right: 8px;
            margin-bottom: 12px; /* Added margin-bottom for spacing */
            flex-shrink: 0;
        }

        /* .step-badge {
                                                            width: 36px;
                                                            height: 36px;
                                                            min-width: 36px;
                                                            border-radius: 50%;
                                                            display: inline-flex;
                                                            align-items: center;
                                                            justify-content: center;
                                                            background: var(--brand-yellow);
                                                            color: #111;
                                                            font-weight: 800;
                                                            font-size: 1rem;
                                                            box-shadow: 0 4px 12px rgba(0,0,0,0.12);
                                                            margin-right: 8px;
                                                            flex-shrink: 0;
                                                        } */

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 10px;
        }

        .partial-state {
            border: 2px solid #ffc107;
            background: #fff3cd;
            padding: 20px;
            border-radius: 10px;
        }

        /* Field Preview Styles */
        .field-preview {
            filter: grayscale(10%);
            opacity: 1.00;
            pointer-events: none;
            user-select: none;
        }

        .preview-card {
            background: #f8f9fa !important;
            border-color: #dee2e6 !important;
        }

            .preview-card .step-badge {
                opacity: 0.9;
            }

        .start-planning-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.4);
            backdrop-filter: blur(1px);
            z-index: 10;
        }

            .start-planning-overlay .empty-state {
                background: rgba(255, 255, 255, 0.95);
                border: 2px solid var(--brand-yellow);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                max-width: 500px;
                margin: 20px;
            }

        /* Modal backdrop and blur effect */
        .intro-modal-active {
            /* Mobile: completely hide content */
            display: none;
        }

        /* Desktop/Laptop: show but blur */
        @@media (min-width: 992px) {
            .intro-modal-active {
                display: block;
                filter: blur(8px);
                pointer-events: none;
                user-select: none;
                opacity: 0.6;
            }
        }

        /* Ensure modal backdrop is solid on mobile */
        @@media (max-width: 991px) {
            .modal-backdrop {
                opacity: 1 !important;
                background-color: #fff !important;
            }
        }

        /* Make sure modal stays on top and centered */
        .modal.d-block {
            display: flex !important;
            align-items: center;
            justify-content: center;
        }

        @@media (max-width:1024px) {
            table {
                min-width: 900px;
            }
        }

        /* ===== MOBILE RESPONSIVE STYLES ===== */
        @@media (max-width: 767px) {
            /* Section cards - stack vertically on mobile */
            .section-card {
                width: 100% !important;
                margin-bottom: 12px;
            }
                /* Buttons in section cards - full width and larger tap targets */
                .section-card .actions {
                    flex-direction: column;
                    gap: 10px;
                }

                .section-card .btn-edit,
                .section-card .btn-update,
                .section-card .btn-ghost {
                    width: 100%;
                    min-height: 44px;
                    padding: 12px;
                    font-size: 1rem;
                }
            /* Projection cards - stack vertically on mobile */
            .projection-cards {
                flex-direction: column !important;
                gap: 10px !important;
                align-items: stretch !important;
            }

            .macro-card {
                width: 100% !important;
                min-width: 100% !important;
                max-width: 100% !important;
                flex-direction: row !important;
                justify-content: space-between !important;
                padding: 12px 16px !important;
                min-height: 80px !important;
            }

                .macro-card .card-label {
                    text-align: left !important;
                    font-size: 0.9rem !important;
                }

                .macro-card .card-value {
                    font-size: 1.1rem !important;
                    text-align: right !important;
                }

                .macro-card .bi {
                    font-size: 1.5rem !important;
                    margin-bottom: 0 !important;
                    margin-right: 12px !important;
                }
            /* Table projection - enable horizontal scrolling */
            .grid {
                overflow-x: auto !important;
                -webkit-overflow-scrolling: touch;
                border-radius: 4px;
            }

            table {
                min-width: 900px;
                font-size: 0.85rem !important;
            }

            thead th {
                padding: 8px 6px !important;
                font-size: 0.8rem !important;
                white-space: nowrap;
            }

            tbody td {
                padding: 6px 6px !important;
                font-size: 0.85rem !important;
            }

            .money-cell {
                font-size: 0.8rem !important;
            }
            /* Tooltips - better positioning and sizing for mobile */
            .info-tooltip {
                position: fixed !important;
                left: 10px !important;
                right: 10px !important;
                top: 50% !important;
                transform: translateY(-50%) !important;
                max-width: calc(100vw - 20px) !important;
                min-width: auto !important;
                width: calc(100vw - 20px) !important;
                font-size: 0.9rem !important;
                padding: 20px !important;
                z-index: 10000 !important;
            }

                .info-tooltip::before {
                    display: none !important;
                }

                .info-tooltip .float-end {
                    font-size: 1.5rem !important;
                    width: 32px !important;
                    height: 32px !important;
                    top: 10px !important;
                    right: 10px !important;
                }

            .info-icon {
                font-size: 1.1rem !important;
                padding: 4px !important;
                min-width: 28px !important;
                min-height: 28px !important;
            }
            /* General button improvements for mobile */
            .btn, .btn-primary, .btn-outline-danger {
                min-height: 44px !important;
                padding: 10px 16px !important;
                font-size: 0.95rem !important;
            }
            /* General padding and margin reductions for mobile */
            .container-wire, .container-fluid {
                padding-left: 8px !important;
                padding-right: 8px !important;
            }

            .panel {
                padding: 10px !important;
            }

            .section-panel {
                padding: 10px !important;
            }

            .page-header h3 {
                font-size: 1.3rem !important;
            }
            /* Survey card - full width on mobile */
            .survey-card-narrow {
                width: 100% !important;
                max-width: 100% !important;
                margin-bottom: 12px;
            }
            /* Alert boxes - reduce padding */
            .alert {
                padding: 10px !important;
                font-size: 0.85rem !important;
            }
            /* Small note text */
            .small-note {
                font-size: 0.8rem !important;
            }
            /* Plan sections grid - convert to accordion-style vertical list on mobile */
            .plan-sections-grid {
                display: flex !important;
                flex-direction: column !important;
                gap: 0 !important;
            }

                .plan-sections-grid .section-card {
                    width: 100% !important;
                    border-radius: 0 !important;
                    border-bottom: 1px solid #dee2e6 !important;
                    margin-bottom: 0 !important;
                }

                    .plan-sections-grid .section-card:first-child {
                        border-radius: 8px 8px 0 0 !important;
                    }

                    .plan-sections-grid .section-card:last-child {
                        border-radius: 0 0 8px 8px !important;
                        border-bottom: none !important;
                    }
            /* Header action buttons - stack on mobile */
            div[style*="justify-content: flex-end"] {
                flex-direction: column !important;
                gap: 10px !important;
                align-items: stretch !important;
            }

                div[style*="justify-content: flex-end"] button {
                    width: 100% !important;
                    min-height: 44px !important;
                    padding: 10px 16px !important;
                }
            /* Ensure header section stacks properly */
            div[style*="justify-content: space-between"] {
                flex-direction: column !important;
                gap: 12px !important;
            }

                div[style*="justify-content: space-between"] h5 {
                    position: static !important;
                    transform: none !important;
                    text-align: center !important;
                }
        }

        /* Large Mode Toggle Styles - Same as Cost of Living */
        .form-switch .form-check-input {
            transition: all 0.2s ease;
        }

            .form-switch .form-check-input:checked {
                background-color: #0d6efd;
                border-color: #0d6efd;
            }

            .form-switch .form-check-input:focus {
                box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.2);
            }

        /* Large form switch for prominent toggle */
        .form-switch-lg .form-check-input {
            width: 3rem !important;
            height: 1.5rem !important;
            background-color: #6c757d;
            border: none;
            transition: all 0.3s ease;
        }

            .form-switch-lg .form-check-input:checked {
                background-color: #0d6efd;
                box-shadow: 0 0 8px rgba(13, 110, 253, 0.3);
            }

            .form-switch-lg .form-check-input:focus {
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            }

        .mode-toggle-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: 2px solid #dee2e6;
            transition: all 0.3s ease;
            border-radius: 12px;
            padding: 1rem 1.5rem;
            margin-bottom: 1rem;
        }

        .simple-mode .mode-toggle-header {
            background: linear-gradient(135deg, #d1e7dd 0%, #a3cfbb 100%);
            border-bottom: 2px solid #75b798;
        }
    </style>

    <div class="container-wire">
        <div class="page-header">
            <h3>Retirement Income Planner</h3>
        </div>

        <!-- Confirmation modal for clearing -->
        @if (showClearConfirm)
        {
            <div class="modal-backdrop fade show" style="z-index:1040"></div>
            <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                <div class="modal-dialog modal-sm" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm clear</h5>
                            <button type="button" class="btn-close" aria-label="Close" @onclick="() => showClearConfirm = false"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to clear all saved values? This will reset your plan and cannot be undone.</p>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-ghost" @onclick="() => showClearConfirm = false">Cancel</button>
                            <button class="btn btn-outline-danger" @onclick="PerformClearAll">Clear all</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Result modal (after clear) -->
        @if (showClearResult)
        {
            <div class="modal-backdrop fade show" style="z-index:1040"></div>
            <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                <div class="modal-dialog modal-sm" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Clear result</h5>
                            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseClearResult"></button>
                        </div>
                        <div class="modal-body">
                            @if (clearSucceeded)
                            {
                                <p>All saved values were cleared successfully.</p>
                            }
                            else
                            {
                                <p>Clear failed. Your data may not have been removed from the server. The local plan was reset.</p>
                            }
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-primary" @onclick="CloseClearResult">OK</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="top-area">
            <div class="container-fluid">
                <div class="row g-3">
                    <!-- Left mini column (2) -->
                    <div class="col-12 col-md-2">
                        @if (showSurvey)
                        {
                            <div class="card survey-card survey-card-narrow mb-2">
                                <div class="card-body text-center">
                                    <i class="bi bi-chat-dots" style="font-size:2rem; color:#1F6FEB;"></i>
                                    <div class="fw-bold mt-2 mb-1">Share Your Feedback</div>
                                    <a href="/survey-retirement-income-planner" class="btn btn-primary btn-sm">
                                        Take Retirement Survey
                                    </a>
                                </div>
                            </div>
                        }
                        <!-- Ad container for long Adsterra banner in left column -->
                    </div>

                    <!-- Center combined column (8) -> Sections -->
                    <div class="col-12 col-md-8">
                        @if (!Model.IsModelEmpty() && YearRows.Count > 1)
                        {
                            <div class="projection-cards">
                                @if (isSimpleMode)
                                {
                                    <!-- Simplified macro cards for beginners -->
                                    <div class="macro-card" tabindex="0" role="button" aria-label="Retirement timeline"
                                         style="background: #FFD600; color: #333; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 200px; display: flex; flex-direction: column; align-items: center; padding: 16px;">
                                        <span class="bi bi-calendar-heart" style="font-size:2rem; margin-bottom:8px; color:#333;"></span>
                                        <div class="card-label" style="font-weight:700; color:#333;">Your Retirement Plan</div>
                                        <div class="card-value" style="font-size:1.1rem; color:#333;">@GetProjectionRangeText()</div>
                                        <small class="text-muted mt-1 text-center">Planning period for your retirement</small>
                                    </div>

                                    <div class="macro-card" tabindex="0" role="button" aria-label="Money status"
                                         style="background: @(GetDepletionText().Contains("Never") ? "#38B2AC" : "#F56565"); color: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 200px; display: flex; flex-direction: column; align-items: center; padding: 16px;">
                                        <span class="bi @(GetDepletionText().Contains("Never") ? "bi-check-circle" : "bi-exclamation-triangle")" style="font-size:2rem; margin-bottom:8px; color:#fff;"></span>
                                        <div class="card-label" style="font-weight:700; color:#fff;">Money Status</div>
                                        <div class="card-value" style="font-size:1.1rem; color:#fff;">
                                            @(GetDepletionText().Contains("Never") ? "✓ Looks Good" : "⚠ Needs Attention")
                                        </div>
                                        <small class="text-white-50 mt-1 text-center">
                                            @(GetDepletionText().Contains("Never") ? "Your money should last" : "You may run short")
                                        </small>
                                    </div>

                                    <div class="macro-card" tabindex="0" role="button" aria-label="Final amount remaining"
                                         style="background: #6D5DFC; color: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 200px; display: flex; flex-direction: column; align-items: center; padding: 16px;">
                                        <span class="bi bi-piggy-bank" style="font-size:2rem; margin-bottom:8px; color:#fff;"></span>
                                        <div class="card-label" style="font-weight:700; color:#fff;">Money Left Over</div>
                                        <div class="card-value" style="font-size:1.1rem; color:#fff;">@GetFinalPortfolioText()</div>
                                        <small class="text-white-50 mt-1 text-center">Estimated at end of plan</small>
                                    </div>
                                }
                                else
                                {
                                    <!-- Advanced macro cards (original) -->
                                         <div class="macro-card" tabindex="0" role="button" aria-label="Runway years"
                                         style="background: #38B2AC; color: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 160px; display: flex; flex-direction: column; align-items: center;">
                                        <span class="bi bi-arrow-right-circle" style="font-size:2rem; margin-bottom:8px; color:#fff;"></span>
                                        <div class="card-label" style="font-weight:700; color:#fff;">Runway</div>
                                        <div class="card-value" style="font-size:1.2rem; color:#fff;">@GetRunwayYearsText()</div>
                                    </div>

                                                <div class="macro-card" tabindex="0" role="button" aria-label="Projected depletion"
                                         style="background: #F56565; color: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 160px; display: flex; flex-direction: column; align-items: center;">
                                        <span class="bi bi-exclamation-triangle" style="font-size:2rem; margin-bottom:8px; color:#fff;"></span>
                                        <div class="card-label" style="font-weight:700; color:#fff;">Projected depletion</div>
                                        <div class="card-value" style="font-size:1.2rem; color:#fff;">@GetDepletionText()</div>
                                    </div>
                               
                                    <div class="macro-card" tabindex="0" role="button" aria-label="Net shortfall last year"
                                         style="background: #805AD5; color: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 160px; display: flex; flex-direction: column; align-items: center;">
                                        <span class="bi bi-arrow-down-circle" style="font-size:2rem; margin-bottom:8px; color:#fff;"></span>
                                        <div class="card-label" style="font-weight:700; color:#fff;">Net shortfall (last year)</div>
                                        <div class="card-value" style="font-size:1.2rem; color:#fff;">@GetNetShortfallText()</div>
                                    </div>
                                    <div class="macro-card" tabindex="0" role="button" aria-label="Projection range"
                                         style="background: #FFD600; color: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 160px; display: flex; flex-direction: column; align-items: center;">
                                        <span class="bi bi-calendar-range" style="font-size:2rem; margin-bottom:8px; color:#222;"></span>
                                        <div class="card-label" style="font-weight:700; color:#222;">Projection range</div>
                                        <div class="card-value" style="font-size:1.2rem; color:#222;">@GetProjectionRangeText()</div>
                                    </div>

                                    <div class="macro-card" tabindex="0" role="button" aria-label="Final projected portfolio"
                                         style="background: #6D5DFC; color: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.07); min-width: 160px; display: flex; flex-direction: column; align-items: center;">
                                        <span class="bi bi-piggy-bank" style="font-size:2rem; margin-bottom:8px; color:#fff;"></span>
                                        <div class="card-label" style="font-weight:700; color:#fff;">Final portfolio (last year)</div>
                                        <div class="card-value" style="font-size:1.2rem; color:#fff;">@GetFinalPortfolioText()</div>
                                    </div>
                                }
                            </div>
                        }
                      

                       

                        <!-- Complete State - Normal View -->
                        <div class="panel section-panel">

                               <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; position: relative; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 12px; padding: 1rem 1.5rem;">
                                <div style="flex: 1;"></div>
                                <h5>
                                    Retirement Planner - Inputs
                                </h5>
                                <div style="display: flex; gap: 16px; flex: 1; justify-content: flex-end; align-items: center;">
                                    <button class="btn btn-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                                        <i class="bi bi-gear me-2"></i>
                                        Update Plan
                                    </button>
                                    <button class="btn btn-outline-danger" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="ClearDataAsync" title="Clear saved plan data for current calculator">
                                        <i class="bi bi-trash me-1"></i>
                                        Clear Plan Data
                                    </button>
                                </div>
                            </div>

                      @*       <!-- Prominent Mode Toggle Header - Same as Cost of Living -->
                         <div class="mode-toggle-header @(isSimpleMode ? "simple-mode" : "")">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
        <div>
            <h4 class="mb-1">Plan Input Data</h4>
            <p class="text-muted mb-0 small">Advanced retirement modeling with detailed projections</p>
        </div>
        <div class="border-start ps-0 ps-md-4 d-flex flex-column flex-md-row align-items-stretch gap-2 w-100 w-md-auto">
            <button class="btn btn-primary w-100 w-md-auto" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                <i class="bi bi-gear me-2"></i>
                Update Plan
            </button>
            <button class="btn btn-outline-danger w-100 w-md-auto" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="ClearDataAsync" title="Clear saved plan data">
                <i class="bi bi-trash me-1"></i>
                Clear Plan Data
            </button>
        </div>
    </div>
</div> *@

                            <div class="plan-sections-grid" style="display:grid; grid-template-columns: repeat(3, 1fr); gap:12px;">
                                <!-- Section 1: Retirement ages & life expectancy -->
                                <div class="section-card @(!IsRetirementAgesSectionComplete() ? "incomplete-section" : "")"
                                     style="background-color: rgba(255, 214, 0, 0.03); border-left: 3px solid var(--brand-yellow);">
                                    <div>
                                        <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                            <div style="display:flex; align-items:center; gap:8px;">
                                                <span class="step-badge">1</span>
                                                <div>@(isSimpleMode ? "When You'll Retire" : "Retirement ages & life expectancy")</div>
                                            </div>
                                            @if (!IsRetirementAgesSectionComplete())
                                            {
                                                <span style="font-size:0.75rem; color:#dc3545;">
                                                    <i class="bi bi-exclamation-circle"></i> @(isSimpleMode ? "Needed" : "Required fields missing")
                                                </span>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                                <span class="d-flex align-items-center">
                                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYourRetirementAge = !showToolTipYourRetirementAge" tabindex="0" title="Click for more info"></span>
                                                    You: @Model.RetirementAgeYou
                                                </span>
                                                @if (showToolTipYourRetirementAge)
                                                {
                                                    <div class="info-tooltip">
                                                        <strong>Your Retirement Age:</strong> The age at which you plan to stop working and begin your retirement. This affects how long your portfolio needs to last and when you'll start drawing from retirement accounts.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYourRetirementAge = false" title="Close">
                                                            <span class="bi bi-x-lg"></span>
                                                        </span>
                                                    </div>
                                                }
                                            @if (Model.RetirementAgeYou <= 0)
                                            {
                                                <span class="missing-badge">
                                                    <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                                </span>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                            
                                                <span class="d-flex align-items-center">
                                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipPartnerRetirementAge = !showToolTipPartnerRetirementAge" tabindex="0" title="Click for more info"></span>
                                                    Partner: @Model.RetirementAgePartner
                                                </span>
                                                @if (showToolTipPartnerRetirementAge)
                                                {
                                                    <div class="info-tooltip">
                                                        <strong>Partner's Retirement Age:</strong> The age at which your partner plans to retire. Different retirement ages between partners can affect income timing and withdrawal strategies.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipPartnerRetirementAge = false" title="Close">
                                                            <span class="bi bi-x-lg"></span>
                                                        </span>
                                                    </div>
                                                }
                                            
                                            @if (Model.RetirementAgePartner <= 0)
                                            {
                                                <span class="missing-badge">
                                                    <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                                </span>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                                <span class="d-flex align-items-center">
                                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYourLifeExpectancy = !showToolTipYourLifeExpectancy" tabindex="0" title="Click for more info"></span>
                                                    Life exp (You): @DisplayLifeExpectancyYou
                                                </span>
                                                @if (showToolTipYourLifeExpectancy)
                                                {
                                                    <div class="info-tooltip">
                                                        <strong>Your Life Expectancy:</strong> The age you expect to live to. Your retirement plan should ensure you don't outlive your savings. Consider adding a buffer to this estimate.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYourLifeExpectancy = false" title="Close">
                                                            <span class="bi bi-x-lg"></span>
                                                        </span>
                                                    </div>
                                                }
                                            @if (DisplayLifeExpectancyYou <= 0)
                                            {
                                                <span class="missing-badge">
                                                    <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                                </span>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                                <span class="d-flex align-items-center">
                                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipPartnerLifeExpectancy = !showToolTipPartnerLifeExpectancy" tabindex="0" title="Click for more info"></span>
                                                    Life exp (Partner): @DisplayLifeExpectancyPartner
                                                </span>
                                                @if (showToolTipPartnerLifeExpectancy)
                                                {
                                                    <div class="info-tooltip">
                                                        <strong>Partner's Life Expectancy:</strong> The age your partner expects to live to. Different life expectancies can affect survivor benefits and legacy planning.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipPartnerLifeExpectancy = false" title="Close">
                                                            <span class="bi bi-x-lg"></span>
                                                        </span>
                                                    </div>
                                                }
                                            @if (DisplayLifeExpectancyPartner <= 0)
                                            {
                                                <span class="missing-badge">
                                                    <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-outline-accent" type="button"
                                                @onclick="() => OpenWizard(1)">
                                            <i class="bi bi-pencil me-2" aria-hidden="true"></i>
                                            Edit
                                        </button>
                                    </div>
                                </div>

                                <!-- Section 2: Starting Balances & Returns -->
                                <div class="section-card @(!IsStartingBalancesSectionComplete() ? "incomplete-section" : "")"
                                     style="background-color: rgba(37, 99, 235, 0.03); border-left: 3px solid var(--financial-blue);">
                                    <div>
                                        <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                            <div style="display:flex; align-items:center; gap:8px;">
                                                <span class="step-badge">2</span>
                                                <div>@(isSimpleMode ? "Your Savings & Growth" : "Starting Balances & Returns")</div>
                                            </div>
                                            @if (!IsStartingBalancesSectionComplete())
                                            {
                                                <span style="font-size:0.75rem; color:#dc3545;">
                                                    <i class="bi bi-exclamation-circle"></i> @(isSimpleMode ? "Need at least one account" : "At least one account required")
                                                </span>
                                            }
                                        </div>

                                        @if (!IsStartingBalancesSectionComplete())
                                        {
                                            <div class="alert alert-light mt-2 mb-2 py-2" style="font-size: 0.85rem; border-left: 3px solid #dc3545;">
                                                <i class="bi bi-info-circle me-1"></i>
                                                Please enter the starting balance for at least one account type.
                                            </div>
                                        }

                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipTaxableBalance = !showToolTipTaxableBalance"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Taxable: @Model.TaxableBalance.ToString("C0")
                                            </span>
                                            @if (showToolTipTaxableBalance)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Taxable Accounts:</strong> Non-retirement investment accounts that are subject to annual taxes on dividends, interest, and capital gains. These provide flexibility but without tax advantages of retirement accounts.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableBalance = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipTraditionalBalance = !showToolTipTraditionalBalance"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Traditional: @Model.TraditionalBalance.ToString("C0")
                                            </span>
                                            @if (showToolTipTraditionalBalance)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Traditional Accounts:</strong> Tax-deferred retirement accounts like 401(k)s and Traditional IRAs. Contributions were tax-deductible, but withdrawals in retirement are taxed as ordinary income.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalBalance = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipRothBalance = !showToolTipRothBalance"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Roth: @Model.RothBalance.ToString("C0")
                                            </span>
                                            @if (showToolTipRothBalance)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Roth Accounts:</strong> Tax-free growth retirement accounts like Roth IRAs and Roth 401(k)s. Contributions were made with after-tax dollars, so qualified withdrawals in retirement are tax-free.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothBalance = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px; padding-top:6px; border-top:1px solid #e9ecef;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipInvestmentReturn = !showToolTipInvestmentReturn"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Expected Return: @Model.InvestmentReturn.ToString("F1")%
                                            </span>
                                            @if (showToolTipInvestmentReturn)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Expected Return:</strong> The average annual growth rate you expect from your investments before inflation. Historical average for a balanced portfolio is around 6-8%, but future returns may vary.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipInvestmentReturn = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipInflationRate = !showToolTipInflationRate"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Expected Inflation: @Model.InflationRate.ToString("F1")%
                                            </span>
                                            @if (showToolTipInflationRate)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Expected Inflation:</strong> The annual rate at which the purchasing power of money decreases. This affects your real returns and how much income you'll need in the future. Historical average is around 2-3%.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipInflationRate = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-outline-accent" type="button"
                                                @onclick="() => OpenWizard(2)">
                                            <i class="bi bi-pencil me-2" aria-hidden="true"></i>
                                            Edit
                                        </button>
                                    </div>
                                </div>

                                <!-- Section 3: Social Security -->
                                <div class="section-card"
                                     style="background-color: rgba(5, 150, 105, 0.03); border-left: 3px solid var(--financial-green);">
                                    <!-- Existing content remains unchanged -->                                <div>
                                        <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                            <span class="step-badge">3</span>
                                            <div>Social Security</div>
                                        </div>
                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipSocialSecurityYou = !showToolTipSocialSecurityYou"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Expected SS/mo (You): @Model.SocialSecurityMonthlyYou.ToString("C0")
                                            </span>
                                            @if (showToolTipSocialSecurityYou)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Your Social Security Benefit:</strong> Your expected monthly Social Security payment. You can estimate this amount from your earnings record at ssa.gov or from annual statements. The average benefit in 2023 is around $1,800 per month.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSocialSecurityYou = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipSocialSecurityPartner = !showToolTipSocialSecurityPartner"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Expected SS/mo (Partner): @Model.SocialSecurityMonthlyPartner.ToString("C0")
                                            </span>
                                            @if (showToolTipSocialSecurityPartner)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Partner's Social Security Benefit:</strong> Your partner's expected monthly Social Security payment. If your partner didn't work enough to qualify, they may still be eligible for spousal benefits (typically 50% of your benefit).
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSocialSecurityPartner = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipSSStartAgeYou = !showToolTipSSStartAgeYou"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                SS Start Age (You): @Model.SSStartAgeYou
                                            </span>
                                            @if (showToolTipSSStartAgeYou)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Your SS Start Age:</strong> The age you plan to claim Social Security. Benefits can start as early as 62 (reduced amount), at full retirement age (66-67 depending on birth year) for 100%, or delayed until 70 for maximum benefit (about 8% increase per year of delay).
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSStartAgeYou = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipSSStartAgePartner = !showToolTipSSStartAgePartner"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                SS Start Age (Partner): @Model.SSStartAgePartner
                                            </span>
                                            @if (showToolTipSSStartAgePartner)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Partner's SS Start Age:</strong> The age your partner plans to claim Social Security. Couples often coordinate claiming strategies to maximize lifetime benefits, especially if there's a significant age or income difference.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSStartAgePartner = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-outline-accent" type="button"
                                                @onclick="() => OpenWizard(3)">
                                            <i class="bi bi-pencil me-2" aria-hidden="true"></i>
                                            Edit
                                        </button>
                                    </div>
                                </div>

                                <!-- Section 4: Reverse mortgage income -->
                                <div class="section-card"
                                     style="background-color: rgba(217, 119, 6, 0.03); border-left: 3px solid var(--financial-amber);">
                                    <div>
                                        <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                            <span class="step-badge">4</span>
                                            <div>Reverse mortgage income</div>
                                        </div>
                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipReverseMortgageStartYear = !showToolTipReverseMortgageStartYear"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Start year: @Model.ReverseMortgageStartYear
                                            </span>
                                            @if (showToolTipReverseMortgageStartYear)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Reverse Mortgage Start Year:</strong> The calendar year when you plan to begin receiving payments from a reverse mortgage. This income source allows homeowners 62+ to convert home equity into tax-free income while continuing to live in their home.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipReverseMortgageStartYear = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipReverseMortgageMonthly = !showToolTipReverseMortgageMonthly"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Monthly: @Model.ReverseMortgageMonthly.ToString("C0")
                                            </span>
                                            @if (showToolTipReverseMortgageMonthly)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Monthly Reverse Mortgage Payment:</strong> The estimated monthly income you expect to receive from your reverse mortgage. The amount depends on your home value, interest rates, your age, and the specific payment plan you choose.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipReverseMortgageMonthly = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-outline-accent" type="button"
                                                @onclick="() => OpenWizard(4)">
                                            <i class="bi bi-pencil me-2" aria-hidden="true"></i>
                                            Edit
                                        </button>
                                    </div>
                                </div>

                                <!-- Section 5: Withdrawal Strategy -->
                                <div class="section-card @(!IsWithdrawalStrategySectionComplete() ? "incomplete-section" : "")"
                                     style="background-color: rgba(109, 93, 252, 0.03); border-left: 3px solid var(--accent);">
                                    <div>
                                        <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                            <div style="display:flex; align-items:center; gap:8px;">
                                                <span class="step-badge">5</span>
                                                <div>Withdrawal Strategy</div>
                                            </div>
                                            @if (!IsWithdrawalStrategySectionComplete())
                                            {
                                                <span style="font-size:0.75rem; color:#dc3545;">
                                                    <i class="bi bi-exclamation-circle"></i> Required fields missing
                                                </span>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                                <span class="d-flex align-items-center">
                                                    <span class="bi bi-info-circle info-icon" 
                                                        @onclick="() => showToolTipWithdrawalOne = !showToolTipWithdrawalOne" 
                                                        tabindex="0" 
                                                        title="Click for more info"></span>
                                                    One retired: @Model.AnnualWithdrawalOne.ToString("C0")
                                                </span>
                                                @if (showToolTipWithdrawalOne)
                                                {
                                                    <div class="info-tooltip">
                                                        <strong>Annual Withdrawal (One Retired):</strong> The amount you plan to withdraw annually from your portfolio when only one of you is retired. This is typically less than when both partners are retired since one person is still earning income.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipWithdrawalOne = false" title="Close">
                                                            <span class="bi bi-x-lg"></span>
                                                        </span>
                                                    </div>
                                                }
                                            @if (Model.AnnualWithdrawalOne <= 0)
                                            {
                                                <span class="missing-badge">
                                                    <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                                </span>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">

                                                <span class="d-flex align-items-center">
                                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipWithdrawalBoth = !showToolTipWithdrawalBoth" tabindex="0" title="Click for more info"></span>
                                                    Both retired: @Model.AnnualWithdrawalBoth.ToString("C0")
                                                </span>
                                                @if (showToolTipWithdrawalBoth)
                                                {
                                                    <div class="info-tooltip">
                                                        <strong>Annual Withdrawal (Both Retired):</strong> The amount you plan to withdraw annually from your portfolio when both of you are retired. This often needs to be higher than when one person is retired since you'll be relying entirely on portfolio income and Social Security.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipWithdrawalBoth = false" title="Close">
                                                            <span class="bi bi-x-lg"></span>
                                                        </span>
                                                    </div>
                                                }
                                            @if (Model.AnnualWithdrawalBoth <= 0)
                                            {
                                                <span class="missing-badge">
                                                    <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-outline-accent" type="button"
                                                @onclick="() => OpenWizard(5)">
                                            <i class="bi bi-pencil me-2" aria-hidden="true"></i>
                                            Edit
                                        </button>
                                    </div>
                                </div>

                                <!-- Section 6: Current Ages & Simulation -->
                                <div class="section-card"
                                     style="background-color: rgba(79, 209, 197, 0.03); border-left: 3px solid var(--info);">
                                    <div>
                                        <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                            <span class="step-badge">6</span>
                                            <div>Current Ages & Simulation</div>
                                        </div>
                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipCurrentAgeYou = !showToolTipCurrentAgeYou"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                You: @Model.CurrentAgeYou
                                            </span>
                                            @if (showToolTipCurrentAgeYou)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Your Current Age:</strong> Your age today. This is the starting point for all retirement calculations and timeline projections. The difference between your current age and retirement age determines how many years you have to prepare.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipCurrentAgeYou = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipCurrentAgePartner = !showToolTipCurrentAgePartner"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Partner: @Model.CurrentAgePartner
                                            </span>
                                            @if (showToolTipCurrentAgePartner)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Partner's Current Age:</strong> Your partner's age today. This affects your joint retirement timeline, especially when there's a significant age difference between partners requiring staggered retirement planning.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipCurrentAgePartner = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="d-flex align-items-center">
                                                <span class="bi bi-info-circle info-icon"
                                                      @onclick="() => showToolTipSimulationStartYear = !showToolTipSimulationStartYear"
                                                      tabindex="0"
                                                      title="Click for more info"></span>
                                                Projection start year: @Model.SimulationStartYear
                                            </span>
                                            @if (showToolTipSimulationStartYear)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Projection Start Year:</strong> The calendar year when the retirement planning analysis begins. This is typically the current year, but you can set it to a future year if you're planning ahead for a specific timeframe.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSimulationStartYear = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-outline-accent" type="button"
                                                @onclick="() => OpenWizard(5)">
                                            <i class="bi bi-pencil me-2" aria-hidden="true"></i>
                                            Edit
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Right column (2) -->
                    <div class="col-12 col-md-2">
                        @* <div class="panel">
                        <div style="font-weight:700; margin-bottom:8px; display:flex; justify-content:space-between; align-items:center;">
                            <div>Debug</div>
                            <div>
                                <button class="btn-ghost" style="padding:4px 6px; font-size:0.8rem;" @onclick="ToggleRightDebug">Toggle</button>
                            </div>
                        </div>
                        <div style="font-size:0.85rem; color:var(--muted);">Toggle messages</div>
                        <div style="margin-top:8px;">
                            <button class="btn-ghost" style="padding:4px 8px; font-size:0.8rem; width:100%;" @onclick="TestCalculation">
                                <i class="bi bi-calculator" style="margin-right: 4px;"></i>
                                Test Calc
                            </button>
                        </div>
                        @if (ShowRightDebug)
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:200px; overflow:auto;">
                                @foreach (var msg in DebugService.Messages.OrderByDescending(m => m.MessageTime))
                                {
                                    <div style="margin-bottom:6px;">
                                        <small style="color:var(--muted);">@msg.MessageTime.ToString("HH:mm:ss")</small>
                                        <div>@msg.MessageText</div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:120px; overflow:auto;">No messages</div>
                        }
                    </div> *@
                    </div>
                </div>
            </div>
        </div>

        @if (YearRows.Count > 1)
        {
            <!-- Yearly Projection Grid -->
            <div class="grid-panel panel">
                <div class="grid-header">
                    <div style="font-weight:800; font-size:1rem;">
                        @(isSimpleMode ? "Year-by-Year Retirement Plan" : "Yearly Projection")
                    </div>
                    @if (!Model.IsModelEmpty())
                    {
                        <div class="legend">
                            @if (isSimpleMode)
                            {
                                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--brand-yellow)"></span><small> Important Year</small></div>
                                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--success)"></span><small> Money Growing</small></div>
                                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--danger)"></span><small> Running Low</small></div>
                            }
                            else
                            {
                                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--brand-yellow)"></span><small> Milestone</small></div>
                                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--success)"></span><small> Growth</small></div>
                                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--danger)"></span><small> Depletion</small></div>
                            }
                        </div>
                    }
                </div>

                @if (Model.IsModelEmpty())
                {
                    <!-- Empty State Message for Grid -->
                    <div style="text-align: center; padding: 60px 20px; color: #6c757d;">
                        <div style="font-size: 2.5rem; margin-bottom: 16px;">📊</div>
                        <h5 style="color: #495057; margin-bottom: 12px;">
                            @(isSimpleMode ? "Ready to Start Planning?" : "No Projection Available")
                        </h5>
                        <p style="margin-bottom: 20px; max-width: 500px; margin-left: auto; margin-right: auto;">
                            @if (isSimpleMode)
                            {
                                @:Let's create your retirement plan! We'll ask you a few simple questions about when you want to retire, how much you've saved, and what you expect to spend. Then we'll show you year-by-year how your money will last.
                            }
                            else
                            {
                                @:Complete your retirement plan setup to see year-by-year projections of your income and account balances.
                            }
                        </p>
                        <button class="btn btn-primary" @onclick="() => OpenWizard(1)">
                            <i class="bi bi-play-circle" style="margin-right: 8px;"></i>
                            @(isSimpleMode ? "Start My Plan" : "Get Started")
                        </button>
                    </div>
                }
                else if (Model.IsModelPartiallyComplete())
                {
                    <!-- Partial State Message -->
                    <div style="text-align: center; padding: 40px 20px; background: #fff3cd; border-radius: 8px; color: #856404;">
                        <div style="font-size: 2rem; margin-bottom: 12px;">⏳</div>
                        <h6 style="margin-bottom: 12px;">Projection Incomplete</h6>
                        <p style="margin-bottom: 16px;">
                            Add missing information to your retirement plan to generate accurate year-by-year projections.
                        </p>
                        <button class="btn" style="background: #ffc107; border-color: #ffc107; color: #000;" @onclick="() => OpenWizard(1)">
                            Complete Setup
                        </button>
                    </div>
                }
                else if (!YearRows.Any())
                {
                    <!-- No Data Generated Yet -->
                    <div style="text-align: center; padding: 40px 20px; color: #6c757d;">
                        <div style="font-size: 2rem; margin-bottom: 12px;">🔄</div>
                        <h6 style="color: #495057; margin-bottom: 12px;">Generating Projections...</h6>
                        <p>Please wait while we calculate your retirement projections.</p>
                    </div>
                }
                else
                {
                    <!-- Normal Grid View -->
                    <div class="grid">
                        <div style="position: relative;">
                            <!-- Top scrollbar -->
                            <div id="table-scrollbar-top" style="width:100%; overflow-x:auto;">
                                <!-- This empty div will mimic the table's width and scrollbar -->
                                <div style="width:1100px; height:1px;"></div>
                            </div>
                            <!-- Actual table with bottom scrollbar -->
                            <!-- Retirement Projection with Simple/Advanced Mode Support -->
                            @if (isSimpleMode)
                            {
                                <!-- Simple Mode: Show beginner-friendly summary first -->
                                <div class="alert alert-light border-primary mb-3">
                                    <div class="d-flex align-items-start">
                                        <i class="bi bi-info-circle text-primary me-3" style="font-size: 1.2rem; margin-top: 3px;"></i>
                                        <div>
                                            <h6 class="text-primary mb-2">Your Retirement Plan Summary</h6>
                                            <p class="mb-2 text-dark">
                                                <strong>What this shows:</strong> Each row represents one year of your retirement.
                                                You'll see your age, how much money you need, where it comes from, and how much you have left.
                                            </p>
                                            <p class="mb-0 text-dark">
                                                <strong>Pay attention to:</strong> Red numbers mean you might not have enough money that year.
                                                The goal is to avoid running out of money before your life expectancy.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }

                            <RetirementSummaryGrid Model="@Model" YearRows="@YearRows" />

                            <RetirementProjection Model="@Model" IsSimpleMode="@isSimpleMode" />

                        </div>
                    </div>
                }
            </div>
        }
        <!-- RMD Notice -->
        <div class="mt-3 p-3" style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px;">
            <div style="display: flex; align-items: flex-start; gap: 8px;">
                <div style="color: #0d6efd; margin-top: 2px;">
                    <i class="bi bi-info-circle" style="font-size: 1.1rem;"></i>
                </div>
                <div>
                    <div style="font-weight: 600; color: #495057; margin-bottom: 4px;">Required Minimum Distributions (RMDs)</div>
                    <div style="font-size: 0.9rem; color: #6c757d; line-height: 1.4;">
                        This calculator does not currently factor in Required Minimum Distributions (RMDs) that begin at age 73 for traditional retirement accounts.
                        RMDs may require larger withdrawals than your planned amounts, potentially affecting your retirement strategy.
                        An advanced version with RMD calculations is coming soon.
                    </div>
                </div>
            </div>
        </div>

        <!-- Methodology Explanation (Simple Mode) -->
        @if (isSimpleMode)
        {
            <div class="mt-3 p-3" style="background-color: #f0f9ff; border: 1px solid #bae6fd; border-radius: 8px;">
                <div style="display: flex; align-items: flex-start; gap: 8px;">
                    <div style="color: #0369a1; margin-top: 2px;">
                        <i class="bi bi-lightbulb" style="font-size: 1.1rem;"></i>
                    </div>
                    <div>
                        <div style="font-weight: 600; color: #0369a1; margin-bottom: 8px;">How This Retirement Calculator Works</div>
                        <div style="font-size: 0.9rem; color: #0369a1; line-height: 1.4;">
                            <p style="margin-bottom: 8px;"><strong>1. Your Income Needs:</strong> We calculate how much money you'll need each year in retirement based on your expected cost of living.</p>
                            <p style="margin-bottom: 8px;"><strong>2. Income Sources:</strong> We add up all your income sources (Social Security, reverse mortgage payments) to see how much outside income you'll have.</p>
                            <p style="margin-bottom: 8px;"><strong>3. Portfolio Withdrawals:</strong> If your income sources don't cover all expenses, we withdraw the difference from your investment accounts in tax-efficient order: Taxable first, then Traditional, then Roth.</p>
                            <p style="margin-bottom: 8px;"><strong>4. Growth & Taxes:</strong> Your remaining money grows each year, but we also calculate taxes on withdrawals from Traditional accounts and investment growth.</p>
                            <p style="margin-bottom: 0;"><strong>5. Year-by-Year Projection:</strong> We repeat this process for each year of retirement to show you when you might run out of money.</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Items for Problems (Simple Mode) -->
            @if (!GetDepletionText().Contains("Never"))
            {
                <div class="mt-3 p-3" style="background-color: #fef2f2; border: 1px solid #fecaca; border-radius: 8px;">
                    <div style="display: flex; align-items: flex-start; gap: 8px;">
                        <div style="color: #dc2626; margin-top: 2px;">
                            <i class="bi bi-exclamation-circle" style="font-size: 1.1rem;"></i>
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #dc2626; margin-bottom: 8px;">Your Plan Needs Attention</div>
                            <p style="font-size: 0.9rem; color: #dc2626; margin-bottom: 8px;">Based on your current plan, you may run short of money during retirement. Here are some options to consider:</p>
                            <ul style="font-size: 0.9rem; color: #dc2626; line-height: 1.4; margin-bottom: 8px;">
                                <li><strong>Save More Now:</strong> Increase your retirement contributions while you're still working</li>
                                <li><strong>Work Longer:</strong> Delay retirement by a few years to build more savings</li>
                                <li><strong>Reduce Expenses:</strong> Plan to spend less in retirement</li>
                                <li><strong>Delay Social Security:</strong> Waiting until age 70 increases your monthly benefit</li>
                                <li><strong>Consider Part-Time Work:</strong> Small income in early retirement can make a big difference</li>
                            </ul>
                            <div style="font-size: 0.85rem; color: #991b1b; font-style: italic;">
                                💡 Even small changes can have a big impact over time. Consider speaking with a financial advisor for personalized strategies.
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="mt-3 p-3" style="background-color: #f0fdf4; border: 1px solid #bbf7d0; border-radius: 8px;">
                    <div style="display: flex; align-items: flex-start; gap: 8px;">
                        <div style="color: #16a34a; margin-top: 2px;">
                            <i class="bi bi-check-circle" style="font-size: 1.1rem;"></i>
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #16a34a; margin-bottom: 8px;">Your Plan Looks Good!</div>
                            <p style="font-size: 0.9rem; color: #16a34a; margin-bottom: 8px;">Based on your current plan, your money should last through retirement. Here are some tips to stay on track:</p>
                            <ul style="font-size: 0.9rem; color: #16a34a; line-height: 1.4; margin-bottom: 8px;">
                                <li><strong>Review Annually:</strong> Update your plan each year as circumstances change</li>
                                <li><strong>Monitor Market Performance:</strong> Actual returns may differ from projections</li>
                                <li><strong>Plan for Healthcare:</strong> Medical costs can increase significantly in retirement</li>
                                <li><strong>Consider Inflation:</strong> Make sure your plan accounts for rising costs over time</li>
                                <li><strong>Build in Buffers:</strong> Having extra cushion helps handle unexpected expenses</li>
                            </ul>
                            <div style="font-size: 0.85rem; color: #15803d; font-style: italic;">
                                💡 Remember, this is just a projection. Regular reviews and adjustments help keep you on track.
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        <!-- Important Disclaimers -->
        <div class="mt-3 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
            <div style="display: flex; align-items: flex-start; gap: 8px;">
                <div style="color: #856404; margin-top: 2px;">
                    <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
                </div>
                <div>
                    <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">
                        @(isSimpleMode ? "Important Things to Remember" : "Important Disclaimers")
                    </div>
                    <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                        @if (isSimpleMode)
                        {
                            <p style="margin-bottom: 8px;"><strong>This is Not Financial Advice:</strong> This tool helps you explore different scenarios, but it's not personalized advice. Always consult with a financial advisor for your specific situation.</p>
                            <p style="margin-bottom: 8px;"><strong>Results Are Estimates:</strong> Real life is unpredictable. Market returns, inflation, taxes, and your actual expenses may be different than projected.</p>
                            <p style="margin-bottom: 8px;"><strong>Healthcare Costs:</strong> Medical expenses often increase significantly in retirement and aren't fully captured in this calculation.</p>
                            <p style="margin-bottom: 0;"><strong>Get Professional Help:</strong> Consider working with a financial advisor, tax professional, or estate planning attorney for comprehensive planning.</p>
                        }
                        else
                        {
                            <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational and planning purposes only. Results are estimates based on your inputs and assumptions. This is not personalized financial, tax, or investment advice.</p>
                            <p style="margin-bottom: 8px;"><strong>Social Security Taxation:</strong> Social Security benefits may be taxable based on your combined income thresholds. This calculator may not fully account for the complex taxation rules applied to Social Security benefits.</p>
                            <p style="margin-bottom: 8px;"><strong>Market Risk:</strong> Actual investment returns will vary and may be negative. Past performance does not guarantee future results. Market conditions, economic changes, and other factors can significantly impact outcomes.</p>
                            <p style="margin-bottom: 8px;"><strong>Tax Considerations:</strong> Tax laws are complex and subject to change. This calculator uses simplified tax calculations that may not reflect your actual tax situation, including state taxes, tax bracket changes, or future legislation.</p>
                            <p style="margin-bottom: 8px;"><strong>Health Care Costs:</strong> Medicare premiums, long-term care, and rising healthcare costs are not specifically modeled and could significantly impact your retirement expenses.</p>
                            <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial, tax, and legal professionals who can provide personalized advice based on your complete financial situation.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* Add this script at the bottom of your file or in a JS file *@
    <script>
        // Sync scroll positions
        document.addEventListener("DOMContentLoaded", function () {
            var top = document.getElementById("table-scrollbar-top");
            var bottom = document.getElementById("table-scrollbar-bottom");
            if (top && bottom) {
                top.addEventListener("scroll", function () {
                    bottom.scrollLeft = top.scrollLeft;
                });
                bottom.addEventListener("scroll", function () {
                    top.scrollLeft = bottom.scrollLeft;
                });
            }
        });
    </script>
</div>
<!-- Close intro-modal-active wrapper -->
@code {
    // Simple Mode Toggle
    private bool isSimpleMode = false; // Start in beginner mode by default

    private void ToggleSimpleMode()
    {
        isSimpleMode = !isSimpleMode;
        StateHasChanged();
    }

    private int _wizardOpenStep = 1;
    private bool showClearConfirm = false;
    private bool showClearResult = false;
    private bool clearSucceeded = false;
    private bool showIntroModal = true; // Show by default unless user has opted out
    private bool dontShowIntroAgain = false;

    private bool showToolTipYourRetirementAge = false;
    private bool showToolTipPartnerRetirementAge = false;
    private bool showToolTipYourLifeExpectancy = false;
    private bool showToolTipPartnerLifeExpectancy = false;

    private bool showToolTipTaxableBalance = false;
    private bool showToolTipTraditionalBalance = false;
    private bool showToolTipRothBalance = false;
    private bool showToolTipInvestmentReturn = false;
    private bool showToolTipInflationRate = false;

    private bool showToolTipSocialSecurityYou = false;
    private bool showToolTipSocialSecurityPartner = false;
    private bool showToolTipSSStartAgeYou = false;
    private bool showToolTipSSStartAgePartner = false;

    private bool showToolTipReverseMortgageStartYear = false;
    private bool showToolTipReverseMortgageMonthly = false;

    private bool showToolTipWithdrawalOne = false;
    private bool showToolTipWithdrawalBoth = false;

    private bool showToolTipCurrentAgeYou = false;
    private bool showToolTipCurrentAgePartner = false;
    private bool showToolTipSimulationStartYear = false;

    private bool showToolTipYear = false;
    private bool showToolTipYourAge = false;
    private bool showToolTipPartnerAge = false;
    private bool showToolTipMilestones = false;
    private bool showToolTipAmountNeeded = false;
    private bool showToolTipSSYou = false;
    private bool showToolTipSSPartner = false;
    private bool showToolTipReverseMortgage = false;
    private bool showToolTipGrowth = false;
    private bool showToolTipTaxableWithdrawal = false;
    private bool showToolTipTraditionalWithdrawal = false;
    private bool showToolTipRothWithdrawal = false;
    private bool showToolTipTaxesPaid = false;
    private bool showToolTipTaxableEnding = false;
    private bool showToolTipTraditionalEnding = false;
    private bool showToolTipRothEnding = false;
    private bool showSurvey = false;

    // Helper properties to display life expectancy as age not calendar year
    private int DisplayLifeExpectancyYou => ComputeLifeExpectancyAge(Model?.LifeExpectancyYou ?? 0, Model?.CurrentAgeYou ?? 0);
    private int DisplayLifeExpectancyPartner => ComputeLifeExpectancyAge(Model?.LifeExpectancyPartner ?? 0, Model?.CurrentAgePartner ?? 0);

    const string calculatorType = "retirement_planner"; // Or whatever identifier you use for retirement data


    private int ComputeLifeExpectancyAge(int lifeValue, int currentAge)
    {
        if (lifeValue <= 0) return 0;
        if (lifeValue > 1900)
        {
            // stored as a calendar year; convert to age if currentAge available, otherwise estimate from year
            if (currentAge > 0)
            {
                return currentAge + (lifeValue - DateTime.Now.Year);
            }
            else
            {
                // fallback: compute naive age as year - now
                return Math.Max(0, lifeValue - DateTime.Now.Year);
            }
        }

        // already an age
        return lifeValue;
    }

    // Keep existing code-behind methods in the partial class; helper methods for buttons call into the component's code-behind.
    private void OpenWizard(int step)
    {
        _wizardOpenStep = step;
        _isDataAvaiableForTheUser = true;
    }

    private void ConfirmClearAll()
    {
        // show confirmation modal
        showClearConfirm = true;
    }

    private async Task PerformClearAll()
    {
        showClearConfirm = false;
        StateHasChanged();

        try
        {
            // call into the partial class ClearAll implementation (in code-behind)
            clearSucceeded = await ClearAllAndOpenWizardAsync();
        }
        catch
        {
            clearSucceeded = false;
        }

        // show result modal
        showClearResult = true;
        StateHasChanged();
    }

    private void CloseClearResult()
    {
        showClearResult = false;

        // If clear succeeded, open wizard for re-entry (model already set by code-behind)
        if (clearSucceeded)
        {
            _isDataAvaiableForTheUser = true;
        }

        StateHasChanged();
    }

    private async Task SaveAndClose()
    {
        await Save();
        _isDataAvaiableForTheUser = false;
        StateHasChanged();
    }

    private bool showSetupChecklist = false;
    private bool showToolTipAmountWithdrawn = false;

    private void CompleteSection(int stepNumber)
    {
        showSetupChecklist = false;
        OpenWizard(stepNumber);
    }

    private void ContinueSetup()
    {
        var nextStep = Model.GetNextIncompleteStep();
        showSetupChecklist = false;
        OpenWizard(nextStep);
    }

    private bool showSampleDataModal = false;

    private async Task HandleSampleDataSelected(CalendarSpendingModel sampleModel)
    {
        Model = sampleModel;
        Model.Calculate();
        await Save();
        StateHasChanged();
    }


    private async Task HandleIntroModal()
    {
        showIntroModal = false;

        // Only show intro modal if model is empty and user hasn't opted out
        //if (Model == null || Model.IsModelEmpty())
        //{
        var hideIntro = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "finplan-retirement-income-planner-hide-intro");
        showIntroModal = string.IsNullOrEmpty(hideIntro) || !hideIntro.Equals("true", StringComparison.OrdinalIgnoreCase);
        //}
    }

    private async Task OnDontShowIntroChanged(ChangeEventArgs e)
    {
        bool checkedState = e?.Value is bool b && b;
        string key = "finplan-retirement-income-planner-hide-intro";

        if (checkedState)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, "true");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
    }

    // Add these new methods
    private void CloseIntroModal()
    {
        showIntroModal = false;
        StateHasChanged();

    }

    private bool showToolTipIncomeSources = false;
    private bool showToolTipWithdrawals = false;
    private bool showToolTipEndingBalances = false;
    private bool showToolTipTaxPaid = false;

    private void TestCalculation()
    {
        try
        {
            DebugService.AddMessage("=== Test calculation started ===");

            // Log current model state
            DebugService.AddMessage($"Model empty: {Model.IsModelEmpty()}");
            DebugService.AddMessage($"Model partial: {Model.IsModelPartiallyComplete()}");
            DebugService.AddMessage($"Model complete: {Model.IsModelComplete()}");

            // Log key values before calculation
            DebugService.AddMessage($"Current ages: You={Model.CurrentAgeYou}, Partner={Model.CurrentAgePartner}");
            DebugService.AddMessage($"Retirement ages: You={Model.RetirementAgeYou}, Partner={Model.RetirementAgePartner}");
            DebugService.AddMessage($"Life expectancy: You={Model.LifeExpectancyYou}, Partner={Model.LifeExpectancyPartner}");
            DebugService.AddMessage($"Simulation start year: {Model.SimulationStartYear}");

            // FIX: Convert life expectancy from ages to calendar years
            var currentYear = DateTime.Now.Year;
            var lifeExpectancyYearYou = currentYear + (Model.LifeExpectancyYou - Model.CurrentAgeYou);
            var lifeExpectancyYearPartner = currentYear + (Model.LifeExpectancyPartner - Model.CurrentAgePartner);

            DebugService.AddMessage($"Converted life expectancy years: You={lifeExpectancyYearYou}, Partner={lifeExpectancyYearPartner}");

            // Temporarily update the model with calendar years
            var originalLifeYou = Model.LifeExpectancyYou;
            var originalLifePartner = Model.LifeExpectancyPartner;

            Model.LifeExpectancyYou = lifeExpectancyYearYou;
            Model.LifeExpectancyPartner = lifeExpectancyYearPartner;

            DebugService.AddMessage($"Balances: Tax={Model.TaxableBalance:C0}, Trad={Model.TraditionalBalance:C0}, Roth={Model.RothBalance:C0}");
            DebugService.AddMessage($"Withdrawals: One={Model.AnnualWithdrawalOne:C0}, Both={Model.AnnualWithdrawalBoth:C0}");

            Model.Calculate();

            // Clear existing rows
            Model.YearRows.Clear();
            DebugService.AddMessage("Cleared existing YearRows");

            // Call the calculation
            Model.Calculate();

            DebugService.AddMessage($"=== Calculation completed. YearRows count: {Model.YearRows.Count} ===");

            // Restore original values
            Model.LifeExpectancyYou = originalLifeYou;
            Model.LifeExpectancyPartner = originalLifePartner;

            // Log first few rows if any exist
            if (Model.YearRows.Count > 0)
            {
                for (int i = 0; i < Math.Min(3, Model.YearRows.Count); i++)
                {
                    var row = Model.YearRows[i];
                    DebugService.AddMessage($"Row {i}: Year={row.Year}, AgeYou={row.AgeYou}, AgePartner={row.AgePartner}");
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Calculation error: {ex.Message}");
            DebugService.AddMessage($"Stack trace: {ex.StackTrace}");
        }
    }

    private string GetDepletionText()
    {
        var year = GetProjectedDepletionYear();
        return year.HasValue ? year.Value.ToString() : "No depletion projected";
    }

    private string GetProjectionRangeText()
    {
        var first = YearRows.FirstOrDefault()?.Year;
        var last = YearRows.LastOrDefault()?.Year;
        if (first == null || last == null) return "No projection";
        return $"{first} – {last}";
    }

    private decimal GetNetAnnualShortfallLastYear()
    {
        var last = YearRows.LastOrDefault();
        if (last == null) return 0m;
        var income = SafeDecimal(last.SSYou) + SafeDecimal(last.SSPartner) + SafeDecimal(last.ReverseMortgage) + SafeDecimal(last.GrowthBeforeTaxes);
        var need = SafeDecimal(last.AmountNeededForCostOfLiving);
        return need - income;
    }

    private string GetNetShortfallText()
    {
        var val = GetNetAnnualShortfallLastYear();
        if (val <= 0m) return "Surplus";
        return val.ToString("C0");
    }

    private string GetRunwayYearsText()
    {
        var first = YearRows.FirstOrDefault()?.Year;
        var deplete = GetProjectedDepletionYear();
        if (first == null) return "—";
        if (!deplete.HasValue) return "No depletion";
        return (deplete.Value - first.Value).ToString() + " yrs";
    }

    private string GetFinalPortfolioText()
    {
        var last = YearRows.LastOrDefault();
        if (last == null) return "—";
        var total = SafeDecimal(last.EndingTaxable) + SafeDecimal(last.EndingTraditional) + SafeDecimal(last.EndingRoth);
        return total.ToString("C0");
    }
    private decimal SafeDecimal(object? v)
    {
        if (v == null) return 0m;
        try { return Convert.ToDecimal(v); } catch { return 0m; }
    }
    // Macro helpers for the projection strip
    private int? GetProjectedDepletionYear()
    {
        foreach (var r in YearRows)
        {
            var totalEnding = SafeDecimal(r.EndingTaxable) + SafeDecimal(r.EndingTraditional) + SafeDecimal(r.EndingRoth);
            if (totalEnding <= 0m)
                return r.Year;
        }
        return null;
    }

    // Add this method to your @code section
    // Add this method to your @code section
    private async Task ClearDataAsync()
    {
        try
        {
            string userGuid = string.Empty;

            // Confirm with user before deleting
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm",
            "Are you sure you want to clear all saved retirement plan data? This action cannot be undone.");

            if (!confirm) return;

            if (string.IsNullOrWhiteSpace(userGuid))
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            }

            var apiBaseUrl = GetApiBaseUrl(); // You'll need to implement this based on your configuration
            var url = $"{apiBaseUrl}/api/FinPlan/remove"; // Changed endpoint to match POST pattern

            using var httpClient = new HttpClient(); // Or use your existing HTTP client service

            // Create request body for POST method
            var requestBody = new
            {
                userGuid = userGuid,
                calculatorType = calculatorType
            };

            var json = JsonSerializer.Serialize(requestBody);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // Changed from DELETE to POST
            var response = await httpClient.PostAsync(url, content);

            if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // Remove the intro modal hide cookie/localStorage key
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "finplan-retirement-income-planner-hide-intro");
                // Reload the page to reflect the cleared state
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);

                Model = new CalendarSpendingModel();

                showIntroModal = true; // Show intro modal again
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to clear data: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error clearing data: {ex.Message}");
        }
    }

    // You'll need to implement these helper methods based on your existing services:
    private async Task<string> GetCurrentUserGuidAsync()
    {
        // Implement based on your UserGuidService or similar service
        // This should match how you handle user identification in the Savings page
        throw new NotImplementedException("Implement based on your user service");
    }

    // Progress Indicator Helper Methods
    private int GetSetupProgressPercentage()
    {
        if (Model == null) return 0;

        int completed = 0;
        int total = 6; // Total number of setup sections

        // Section 1: Retirement ages & life expectancy
        if (IsRetirementAgesSectionComplete()) completed++;

        // Section 2: Starting Balances & Returns
        if (IsStartingBalancesSectionComplete()) completed++;

        // Section 3: Social Security (optional, but count if has any data)
        if (Model.SSYou > 0 || Model.SSPartner > 0) completed++;
        else if (Model.SSYou == 0 && Model.SSPartner == 0) completed++; // Count as complete if explicitly set to 0

        // Section 4: Reverse Mortgage (optional, but count if has any data)
        if (Model.ReverseMortgageStartYear > 0 || Model.ReverseMortgageMonthly > 0) completed++;
        else completed++; // Count as complete since it's optional

        // Section 5: Cost of Living
        if (Model.WithdrawalOne > 0 || Model.WithdrawalBoth > 0) completed++;

        // Section 6: Current Ages & Start Year
        if (Model.CurrentAgeYou > 0 && Model.CurrentAgePartner > 0 && Model.SimulationStartYear > 0) completed++;

        return (int)Math.Round((completed * 100.0) / total);
    }

    private string GetSetupProgressText()
    {
        if (Model == null) return "No data entered yet";

        var percentage = GetSetupProgressPercentage();

        if (percentage == 0) return "Ready to get started";
        if (percentage < 50) return "Getting started - add your basic information";
        if (percentage < 80) return "Looking good - a few more details needed";
        if (percentage < 100) return "Almost complete - just a couple more items";
        return "Setup complete - ready to generate projections";
    }
}