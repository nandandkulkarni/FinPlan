@page "/retirement-income-planner"
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic
@using FinPlan.Web.Components
@using FinPlan.Shared.Models.Spending
@using FinPlan.Web.Components.Shared
@namespace FinPlan.Web.Components.Pages
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime

<PageTitle>Retirement Income Planner</PageTitle>

<!-- Retirement input wizard: shown when _isDataAvaiableForTheUser is true -->
<RetirementInputWizard Model="@Model"
                       Visible="@_isDataAvaiableForTheUser"
                       VisibleChanged="@(v => _isDataAvaiableForTheUser = v)"
                       OnFinished="HandleWizardFinished"
                       OnSave="Save"
                       InitialStep="@_wizardOpenStep" />

<!-- Setup Checklist Modal -->
<SetupChecklistModal Model="@Model"
                     Visible="@showSetupChecklist"
                     OnClose="@(() => showSetupChecklist = false)"
                     OnCompleteSection="CompleteSection"
                     OnContinueSetup="ContinueSetup" />

<!-- Sample Data Modal -->
<SetupRetirementSampeData Visible="@showSampleDataModal"
                          OnClose="@(() => showSampleDataModal = false)"
                          OnSampleDataSelected="HandleSampleDataSelected" />

<style>
    :root {
        --brand-yellow: #FFD600;
        --muted: #6c757d;
        --bg: #f8f9fa;
        --card-bg: #ffffff;
        --card-radius: 10px;
        --accent: #6D5DFC;
        --danger: #F56565;
        --success: #38B2AC;
        --info: #4FD1C5;
        --financial-blue: #2563EB;
        --financial-gray: #6B7280;
        --financial-green: #059669;
        --financial-amber: #D97706;
        --background-subtle: #F8FAFC;
    }


    .info-icon {
        font-size: 0.85rem;
        color: #1F6FEB;
        cursor: pointer;
        margin-right: 0.25rem;
        transition: transform 0.2s ease, color 0.2s ease;
    }

        .info-icon:hover {
            transform: scale(1.1);
            color: #0E62DA;
        }

    .info-tooltip {
        background-color: #EBF5FF;
        border: 1px solid #BEDAFF;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        margin-top: 0.25rem;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        position: relative;
        line-height: 1.4;
    }

    thead th {
        position: sticky;
        top: 0;
        background: #fff;
        padding: 10px 12px;
        border-bottom: 2px solid #d1d5db;
        text-align: left;
        font-weight: 700;
        color: #333;
    }

    .col-income-sources {
        background-color: rgba(5, 150, 105, 0.02);
        border-left: 1px solid #059669;
    }

    .col-account-activity {
        background-color: rgba(37, 99, 235, 0.02);
        border-left: 1px solid #2563EB;
    }

    .col-ending-balances {
        background-color: rgba(107, 114, 128, 0.02);
        border-left: 1px solid #6B7280;
    }

    .container-wire {
        padding: 14px;
    }

    .page-header {
        text-align: center;
        font-weight: 700;
        font-size: 1.45rem;
        margin-bottom: 12px;
        color: #111;
    }

    .top-area {
        position: relative;
    }

    .panel {
        background: var(--card-bg);
        border-radius: var(--card-radius);
        box-shadow: 0 6px 18px rgba(22,28,36,0.06);
        padding: 12px;
        border: 1px solid rgba(0,0,0,0.03);
        display: flex;
        flex-direction: column;
        flex: 1 1 0%;
    }

    .section-card {
        border: 1px solid rgba(16,24,36,0.12);
        padding: 10px;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        min-height: 92px;
        background: #fff;
    }

        .section-card .actions {
            margin-top: auto;
            display: flex;
            justify-content: flex-start;
            gap: 8px;
            padding-top: 6px;
        }

    .btn-edit {
        background: #1F6FEB;
        color: #ffffff;
        border: 0;
        padding: 7px 12px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
    }

    .section-panel {
        border: 3px solid var(--brand-yellow);
        border-radius: 10px;
        box-shadow: 0 12px 30px rgba(13,38,76,0.06), 0 4px 18px rgba(255,214,0,0.08);
        padding: 14px;
        background: linear-gradient(180deg, #fff, #fff);
    }

    .panel h4 {
        margin: 0 0 8px 0;
        font-size: 1.12rem;
        color: #111;
    }

    .small-note {
        font-size: 0.9rem;
        color: var(--muted);
        margin-top: 4px;
    }

    .btn {
        padding: 7px 10px;
        border-radius: 8px;
        border: 0;
        cursor: pointer;
        font-weight: 600;
        font-size: 1.05rem;
    }

    .btn-primary {
        background: var(--accent);
        color: white;
        box-shadow: 0 6px 20px rgba(109,93,252,0.12);
    }

    .btn-ghost {
        background: transparent;
        border: 1px solid #e6e9ee;
        color: #333;
    }

    .btn-outline-danger {
        background: transparent;
        border: 2px solid #F56565;
        color: #F56565;
    }

    .badge {
        display: inline-block;
        padding: 6px 8px;
        border-radius: 999px;
        font-size: 0.85rem;
        background: #f1f3f5;
        color: #222;
        margin-right: 6px;
    }

    .grid-panel {
        margin-top: 12px;
    }

    .grid-header {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 8px;
    }

    .grid {
        width: 100%;
        border-radius: 8px;
        overflow: auto;
        background: #fff;
        border: 1px solid #e9ecef;
        box-shadow: 0 8px 24px rgba(12,18,30,0.04);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.98rem;
        min-width: 1100px;
    }

    tbody td {
        padding: 8px 12px;
        border-bottom: 1px solid #f2f4f7;
        vertical-align: middle;
    }

    .col-year {
        width: 80px;
        font-weight: 700;
    }

    .col-age {
        width: 70px;
        color: var(--muted);
    }

    .col-milestones {
        width: 200px;
    }

    .legend {
        margin-left: auto;
        display: flex;
        gap: 8px;
        align-items: center;
        font-size: 0.95rem;
        color: var(--muted);
    }

        .legend .swatch {
            width: 14px;
            height: 14px;
            border-radius: 4px;
            display: inline-block;
        }

    .step-badge {
        width: 36px;
        height: 36px;
        min-width: 36px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: var(--brand-yellow);
        color: #111;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        margin-right: 8px;
        flex-shrink: 0;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
    }

    .partial-state {
        border: 2px solid #ffc107;
        background: #fff3cd;
        padding: 20px;
        border-radius: 10px;
    }

    /* Field Preview Styles */
    .field-preview {
        filter: grayscale(10%);
        opacity: 1.00;
        pointer-events: none;
        user-select: none;
    }

    .preview-card {
        background: #f8f9fa !important;
        border-color: #dee2e6 !important;
    }

        .preview-card .step-badge {
            opacity: 0.9;
        }

    .start-planning-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.4);
        backdrop-filter: blur(1px);
        z-index: 10;
    }

        .start-planning-overlay .empty-state {
            background: rgba(255, 255, 255, 0.95);
            border: 2px solid var(--brand-yellow);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            margin: 20px;
        }

    @@media (max-width:1024px) {
        table {
            min-width: 900px;
        }
    }
</style>

<div class="container-wire">
    <div class="page-header">
        <h3>Retirement Income Planner</h3>
    </div>

    <!-- Confirmation modal for clearing -->
    @if (showClearConfirm)
    {
        <div class="modal-backdrop fade show" style="z-index:1040"></div>
        <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
            <div class="modal-dialog modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm clear</h5>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="() => showClearConfirm = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to clear all saved values? This will reset your plan and cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-ghost" @onclick="() => showClearConfirm = false">Cancel</button>
                        <button class="btn btn-outline-danger" @onclick="PerformClearAll">Clear all</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Result modal (after clear) -->
    @if (showClearResult)
    {
        <div class="modal-backdrop fade show" style="z-index:1040"></div>
        <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
            <div class="modal-dialog modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Clear result</h5>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseClearResult"></button>
                    </div>
                    <div class="modal-body">
                        @if (clearSucceeded)
                        {
                            <p>All saved values were cleared successfully.</p>
                        }
                        else
                        {
                            <p>Clear failed. Your data may not have been removed from the server. The local plan was reset.</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="CloseClearResult">OK</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="top-area">
        <div class="container-fluid">
            <div class="row g-3">
                <!-- Left mini column (2) -->
                <div class="col-12 col-md-2">
                    <div class="panel">
                        <div style="font-weight:700; margin-bottom:8px;">Quick Links</div>
                        <div style="display:flex; flex-direction:column; gap:6px;">
                            <a href="/" class="badge">Home</a>
                            <a href="/guides/how-to-use-drawdown-calculator" class="badge">How to</a>
                            <a href="/contact" class="badge">Contact</a>
                        </div>
                        <div style="margin-top:10px; font-size:0.85rem; color:var(--muted);">Mini summary</div>
                        <div style="margin-top:6px; background:#f8fafc; padding:8px; border-radius:6px;">Post-Tax <br /><strong>@Model.TaxableBalance.ToString("C0")</strong></div>
                    </div>
                </div>

                <!-- Center combined column (8) -> Sections -->
                <div class="col-12 col-md-8">


                    <!-- Complete State - Normal View -->
                    <div class="panel section-panel">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                            <h4>Plan Input Data</h4>
                            <div style="display: flex; gap: 8px;">
                                <button class="btn btn-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                                    <i class="bi bi-gear" style="margin-right: 6px;"></i>
                                    Edit Plan
                                </button>
                            </div>
                        </div>

                        <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap:12px;">
                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">1</span>
                                        <div>Retirement ages & life expectancy</div>
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipYourRetirementAge = !showToolTipYourRetirementAge"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            You: @Model.RetirementAgeYou
                                        </span>
                                        @if (showToolTipYourRetirementAge)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Your Retirement Age:</strong> The age at which you plan to stop working and begin your retirement. This affects how long your portfolio needs to last and when you'll start drawing from retirement accounts.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYourRetirementAge = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipPartnerRetirementAge = !showToolTipPartnerRetirementAge"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Partner: @Model.RetirementAgePartner
                                        </span>
                                        @if (showToolTipPartnerRetirementAge)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Partner's Retirement Age:</strong> The age at which your partner plans to retire. Different retirement ages between partners can affect income timing and withdrawal strategies.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipPartnerRetirementAge = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipYourLifeExpectancy = !showToolTipYourLifeExpectancy"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Life exp (You): @DisplayLifeExpectancyYou
                                        </span>
                                        @if (showToolTipYourLifeExpectancy)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Your Life Expectancy:</strong> The age you expect to live to. Your retirement plan should ensure you don't outlive your savings. Consider adding a buffer to this estimate.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYourLifeExpectancy = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipPartnerLifeExpectancy = !showToolTipPartnerLifeExpectancy"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Life exp (Partner): @DisplayLifeExpectancyPartner
                                        </span>
                                        @if (showToolTipPartnerLifeExpectancy)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Partner's Life Expectancy:</strong> The age your partner expects to live to. Different life expectancies can affect survivor benefits and legacy planning.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipPartnerLifeExpectancy = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(1)">Edit</button>
                                </div>
                            </div>

                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">2</span>
                                        <div>Starting Balances & Returns</div>
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipTaxableBalance = !showToolTipTaxableBalance"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Taxable: @Model.TaxableBalance.ToString("C0")
                                        </span>
                                        @if (showToolTipTaxableBalance)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Taxable Accounts:</strong> Non-retirement investment accounts that are subject to annual taxes on dividends, interest, and capital gains. These provide flexibility but without tax advantages of retirement accounts.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableBalance = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipTraditionalBalance = !showToolTipTraditionalBalance"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Traditional: @Model.TraditionalBalance.ToString("C0")
                                        </span>
                                        @if (showToolTipTraditionalBalance)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Traditional Accounts:</strong> Tax-deferred retirement accounts like 401(k)s and Traditional IRAs. Contributions were tax-deductible, but withdrawals in retirement are taxed as ordinary income.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalBalance = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipRothBalance = !showToolTipRothBalance"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Roth: @Model.RothBalance.ToString("C0")
                                        </span>
                                        @if (showToolTipRothBalance)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Roth Accounts:</strong> Tax-free growth retirement accounts like Roth IRAs and Roth 401(k)s. Contributions were made with after-tax dollars, so qualified withdrawals in retirement are tax-free.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothBalance = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px; padding-top:6px; border-top:1px solid #e9ecef;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipInvestmentReturn = !showToolTipInvestmentReturn"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Expected Return: @Model.InvestmentReturn.ToString("F1")%
                                        </span>
                                        @if (showToolTipInvestmentReturn)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Expected Return:</strong> The average annual growth rate you expect from your investments before inflation. Historical average for a balanced portfolio is around 6-8%, but future returns may vary.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipInvestmentReturn = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipInflationRate = !showToolTipInflationRate"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Expected Inflation: @Model.InflationRate.ToString("F1")%
                                        </span>
                                        @if (showToolTipInflationRate)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Expected Inflation:</strong> The annual rate at which the purchasing power of money decreases. This affects your real returns and how much income you'll need in the future. Historical average is around 2-3%.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipInflationRate = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(2)">Edit</button>
                                </div>
                            </div>

                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">3</span>
                                        <div>Social Security</div>
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipSocialSecurityYou = !showToolTipSocialSecurityYou"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Expected SS/mo (You): @Model.SocialSecurityMonthlyYou.ToString("C0")
                                        </span>
                                        @if (showToolTipSocialSecurityYou)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Your Social Security Benefit:</strong> Your expected monthly Social Security payment. You can estimate this amount from your earnings record at ssa.gov or from annual statements. The average benefit in 2023 is around $1,800 per month.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSocialSecurityYou = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipSocialSecurityPartner = !showToolTipSocialSecurityPartner"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            Expected SS/mo (Partner): @Model.SocialSecurityMonthlyPartner.ToString("C0")
                                        </span>
                                        @if (showToolTipSocialSecurityPartner)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Partner's Social Security Benefit:</strong> Your partner's expected monthly Social Security payment. If your partner didn't work enough to qualify, they may still be eligible for spousal benefits (typically 50% of your benefit).
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSocialSecurityPartner = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipSSStartAgeYou = !showToolTipSSStartAgeYou"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            SS Start Age (You): @Model.SSStartAgeYou
                                        </span>
                                        @if (showToolTipSSStartAgeYou)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Your SS Start Age:</strong> The age you plan to claim Social Security. Benefits can start as early as 62 (reduced amount), at full retirement age (66-67 depending on birth year) for 100%, or delayed until 70 for maximum benefit (about 8% increase per year of delay).
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSStartAgeYou = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="d-flex align-items-center">
                                            <span class="bi bi-info-circle info-icon"
                                                  @onclick="() => showToolTipSSStartAgePartner = !showToolTipSSStartAgePartner"
                                                  tabindex="0"
                                                  title="Click for more info"></span>
                                            SS Start Age (Partner): @Model.SSStartAgePartner
                                        </span>
                                        @if (showToolTipSSStartAgePartner)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Partner's SS Start Age:</strong> The age your partner plans to claim Social Security. Couples often coordinate claiming strategies to maximize lifetime benefits, especially if there's a significant age or income difference.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSStartAgePartner = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(3)">Edit</button>
                                </div>
                            </div>

                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">4</span>
                                        <div>Reverse mortgage</div>
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">Start year: @Model.ReverseMortgageStartYear</div>
                                    <div class="small-note" style="margin-top:8px;">Monthly: @Model.ReverseMortgageMonthly.ToString("C0")</div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(4)">Edit</button>
                                </div>
                            </div>

                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">5</span>
                                        <div>Withdrawal Strategy</div>
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">One retired: @Model.AnnualWithdrawalOne.ToString("C0")</div>
                                    <div class="small-note" style="margin-top:8px;">Both retired: @Model.AnnualWithdrawalBoth.ToString("C0")</div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(5)">Edit</button>
                                </div>
                            </div>

                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">6</span>
                                        <div>Current Ages & Simulation</div>
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">You: @Model.CurrentAgeYou</div>
                                    <div class="small-note" style="margin-top:8px;">Partner: @Model.CurrentAgePartner</div>
                                    <div class="small-note" style="margin-top:8px;">Projection start year: @Model.SimulationStartYear </div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(6)">Edit</button>
                                </div>
                            </div>
                        </div>
                        @if (Model.IsModelEmpty() && showIntroModal)
                        {
                            <!-- Overlay with Start Planning Button -->
                            <div class="start-planning-overlay">
                                <div class="empty-state">
                                    <!-- X Close Button -->
                                    <div class="d-flex justify-content-end">
                                        <button type="button"
                                                class="btn btn-outline-secondary"
                                                aria-label="Close"
                                                @onclick="CloseIntroModal">
                                            &#10005;
                                        </button>
                                    </div>
                                    <div style="font-size: 3rem; color: #6c757d; margin-bottom: 16px;">🎯</div>
                                    <h4 style="color: #495057; margin-bottom: 16px;">Welcome to Retirement Planning!</h4>
                                    <p style="color: #6c757d; margin-bottom: 24px; max-width: 500px; margin-left: auto; margin-right: auto;">
                                        Let's create your personalized retirement income plan. We'll walk you through setting up your ages, account balances,
                                        Social Security, and withdrawal strategy in just a few quick steps.
                                    </p>
                                    <button class="btn btn-primary" style="padding: 12px 24px; font-size: 1.1rem; font-weight: 600;" @onclick="() => OpenWizard(1)">
                                        <i class="bi bi-play-circle" style="margin-right: 8px;"></i>
                                        Start Planning
                                    </button>
                                    <div style="margin-top: 16px; font-size: 0.9rem; color: #6c757d;">
                                        Takes about 2-3 minutes to complete
                                    </div>
                                    <div style="margin-top: 16px; display: flex; gap: 12px; justify-content: center;">
                                        <button class="btn btn-outline-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => showSampleDataModal = true">
                                            <i class="bi bi-clipboard-data" style="margin-right: 6px;"></i>
                                            Want to try with sample data? Click here
                                        </button>
                                    </div>
                                    @* <button class="btn btn-outline-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => showSetupChecklist = true">
                                        <i class="bi bi-list-check" style="margin-right: 6px;"></i>
                                        What data's missing
                                    </button> *@
                                    <!-- Don't Show Again Checkbox -->
                                    <div style="margin-top: 24px; padding-top: 18px; border-top: 2px solid #FFD600; background: linear-gradient(90deg,#fffbe6,#fffde7); border-radius: 8px; box-shadow: 0 2px 12px rgba(255,214,0,0.08);">
                                        <div class="form-check d-flex align-items-center justify-content-center gap-2">

                                            <input class="form-check-input"
                                                   type="checkbox"
                                                   id="dontShowIntroAgainCheck"
                                                   @onchange="OnDontShowIntroChanged"
                                                   style="width: 1.3em; height: 1.3em; border: 2px solid #C79A00; box-shadow: 0 0 0 0.15rem rgba(255,214,0,0.25);" />
                                            <label class="form-check-label"
                                                   for="dontShowIntroAgainCheck"
                                                   style="font-size: 1.15rem; font-weight: 700; color: #C79A00; letter-spacing: 0.02em; padding: 8px 18px; border-radius: 6px; background: rgba(255,214,0,0.12); margin-bottom: 0; box-shadow: 0 1px 4px rgba(255,214,0,0.10); display: inline-block;">
                                                Don't show this welcome screen again
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                </div>

                <!-- Right column (2) -->
                <div class="col-12 col-md-2">
                    <div class="panel">
                        <div style="font-weight:700; margin-bottom:8px; display:flex; justify-content:space-between; align-items:center;">
                            <div>Debug</div>
                            <div>
                                <button class="btn-ghost" style="padding:4px 6px; font-size:0.8rem;" @onclick="ToggleRightDebug">Toggle</button>
                            </div>
                        </div>
                        <div style="font-size:0.85rem; color:var(--muted);">Toggle messages</div>
                        <div style="margin-top:8px;">
                            <button class="btn-ghost" style="padding:4px 8px; font-size:0.8rem; width:100%;" @onclick="TestCalculation">
                                <i class="bi bi-calculator" style="margin-right: 4px;"></i>
                                Test Calc
                            </button>
                        </div>
                        @if (ShowRightDebug)
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:200px; overflow:auto;">
                                @foreach (var msg in DebugService.Messages.OrderByDescending(m => m.MessageTime))
                                {
                                    <div style="margin-bottom:6px;">
                                        <small style="color:var(--muted);">@msg.MessageTime.ToString("HH:mm:ss")</small>
                                        <div>@msg.MessageText</div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:120px; overflow:auto;">No messages</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Yearly Projection Grid -->
    <div class="grid-panel panel">
        <div class="grid-header">
            <div style="font-weight:800; font-size:1rem;">Yearly Projection</div>
            @if (!Model.IsModelEmpty())
            {
                <div class="legend">
                    <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--brand-yellow)"></span><small> Milestone</small></div>
                    <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--success)"></span><small> Growth</small></div>
                    <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--danger)"></span><small> Depletion</small></div>
                </div>
            }
        </div>

        @if (Model.IsModelEmpty())
        {
            <!-- Empty State Message for Grid -->
            <div style="text-align: center; padding: 60px 20px; color: #6c757d;">
                <div style="font-size: 2.5rem; margin-bottom: 16px;">📊</div>
                <h5 style="color: #495057; margin-bottom: 12px;">No Projection Available</h5>
                <p style="margin-bottom: 20px; max-width: 400px; margin-left: auto; margin-right: auto;">
                    Complete your retirement plan setup to see year-by-year projections of your income and account balances.
                </p>
                <button class="btn btn-primary" @onclick="() => OpenWizard(1)">
                    <i class="bi bi-play-circle" style="margin-right: 8px;"></i>
                    Get Started
                </button>
            </div>
        }
        else if (Model.IsModelPartiallyComplete())
        {
            <!-- Partial State Message -->
            <div style="text-align: center; padding: 40px 20px; background: #fff3cd; border-radius: 8px; color: #856404;">
                <div style="font-size: 2rem; margin-bottom: 12px;">⏳</div>
                <h6 style="margin-bottom: 12px;">Projection Incomplete</h6>
                <p style="margin-bottom: 16px;">
                    Add missing information to your retirement plan to generate accurate year-by-year projections.
                </p>
                <button class="btn" style="background: #ffc107; border-color: #ffc107; color: #000;" @onclick="() => OpenWizard(1)">
                    Complete Setup
                </button>
            </div>
        }
        else if (!YearRows.Any())
        {
            <!-- No Data Generated Yet -->
            <div style="text-align: center; padding: 40px 20px; color: #6c757d;">
                <div style="font-size: 2rem; margin-bottom: 12px;">🔄</div>
                <h6 style="color: #495057; margin-bottom: 12px;">Generating Projections...</h6>
                <p>Please wait while we calculate your retirement projections.</p>
            </div>
        }
        else
        {
            <!-- Normal Grid View -->
            <div class="grid">
                <table aria-label="Yearly grid wireframe">
                    <thead class="table-light">
                        <tr>
                            <th class="col-year" style="text-align:right; width:120px; padding:18px 12px; background-color: var(--background-subtle);">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Year</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Calendar</span>
                                </div>
                            </th>
                            <th class="col-age" style="padding:18px 12px; background-color: var(--background-subtle);">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Your</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Age</span>
                                </div>
                            </th>
                            <th class="col-age" style="padding:18px 12px; background-color: var(--background-subtle);">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Partner</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Age</span>
                                </div>
                            </th>
                            <th class="col-milestones" style="padding:18px 12px; background-color: var(--background-subtle);">
                                <div style="display:flex;flex-direction:column;align-items:flex-start;text-align:left;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Milestones</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Events</span>
                                </div>
                            </th>
                            <th class="text-end" style="padding:18px 12px; background-color: var(--background-subtle);">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Amount</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Needed</span>
                                </div>
                            </th>
                            <th class="col-income-sources" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Social Security</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">You</span>
                                </div>
                            </th>
                            <th class="col-income-sources" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Social Security</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Partner</span>
                                </div>
                            </th>
                            <th class="col-income-sources" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Reverse</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Mortgage</span>
                                </div>
                            </th>
                            <th class="text-end col-account-activity" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Growth</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Investment</span>
                                </div>
                            </th>
                            <th class="text-end col-account-activity" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Withdrawal</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Taxable</span>
                                </div>
                            </th>
                            <th class="text-end col-account-activity" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Withdrawal</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Traditional</span>
                                </div>
                            </th>
                            <th class="text-end col-account-activity" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Withdrawal</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Roth</span>
                                </div>
                            </th>
                            <th class="text-end" style="padding:18px 12px; background-color: var(--background-subtle); border-left: 1px solid #e9ecef;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Taxes</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Paid</span>
                                </div>
                            </th>
                            <th class="text-end col-ending-balances" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Taxable</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Ending</span>
                                </div>
                            </th>
                            <th class="text-end col-ending-balances" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Traditional</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Ending</span>
                                </div>
                            </th>
                            <th class="text-end col-ending-balances" style="padding:18px 12px;">
                                <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                    <span style="font-size:1.05rem;font-weight:800;color:#111;">Roth</span>
                                    <span style="font-size:0.78rem;font-weight:600;opacity:.9;color:#6B7280;">Ending</span>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in YearRows)
                        {
                            var rowClass = string.IsNullOrEmpty(row.Notes) ? string.Empty : "depleted";
                            <tr class="@rowClass">
                                <td class="col-year">@row.Year</td>
                                <td class="col-age">@row.AgeYou</td>
                                <td class="col-age">@row.AgePartner</td>
                                <td class="col-milestones">@row.Milestone</td>
                                <td class="text-end" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.AmountNeeded.ToString("C0")
                                </td>
                                <td class="text-end col-income-sources" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.SSYou.ToString("C0")
                                </td>
                                <td class="text-end col-income-sources" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.SSPartner.ToString("C0")
                                </td>
                                <td class="text-end col-income-sources" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.ReverseMortgage.ToString("C0")
                                </td>
                                <td class="text-end col-account-activity" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.Growth.ToString("C0")
                                </td>
                                <td class="text-end col-account-activity" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.TaxableWithdrawal.ToString("C0")
                                </td>
                                <td class="text-end col-account-activity" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.TraditionalWithdrawal.ToString("C0")
                                </td>
                                <td class="text-end col-account-activity" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.RothWithdrawal.ToString("C0")
                                </td>
                                <td class="text-end" style="color:#F56565; font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums; border-left: 1px solid #f2f4f7;">
                                    @row.TaxesPaid.ToString("C0")
                                </td>
                                <td class="text-end col-ending-balances" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.EndingTaxable.ToString("C0")
                                </td>
                                <td class="text-end col-ending-balances" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.EndingTraditional.ToString("C0")
                                </td>
                                <td class="text-end col-ending-balances" style="font-size:0.78rem; font-weight:600; text-align: right; font-variant-numeric: tabular-nums;">
                                    @row.EndingRoth.ToString("C0")
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>

    <!-- RMD Notice -->
    <div class="mt-3 p-3" style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #0d6efd; margin-top: 2px;">
                <i class="bi bi-info-circle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #495057; margin-bottom: 4px;">Required Minimum Distributions (RMDs)</div>
                <div style="font-size: 0.9rem; color: #6c757d; line-height: 1.4;">
                    This calculator does not currently factor in Required Minimum Distributions (RMDs) that begin at age 73 for traditional retirement accounts.
                    RMDs may require larger withdrawals than your planned amounts, potentially affecting your retirement strategy.
                    An advanced version with RMD calculations is coming soon.
                </div>
            </div>
        </div>
    </div>

    <!-- Important Disclaimers -->
    <div class="mt-3 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #856404; margin-top: 2px;">
                <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">Important Disclaimers</div>
                <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                    <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational and planning purposes only. Results are estimates based on your inputs and assumptions. This is not personalized financial, tax, or investment advice.</p>
                    <p style="margin-bottom: 8px;"><strong>Market Risk:</strong> Actual investment returns will vary and may be negative. Past performance does not guarantee future results. Market conditions, economic changes, and other factors can significantly impact outcomes.</p>
                    <p style="margin-bottom: 8px;"><strong>Tax Considerations:</strong> Tax laws are complex and subject to change. This calculator uses simplified tax calculations that may not reflect your actual tax situation, including state taxes, tax bracket changes, or future legislation.</p>
                    <p style="margin-bottom: 8px;"><strong>Health Care Costs:</strong> Medicare premiums, long-term care, and rising healthcare costs are not specifically modeled and could significantly impact your retirement expenses.</p>
                    <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial, tax, and legal professionals who can provide personalized advice based on your complete financial situation.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int _wizardOpenStep = 1;
    private bool showClearConfirm = false;
    private bool showClearResult = false;
    private bool clearSucceeded = false;
    private bool showIntroModal = true; // Show by default unless user has opted out
    private bool dontShowIntroAgain = false;

    private bool showToolTipYourRetirementAge = false;
    private bool showToolTipPartnerRetirementAge = false;
    private bool showToolTipYourLifeExpectancy = false;
    private bool showToolTipPartnerLifeExpectancy = false;

    private bool showToolTipTaxableBalance = false;
    private bool showToolTipTraditionalBalance = false;
    private bool showToolTipRothBalance = false;
    private bool showToolTipInvestmentReturn = false;
    private bool showToolTipInflationRate = false;

    private bool showToolTipSocialSecurityYou = false;
    private bool showToolTipSocialSecurityPartner = false;
    private bool showToolTipSSStartAgeYou = false;
    private bool showToolTipSSStartAgePartner = false;

    // Helper properties to display life expectancy as age not calendar year
    private int DisplayLifeExpectancyYou => ComputeLifeExpectancyAge(Model?.LifeExpectancyYou ?? 0, Model?.CurrentAgeYou ?? 0);
    private int DisplayLifeExpectancyPartner => ComputeLifeExpectancyAge(Model?.LifeExpectancyPartner ?? 0, Model?.CurrentAgePartner ?? 0);

    private int ComputeLifeExpectancyAge(int lifeValue, int currentAge)
    {
        if (lifeValue <= 0) return 0;
        if (lifeValue > 1900)
        {
            // stored as a calendar year; convert to age if currentAge available, otherwise estimate from year
            if (currentAge > 0)
            {
                return currentAge + (lifeValue - DateTime.Now.Year);
            }
            else
            {
                // fallback: compute naive age as year - now
                return Math.Max(0, lifeValue - DateTime.Now.Year);
            }
        }

        // already an age
        return lifeValue;
    }

    // Keep existing code-behind methods in the partial class; helper methods for buttons call into the component's code-behind.
    private void OpenWizard(int step)
    {
        _wizardOpenStep = step;
        _isDataAvaiableForTheUser = true;
    }

    private void ConfirmClearAll()
    {
        // show confirmation modal
        showClearConfirm = true;
    }

    private async Task PerformClearAll()
    {
        showClearConfirm = false;
        StateHasChanged();

        try
        {
            // call into the partial class ClearAll implementation (in code-behind)
            clearSucceeded = await ClearAllAndOpenWizardAsync();
        }
        catch
        {
            clearSucceeded = false;
        }

        // show result modal
        showClearResult = true;
        StateHasChanged();
    }

    private void CloseClearResult()
    {
        showClearResult = false;

        // If clear succeeded, open wizard for re-entry (model already set by code-behind)
        if (clearSucceeded)
        {
            _isDataAvaiableForTheUser = true;
        }

        StateHasChanged();
    }

    private async Task SaveAndClose()
    {
        await Save();
        _isDataAvaiableForTheUser = false;
        StateHasChanged();
    }

    private bool showSetupChecklist = false;

    private void CompleteSection(int stepNumber)
    {
        showSetupChecklist = false;
        OpenWizard(stepNumber);
    }

    private void ContinueSetup()
    {
        var nextStep = Model.GetNextIncompleteStep();
        showSetupChecklist = false;
        OpenWizard(nextStep);
    }

    private bool showSampleDataModal = false;

    private async Task HandleSampleDataSelected(CalendarSpendingModel sampleModel)
    {
        Model = sampleModel;
        Model.Calculate();
        await Save();
        StateHasChanged();
    }


    private async Task HandleIntroModal()
    {
        showIntroModal = false;

        // Only show intro modal if model is empty and user hasn't opted out
        if (Model == null || Model.IsModelEmpty())
        {
            var hideIntro = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "finplan-retirement-income-planner-hide-intro");
            showIntroModal = string.IsNullOrEmpty(hideIntro) || !hideIntro.Equals("true", StringComparison.OrdinalIgnoreCase);
        }
    }

    private async Task OnDontShowIntroChanged(ChangeEventArgs e)
    {
        bool checkedState = e?.Value is bool b && b;
        string key = "finplan-retirement-income-planner-hide-intro";

        if (checkedState)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, "true");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
    }

    // Add these new methods
    private void CloseIntroModal()
    {
        showIntroModal = false;
        StateHasChanged();

    }
    private void TestCalculation()
    {
        try
        {
            DebugService.AddMessage("=== Test calculation started ===");

            // Log current model state
            DebugService.AddMessage($"Model empty: {Model.IsModelEmpty()}");
            DebugService.AddMessage($"Model partial: {Model.IsModelPartiallyComplete()}");
            DebugService.AddMessage($"Model complete: {Model.IsModelComplete()}");

            // Log key values before calculation
            DebugService.AddMessage($"Current ages: You={Model.CurrentAgeYou}, Partner={Model.CurrentAgePartner}");
            DebugService.AddMessage($"Retirement ages: You={Model.RetirementAgeYou}, Partner={Model.RetirementAgePartner}");
            DebugService.AddMessage($"Life expectancy: You={Model.LifeExpectancyYou}, Partner={Model.LifeExpectancyPartner}");
            DebugService.AddMessage($"Simulation start year: {Model.SimulationStartYear}");

            // FIX: Convert life expectancy from ages to calendar years
            var currentYear = DateTime.Now.Year;
            var lifeExpectancyYearYou = currentYear + (Model.LifeExpectancyYou - Model.CurrentAgeYou);
            var lifeExpectancyYearPartner = currentYear + (Model.LifeExpectancyPartner - Model.CurrentAgePartner);

            DebugService.AddMessage($"Converted life expectancy years: You={lifeExpectancyYearYou}, Partner={lifeExpectancyYearPartner}");

            // Temporarily update the model with calendar years
            var originalLifeYou = Model.LifeExpectancyYou;
            var originalLifePartner = Model.LifeExpectancyPartner;

            Model.LifeExpectancyYou = lifeExpectancyYearYou;
            Model.LifeExpectancyPartner = lifeExpectancyYearPartner;

            DebugService.AddMessage($"Balances: Tax={Model.TaxableBalance:C0}, Trad={Model.TraditionalBalance:C0}, Roth={Model.RothBalance:C0}");
            DebugService.AddMessage($"Withdrawals: One={Model.AnnualWithdrawalOne:C0}, Both={Model.AnnualWithdrawalBoth:C0}");

            // Clear existing rows
            Model.YearRows.Clear();
            DebugService.AddMessage("Cleared existing YearRows");

            // Call the calculation
            Model.Calculate();

            DebugService.AddMessage($"=== Calculation completed. YearRows count: {Model.YearRows.Count} ===");

            // Restore original values
            Model.LifeExpectancyYou = originalLifeYou;
            Model.LifeExpectancyPartner = originalLifePartner;

            // Log first few rows if any exist
            if (Model.YearRows.Count > 0)
            {
                for (int i = 0; i < Math.Min(3, Model.YearRows.Count); i++)
                {
                    var row = Model.YearRows[i];
                    DebugService.AddMessage($"Row {i}: Year={row.Year}, AgeYou={row.AgeYou}, AgePartner={row.AgePartner}");
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Calculation error: {ex.Message}");
            DebugService.AddMessage($"Stack trace: {ex.StackTrace}");
        }
    }
}