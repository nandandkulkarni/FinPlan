@page "/savings-tabbed"
@using System.ComponentModel.DataAnnotations
@using FinPlan.Shared
@using FinPlan.Web.Components
@using FinPlan.Web.Services
@using FinPlan.Web.Models
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@rendermode InteractiveServer
@implements IDisposable
@inject FinPlan.Web.Services.DebugMessageService DebugService

<PageTitle>Family Savings Planner</PageTitle>

<style>
    .tab-active-custom {
        background-color: #FFD600 !important; /* Bright yellow */
        color: #222 !important; /* Black text */
        font-weight: 600;
        border: 1px solid #FFD600 !important;
        border-bottom: none !important;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s, color 0.2s;
    }
    /* Dark theme styles */
    .dark-theme {
        background-color: #121212;
        color: #E2E8F0;
    }

        .dark-theme .card {
            background-color: #1E1E1E;
            border-color: #333;
        }

        .dark-theme .card-header {
            background-color: #252525 !important;
            border-bottom-color: #333;
            color: #E2E8F0 !important;
        }

        .dark-theme .form-control {
            background-color: #252525;
            border-color: #333;
            color: #E2E8F0;
        }

            .dark-theme .form-control:focus {
                background-color: #2D2D2D;
                box-shadow: 0 0 0 0.25rem rgba(109, 93, 252, 0.25);
            }

        .dark-theme .btn-primary {
            background-color: #6D5DFC;
            border-color: #6D5DFC;
        }

            .dark-theme .btn-primary:hover {
                background-color: #5A4AE3;
                border-color: #5A4AE3;
            }

        .dark-theme .text-primary {
            color: #6D5DFC !important;
        }

        .dark-theme .text-success {
            color: #38B2AC !important;
        }

        .dark-theme .text-info {
            color: #4FD1C5 !important;
        }

        .dark-theme .text-warning {
            color: #F6AD55 !important;
        }

        .dark-theme .progress-bar.bg-info {
            background-color: #4FD1C5 !important;
        }

        .dark-theme .progress-bar.bg-success {
            background-color: #38B2AC !important;
        }

        .dark-theme .table {
            color: #E2E8F0;
        }

        .dark-theme .table-striped > tbody > tr:nth-of-type(odd) {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .dark-theme .form-text {
            color: #A0AEC0;
        }

        .dark-theme .interval-summary {
            background-color: #252525;
        }

            .dark-theme .interval-summary:hover {
                background-color: #2D2D2D;
            }

        .dark-theme .card.bg-light {
            background-color: #252525 !important;
        }

        .dark-theme .alert-info {
            background-color: rgba(79, 209, 197, 0.15);
            color: #E2E8F0;
            border-color: rgba(79, 209, 197, 0.4);
        }

    .theme-toggle {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;


    }
</style>

@inject IJSRuntime JSRuntime

<div class="container-fluid @(isDarkTheme ? "dark-theme" : "")">
    <!-- Theme toggle button -->
    <button @onclick="ToggleTheme" class="btn btn-sm theme-toggle @(isDarkTheme ? "btn-light" : "btn-dark")">
        <i class="bi @(isDarkTheme ? "bi-sun" : "bi-moon")"></i>
        @(isDarkTheme ? "Light Mode" : "Dark Mode")
    </button>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <button class="nav-link @(activeTab == "your" ? "tab-active-custom" : "")"
                    @onclick="YourTabClick">
                Your Savings
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(activeTab == "partner" ? "tab-active-custom" : "")"
                    @onclick="PartnerTabClick">
                Partner Savings
            </button>
        </li>
    </ul>
    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header @(isDarkTheme ? "" : "bg-primary text-white")">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-calculator"></i> Retirement Savings Planner
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@calculatorModel" OnValidSubmit="@Calculate" FormName="SavingsCalculatorForm">
                        <DataAnnotationsValidator />

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Initial Amount ($)</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTaxableAmount" class="form-label">Post Tax(Post-tax)</label>
                                        <input type="number"
                                               id="initialTaxableAmount"
                                               class="form-control"
                                               @bind="calculatorModel.InitialTaxableAmount"
                                               @onblur="@(() => SaveUserSavingsAsync())" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTraditionalAmount" class="form-label">Traditional (Pre-tax)</label>
                                        <FormattedInputNumber id="initialTraditionalAmount" class="form-control"
                                                              @bind-value="calculatorModel.InitialTraditionalAmount"
                                                              OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialRothAmount" class="form-label">Roth (Post-tax)</label>
                                        <FormattedInputNumber id="initialRothAmount" class="form-control"
                                                              @bind-value="calculatorModel.InitialRothAmount"
                                                              OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Initial: $@(calculatorModel.InitialTaxableAmount + calculatorModel.InitialTraditionalAmount + calculatorModel.InitialRothAmount)</small>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Monthly Contributions</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTaxableContribution" class="form-label">Post Tax(Post-tax)</label>
                                        <FormattedInputNumber id="monthlyTaxableContribution" class="form-control"
                                                              @bind-value="calculatorModel.MonthlyTaxableContribution"
                                                              OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <small class="form-text">Regular brokerage account</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTraditionalContribution" class="form-label">Traditional (Pre-tax)</label>
                                        <FormattedInputNumber id="monthlyTraditionalContribution" class="form-control"
                                                              @bind-value="calculatorModel.MonthlyTraditionalContribution"
                                                              OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyRothContribution" class="form-label">Roth (Post-tax)</label>
                                        <FormattedInputNumber id="monthlyRothContribution" class="form-control"
                                                              @bind-value="calculatorModel.MonthlyRothContribution"
                                                              OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Monthly: $@(calculatorModel.MonthlyTaxableContribution + calculatorModel.MonthlyTraditionalContribution + calculatorModel.MonthlyRothContribution)</small>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Annual Growth Rate (%)</h5>
                                    </div>
                                    <div class="card-body">
                                        <input type="number" id="annualGrowthRate" class="form-control"
                                               @bind-value="calculatorModel.AnnualGrowthRate"
                                               @oninput="@(e => { if (autoCalculate) OnInputChanged(); })"
                                               step="0.1"
                                               OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <ValidationMessage For="@(() => calculatorModel.AnnualGrowthRate)" class="text-danger" />
                                        <small class="form-text">Enter as percentage (e.g., 7 for 7%)</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Compounding Frequency</h5>
                                    </div>
                                    <div class="card-body">
                                        <input type="text" id="compoundingFrequency" class="form-control" value="Monthly" readonly />
                                        <small class="form-text">Interest is compounded monthly</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Retirement Timeline</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="currentAge" class="form-label">Current Age</label>
                                        <input type="number" id="currentAge" class="form-control"
                                               @bind-value="calculatorModel.CurrentAge"
                                               @oninput="@(e => { if (autoCalculate) OnInputChanged(); })"
                                               OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <ValidationMessage For="@(() => calculatorModel.CurrentAge)" class="text-danger" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="retirementAge" class="form-label">Retirement Age</label>
                                        <input type="number" id="retirementAge" class="form-control"
                                               @bind-value="calculatorModel.RetirementAge"
                                               @oninput="@(e => { if (autoCalculate) OnInputChanged(); })"
                                               OnBlur="@(() => SaveUserSavingsAsync())" />
                                        <ValidationMessage For="@(() => calculatorModel.RetirementAge)" class="text-danger" />
                                        <small class="form-text">Most people retire between 60-67</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="years" class="form-label">Years Until Retirement</label>
                                        <input type="text" id="years" class="form-control bg-light" value="@calculatorModel.Years" readonly />
                                        <small class="form-text">Automatically calculated</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Investment Settings</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Post TaxAccount Income Type</label>
                                        <select class="form-control" @bind="calculatorModel.TaxableIncomeType" @bind:after="HandleSelectChange">
                                            <option value="@IncomeType.MixedInvestment">Mixed Investment (default mix)</option>
                                            <option value="@IncomeType.MostlyDividends">Mostly Dividends</option>
                                            <option value="@IncomeType.MostlyLongTermGains">Mostly Long-Term Capital Gains</option>
                                            <option value="@IncomeType.MostlyInterest">Mostly Interest/Short-Term Gains</option>
                                        </select>
                                        <div class="form-text">This affects how income from Post Taxinvestments is taxed annually</div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Tax Bracket</label>
                                        <select class="form-control" @bind="calculatorModel.TaxBracket" @bind:after="HandleSelectChange">
                                            <option value="@TaxBracket.Low">Low (10-12% ordinary, 0% long-term)</option>
                                            <option value="@TaxBracket.Medium">Medium (22-24% ordinary, 15% long-term)</option>
                                            <option value="@TaxBracket.High">High (32-35% ordinary, 20% long-term)</option>
                                        </select>
                                        <div class="form-text">Your current federal income tax bracket</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center mb-3">
                            <div class="form-check me-auto">
                                <input class="form-check-input" type="checkbox" id="autoCalculate" @bind="autoCalculate" />
                                <label class="form-check-label" for="autoCalculate">
                                    Auto-calculate (updates immediately as you type)
                                </label>
                            </div>
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@autoCalculate">
                                <i class="bi bi-calculator"></i> Calculate Savings
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-lg-8">
            @if (results != null)
            {
                <div class="card">
                    <div class="card-header @(isDarkTheme ? "" : "bg-success text-white")">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3 class="card-title mb-0">
                                <i class="bi bi-graph-up"></i> Results
                            </h3>
                            <ExportButton Results="@results"
                                          YearlyBreakdown="@yearlyBreakdown"
                                          Model="@calculatorModel"
                                          Text="Export to Excel"
                                          CssClass="@(isDarkTheme ? "btn btn-outline-light btn-sm" : "btn btn-light btn-sm")" />
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-primary">@results.FinalAmount.ToString("C")</h4>
                                        <p class="mb-0">Final Amount</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-success">@results.TotalInterestEarned.ToString("C")</h4>
                                        <p class="mb-0">Interest Earned</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-info">@results.TotalContributions.ToString("C")</h4>
                                        <p class="mb-0">Total Contributions</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-warning">@calculatorModel.AnnualGrowthRate.ToString("F1")%</h4>
                                        <p class="mb-0">Annual Growth Rate</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="progress mb-3" style="height: 30px;">
                            <div class="progress-bar bg-info" role="progressbar"
                                 style="width: @(results.TotalContributions / results.FinalAmount * 100)%">
                                Your Savings
                            </div>
                            <div class="progress-bar bg-success" role="progressbar"
                                 style="width: @(results.TotalInterestEarned / results.FinalAmount * 100)%">
                                Growth from Interest
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header" style="cursor: pointer;" @onclick="ToggleSavingsBreakdown">
                                <strong>
                                    <i class="bi bi-@(isSavingsBreakdownExpanded ? "chevron-down" : "chevron-right")"></i>
                                    💡 How Your Money Grows
                                </strong>
                            </div>
                            @if (isSavingsBreakdownExpanded)
                            {
                                <div class="card-body">
                                    You'll contribute <strong>@results.TotalContributions.ToString("C")</strong> over @calculatorModel.Years years,
                                    and compound interest will add <strong>@results.TotalInterestEarned.ToString("C")</strong> more!
                                    <br><br>
                                    <div>
                                        <strong>Account Breakdown:</strong><br>
                                        <ul class="mb-0">
                                            <li>Traditional (401k/IRA): <strong>@results.TaxDeferredBalance.ToString("C")</strong></li>
                                            <li>Roth accounts: <strong>@results.RothBalance.ToString("C")</strong></li>
                                            <li>Post Tax accounts: <strong>@results.TaxableBalance.ToString("C")</strong></li>
                                        </ul>

                                        <div class="mt-3 mb-0">
                                            <strong>Income Type Breakdown:</strong>
                                            <div class="progress mt-1 mb-2" style="height: 20px;">
                                                <div class="progress-bar bg-success" role="progressbar"
                                                     style="width: @(results.QualifiedDividendIncome / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                     title="Qualified Dividends: @results.QualifiedDividendIncome.ToString("C")">
                                                    Qualified
                                                </div>
                                                <div class="progress-bar bg-info" role="progressbar"
                                                     style="width: @(results.LongTermCapitalGains / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                     title="Long-Term Capital Gains: @results.LongTermCapitalGains.ToString("C")">
                                                    LTCG
                                                </div>
                                                <div class="progress-bar bg-warning" role="progressbar"
                                                     style="width: @(results.NonQualifiedIncome / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                     title="Non-Qualified Income: @results.NonQualifiedIncome.ToString("C")">
                                                    Interest
                                                </div>
                                                <div class="progress-bar bg-danger" role="progressbar"
                                                     style="width: @(results.ShortTermCapitalGains / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                     title="Short-Term Capital Gains: @results.ShortTermCapitalGains.ToString("C")">
                                                    STCG
                                                </div>
                                            </div>
                                            <small>Effective tax rate on Post Taxinvestments: <strong>@results.EffectiveTaxRate.ToString("F1")%</strong></small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="card mb-3">
                            <div class="card-header" style="cursor: pointer;" @onclick="TogglePlanSummary">
                                <h5 class="mb-0">
                                    <i class="bi bi-@(isPlanSummaryExpanded ? "chevron-down" : "chevron-right")"></i>
                                    Your Retirement Plan Summary
                                </h5>
                            </div>
                            @if (isPlanSummaryExpanded)
                            {
                                <div class="card-body">
                                    <ul class="list-unstyled mb-0">
                                        <li><strong>Current Age:</strong> @calculatorModel.CurrentAge years old</li>
                                        <li><strong>Target Retirement Age:</strong> @calculatorModel.RetirementAge years old</li>
                                        <li><strong>Years to Save:</strong> @calculatorModel.Years years</li>
                                        <li><strong>Initial Post TaxAmount:</strong> @calculatorModel.InitialTaxableAmount.ToString("C")</li>
                                        <li><strong>Initial Traditional Amount:</strong> @calculatorModel.InitialTraditionalAmount.ToString("C")</li>
                                        <li><strong>Initial Roth Amount:</strong> @calculatorModel.InitialRothAmount.ToString("C")</li>
                                        <li><strong>Total Initial Amount:</strong> @calculatorModel.InitialAmount.ToString("C")</li>
                                        <li><strong>Monthly Post TaxContribution:</strong> @calculatorModel.MonthlyTaxableContribution.ToString("C")</li>
                                        <li><strong>Monthly Traditional Contribution:</strong> @calculatorModel.MonthlyTraditionalContribution.ToString("C")</li>
                                        <li><strong>Monthly Roth Contribution:</strong> @calculatorModel.MonthlyRothContribution.ToString("C")</li>
                                        <li><strong>Total Monthly Contribution:</strong> @(calculatorModel.MonthlyTaxableContribution + calculatorModel.MonthlyTraditionalContribution + calculatorModel.MonthlyRothContribution).ToString("C")</li>
                                        <li><strong>Investment Income Type:</strong> @GetIncomeTypeDescription(calculatorModel.TaxableIncomeType)</li>
                                        <li><strong>Tax Bracket:</strong> @GetTaxBracketDescription(calculatorModel.TaxBracket)</li>
                                        <li><strong>Total Taxes Paid:</strong> @results.TotalTaxesPaid.ToString("C")</li>
                                        <li><strong>Expected Growth Rate:</strong> @calculatorModel.AnnualGrowthRate% annually</li>
                                        <li><strong>Compounding:</strong> @GetCompoundingText()</li>
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (yearlyBreakdown.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-graph-up-arrow"></i> Your Age-Based Retirement Journey
                                @if (calculatorModel.Years > 10)
                                {
                                    <small class="text-muted ms-2">Click age ranges to see yearly details (@intervalSummaries.Count intervals)</small>
                                }
                            </h5>
                        </div>
                        <div class="card-body" style="max-height: 700px; overflow-y: auto;">
                            @if (calculatorModel.Years > 10 && intervalSummaries.Any())
                            {
                                <!-- 5-Year Interval View for Long-Term Plans -->
                                @foreach (var interval in intervalSummaries)
                                {
                                    var isExpanded = expandedIntervals.Contains(interval.StartYear);
                                    <div class="interval-group mb-3">
                                        <!-- Interval Summary Row -->
                                        <div class="interval-summary p-3 border rounded @(isExpanded ? "border-primary" : "")"
                                             style="cursor: pointer; transition: all 0.2s ease;">
                                            <div class="row align-items-center" @onclick="@(() => ToggleInterval(interval.StartYear))">
                                                <div class="col-md-3">
                                                    <h6 class="mb-1">
                                                        <i class="bi bi-@(isExpanded ? "chevron-down" : "chevron-right")"></i>
                                                        Ages @interval.StartAge-@interval.EndAge
                                                    </h6>
                                                    @if (!string.IsNullOrEmpty(interval.MilestoneAchieved))
                                                    {
                                                        <small class="text-success fw-bold">@interval.MilestoneAchieved</small>
                                                    }
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>@interval.FinalBalance.ToString("C")</strong>
                                                    <br><small class="text-muted">Final Balance</small>
                                                </div>
                                                <div class="col-md-3">
                                                    <span class="text-success">+@interval.TotalGrowth.ToString("C")</span>
                                                    <br><small class="text-muted">Interest Earned</small>
                                                </div>
                                                <div class="col-md-3">
                                                    <span class="text-info">@interval.TotalContributions.ToString("C")</span>
                                                    <br><small class="text-muted">You Contributed</small>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Expanded Yearly Details -->
                                        @if (isExpanded)
                                        {
                                            <div class="yearly-details mt-2 ms-3 border-start border-primary ps-3">
                                                <div class="table-responsive">
                                                    <table class="table table-sm">
                                                        <thead class="table-light">
                                                            <tr>
                                                                <th>Year/Age</th>
                                                                <th>Balance</th>
                                                                <th>Interest</th>
                                                                <th>Contributions</th>
                                                                <th>Taxable</th>
                                                                <th>Traditional</th>
                                                                <th>Roth</th>
                                                                <th>Taxes</th>
                                                                <th>Tax Rates</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var year in interval.YearlyDetails)
                                                            {
                                                                <tr>
                                                                    <td>Year @year.Year (@(calculatorModel.CurrentAge + year.Year))</td>
                                                                    <td>@year.Balance.ToString("C")</td>
                                                                    <td class="text-success">@year.InterestEarned.ToString("C")</td>
                                                                    <td class="text-info">@year.ContributionsThisYear.ToString("C")</td>
                                                                    <td>@year.TaxableBalance.ToString("C")</td>
                                                                    <td>@year.TaxDeferredBalance.ToString("C")</td>
                                                                    <td>@year.RothBalance.ToString("C")</td>
                                                                    <td class="text-danger">@year.TaxesPaid.ToString("C")</td>
                                                                    <td>
                                                                        <span title="Applied to: @GetTaxBreakdownTooltip(year, calculatorModel.TaxableIncomeType)">
                                                                            @GetTaxRatesDisplay(calculatorModel.TaxBracket)
                                                                        </span>
                                                                    </td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <!-- Traditional Year-by-Year View for Short-Term Plans -->
                                <div class="table-responsive">
                                    <table class="table table-sm table-striped">
                                        <thead>
                                            <tr>
                                                <th>Year/Age</th>
                                                <th>Balance</th>
                                                <th>Interest</th>
                                                <th>Contributions</th>
                                                <th>Taxable</th>
                                                <th>Traditional</th>
                                                <th>Roth</th>
                                                <th>Taxes Paid</th>
                                                <th>Tax Rates</th>
                                                <th>Tax Rates</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var year in yearlyBreakdown)
                                            {
                                                <tr>
                                                    <td>Year @year.Year (@(calculatorModel.CurrentAge + year.Year))</td>
                                                    <td>@year.Balance.ToString("C")</td>
                                                    <td>@year.InterestEarned.ToString("C")</td>
                                                    <td>@year.ContributionsThisYear.ToString("C")</td>
                                                    <td>@year.TaxableBalance.ToString("C")</td>
                                                    <td>@year.TaxDeferredBalance.ToString("C")</td>
                                                    <td>@year.RothBalance.ToString("C")</td>
                                                    <td class="text-danger">@year.TaxesPaid.ToString("C")</td>
                                                    <td>
                                                        <span title="Applied to: @GetTaxBreakdownTooltip(year, calculatorModel.TaxableIncomeType)">
                                                            @GetTaxRatesDisplay(calculatorModel.TaxBracket)
                                                        </span>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private bool isDarkTheme = false;
    private bool autoCalculate = true;
    private System.Timers.Timer? debounceTimer;

    private string activeTab = "your";
    private string userMessage = string.Empty;
    private string productMessage = string.Empty;

    private void ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        Console.WriteLine($"Theme toggled to {(isDarkTheme ? "dark" : "light")} mode");
    }

    private void AddDebugMessage(string message)
    {
        DebugService.AddMessage($"{DateTime.Now:HH:mm:ss} - {message}");
    }



    [SupplyParameterFromForm]
    public SavingsCalculatorModel calculatorModel { get; set; } = new();
    private SavingsResults? results;
    private List<YearlyBreakdown> yearlyBreakdown = new();
    private List<IntervalSummary> intervalSummaries = new();
    private HashSet<int> expandedIntervals = new();
    private bool isPlanSummaryExpanded = true; // Default to expanded
    private bool isSavingsBreakdownExpanded = true; // Default to expanded
    string calculatorType = "TestSavings_yours";

    protected override async Task OnInitializedAsync()
    {
        activeTab = "your"; // Ensure "Yours" tab is selected by default

        // Set up debounce timer
        debounceTimer = new System.Timers.Timer(100); // 100ms debounce
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += async (sender, args) =>
        {
            // await InvokeAsync(async () =>
            // {
            //     Calculate();
            //     var calcType = activeTab == "partner" ? "TestSavings_partner" : "TestSavings_yours";
            //     await SaveUserSavingsAsync(calcType);
            // });
        };

        // Load from API and populate model
        await LoadUserSavingsAsync();
        Calculate();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }

    // Add a method to handle input changes
    private void OnInputChanged()
    {
        // // Always save on change
        // var calcType = activeTab == "partner" ? "TestSavings_partner" : "TestSavings_yours";
        // _ = SaveUserSavingsAsync(calcType);

        // Only auto-calculate if enabled
        if (autoCalculate)
        {
            debounceTimer?.Stop();
            debounceTimer?.Start();
        }
    }

    // Method to handle select changes
    private void HandleSelectChange()
    {
        // // Always save on change
        // var calcType = activeTab == "partner" ? "TestSavings_partner" : "TestSavings_yours";
        // _ = SaveUserSavingsAsync(calcType);

        // Only auto-calculate if enabled
        if (autoCalculate)
        {
            OnInputChanged();
        }
    }

    // Add a custom StateHasChanged method
    private void ForceUpdate()
    {
        Console.WriteLine($"[DEBUG] {DateTime.Now:HH:mm:ss.fff} ForceUpdate called - CurrentAge: {calculatorModel.CurrentAge}, RetirementAge: {calculatorModel.RetirementAge}, Years: {calculatorModel.Years}");
        StateHasChanged();
    }
    private void Calculate()
    {
        try
        {
            var calculator = new SavingsCalculationEngine();
            results = calculator.Calculate(calculatorModel);
            yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);

            // Create interval summaries for better UX
            if (calculatorModel.Years > 10)
            {
                intervalSummaries = CreateIntervalSummaries(yearlyBreakdown);

                // Expand first two intervals by default to show more data without scrolling
                expandedIntervals.Clear();
                if (intervalSummaries.Count > 0)
                    expandedIntervals.Add(intervalSummaries[0].StartYear);
                if (intervalSummaries.Count > 1)
                    expandedIntervals.Add(intervalSummaries[1].StartYear);
            }

            StateHasChanged(); // Force UI update
        }
        catch (Exception ex)
        {
            // For debugging - you can remove this later
            Console.WriteLine($"Calculation error: {ex.Message}");
        }
    }

    private string GetCompoundingText()
    {
        return "Monthly";
    }

    private string GetIncomeTypeDescription(IncomeType incomeType)
    {
        return incomeType switch
        {
            IncomeType.MixedInvestment => "Mixed (Balanced portfolio)",
            IncomeType.MostlyDividends => "Mostly Dividends (Dividend-focused)",
            IncomeType.MostlyLongTermGains => "Mostly Long-Term Gains (Buy and hold)",
            IncomeType.MostlyInterest => "Mostly Interest/Short-Term (Fixed income/active)",
            _ => "Mixed Investment"
        };
    }

    private string GetTaxBracketDescription(TaxBracket bracket)
    {
        return bracket switch
        {
            TaxBracket.Low => "Low (10-12% ordinary, 0% long-term)",
            TaxBracket.Medium => "Medium (22-24% ordinary, 15% long-term)",
            TaxBracket.High => "High (32-35% ordinary, 20% long-term)",
            _ => "Medium Tax Bracket"
        };
    }

    private string GetTaxRatesDisplay(TaxBracket bracket)
    {
        return bracket switch
        {
            TaxBracket.Low => "12% / 0% (Ord/LT)",
            TaxBracket.Medium => "24% / 15% (Ord/LT)",
            TaxBracket.High => "35% / 20% (Ord/LT)",
            _ => "24% / 15% (Ord/LT)"
        };
    }

    private string GetTaxBreakdownTooltip(YearlyBreakdown year, IncomeType incomeType)
    {
        var sb = new System.Text.StringBuilder();

        // Add interest breakdown
        decimal totalInterest = year.NonQualifiedIncome + year.QualifiedDividends + year.LongTermGains + year.ShortTermGains;
        if (totalInterest > 0)
        {
            // Ordinary Income (24% rate)
            decimal ordinaryIncome = year.NonQualifiedIncome + year.ShortTermGains;
            decimal ordinaryPercent = Math.Round((ordinaryIncome / totalInterest) * 100);
            sb.AppendLine($"Ordinary Income (Interest & ST Gains): {ordinaryIncome:C} ({ordinaryPercent}%)");

            // Long-term rate income (15% rate)
            decimal ltRateIncome = year.QualifiedDividends + year.LongTermGains;
            decimal ltPercent = Math.Round((ltRateIncome / totalInterest) * 100);
            sb.AppendLine($"Long-Term Rate Income (Dividends & LT Gains): {ltRateIncome:C} ({ltPercent}%)");
        }

        return sb.ToString();
    }

    private List<IntervalSummary> CreateIntervalSummaries(List<YearlyBreakdown> breakdown)
    {
        int startingAge = calculatorModel.CurrentAge;
        int roundedStartAge = (int)Math.Ceiling(startingAge / 5.0) * 5;

        return breakdown
            .Select((y, index) => new
            {
                Year = y,
                Age = calculatorModel.CurrentAge + index + 1
            })
            .GroupBy(item => ((item.Age - 1) / 5) * 5 + 5)
            .Select(g => new IntervalSummary
            {
                StartYear = g.First().Year.Year,
                EndYear = g.Last().Year.Year,
                StartAge = g.Key - 5,
                EndAge = Math.Min(g.Key, calculatorModel.RetirementAge),
                FinalBalance = g.Last().Year.Balance,
                TotalGrowth = g.Sum(item => item.Year.InterestEarned),
                TotalContributions = g.Sum(item => item.Year.ContributionsThisYear),
                YearlyDetails = g.Select(item => item.Year).ToList(),
                MilestoneAchieved = GetMilestone(g.Last().Year.Balance)
            })
            .ToList();
    }

    private string GetMilestone(decimal balance)
    {
        if (balance >= 1000000) return "🎉 Millionaire!";
        if (balance >= 500000) return "🚀 Half Million!";
        if (balance >= 250000) return "💪 Quarter Million!";
        if (balance >= 100000) return "🎯 First $100K!";
        if (balance >= 50000) return "📈 $50K Milestone!";
        return "";
    }

    private void ToggleInterval(int startYear)
    {
        Console.WriteLine($"ToggleInterval called for year {startYear}");
        if (expandedIntervals.Contains(startYear))
        {
            expandedIntervals.Remove(startYear);
            Console.WriteLine($"Collapsed interval {startYear}");
        }
        else
        {
            expandedIntervals.Add(startYear);
            Console.WriteLine($"Expanded interval {startYear}");
        }
        Console.WriteLine($"Total expanded intervals: {expandedIntervals.Count}");
        StateHasChanged();
    }

    private void TogglePlanSummary()
    {
        isPlanSummaryExpanded = !isPlanSummaryExpanded;
        StateHasChanged();
    }

    private void ToggleSavingsBreakdown()
    {
        isSavingsBreakdownExpanded = !isSavingsBreakdownExpanded;
        StateHasChanged();
    }
    private async Task YourTabClick()
    {
        calculatorType = "TestSavings_yours";
        Console.WriteLine("Your tab clicked");
        SetActiveTab("your");
        await LoadUserSavingsAsync();
    }

    private async Task PartnerTabClick()
    {
        calculatorType = "TestSavings_partners";
        Console.WriteLine("Partner tab clicked");
        SetActiveTab("partner");
        await LoadUserSavingsAsync();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        // Clear messages when switching tabs
        userMessage = string.Empty;
        productMessage = string.Empty;
    }
    private async Task LoadUserSavingsAsync()
    {
        var userGuid = "3ed7f97f-b35d-4be7-9611-d17c21d84fcb";
        var url = $"https://localhost:7330/api/FinPlan/load?userGuid={userGuid}&calculatorType={calculatorType}";
        try
        {
            AddDebugMessage($"Loading: {DateTime.Now:HH:mm:ss}");
            var response = await Http.GetAsync(url);
            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Response: {json}");

            // Deserialize JSON into SavingsCalculatorModel
            var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (loadedModel != null)
            {
                calculatorModel = loadedModel;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AddDebugMessage($"Load Failed: {DateTime.Now:HH:mm:ss}");
            Console.WriteLine($"Error calling API: {ex.Message}");
        }
    }

    private async Task SaveUserSavingsAsync()
    {
        var userGuid = "3ed7f97f-b35d-4be7-9611-d17c21d84fcb";
        var url = $"https://localhost:7330/api/FinPlan/save";

        try
        {
            calculatorModel.LastUpdateDate = DateTime.UtcNow; // Set last update time

            // Create SaveRequest object
            var saveRequest = new SaveRequest()
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = calculatorModel
            };

            AddDebugMessage($"Saving: {DateTime.Now:HH:mm:ss}");

            var json = System.Text.Json.JsonSerializer.Serialize(saveRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var response = await Http.PostAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Data saved successfully.");
                AddDebugMessage($"Save success: {DateTime.Now:HH:mm:ss}");
            }
            else
            {
                AddDebugMessage($"Save Failed: {DateTime.Now:HH:mm:ss}");
                Console.WriteLine($"Save failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            AddDebugMessage($"Save Failed: {DateTime.Now:HH:mm:ss}");
            Console.WriteLine($"Error saving data: {ex.Message}");
        }
    }
}
