@page "/savings-wealth-building-old"
@using System.ComponentModel.DataAnnotations
@using FinPlan.Shared
@using FinPlan.Shared.Enums
@using FinPlan.Shared.Models
@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Services
@using FinPlan.Web.Components.Shared
@using FinPlan.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.Threading
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject FinPlan.Web.Services.DebugMessageService DebugService
@inject FinPlan.Web.Services.UserGuidService UserGuidService
@namespace FinPlan.Web.Components.Pages

<PageTitle>Savings & Wealth Building</PageTitle>

<!-- Savings quick setup wizard (one page per section) -->
<!-- Change OnSave binding so every save (including intermediate step saves) runs Save then Calculate -->
<SavingsInputWizard Model="@calculatorModel"
                    Visible="@showWizard"
                    VisibleChanged="@(v => showWizard = v)"
                    OnFinished="HandleWizardFinished"
                    OnSave="@(async () => { await SaveUserSavingsAsync(); Calculate(); StateHasChanged(); })"
                    InitialStep="@wizardOpenStep" />

<!-- Styles moved to Savings.razor.css -->

<div class="container-wire">
    <div class="page-header">
        <h3>Savings & Wealth Building</h3>
    </div>

    <div class="top-area">
        <div class="container-fluid">
            <div class="row g-3">
                <!-- Left column (2) -->
                <div class="col-12 col-md-2">
                    <div class="panel">
                        <div style="font-weight:700; margin-bottom:8px;">Quick Links</div>
                        <div style="display:flex; flex-direction:column; gap:6px;">
                            <a href="/" class="badge">Home</a>
                            <a href="/guides/how-to-use-wealth-journey-calculator" class="badge">How to</a>
                            <a href="/contact" class="badge">Contact</a>
                        </div>
                        <div style="margin-top:10px; font-size:0.85rem; color:var(--muted);">Mini summary</div>
                        <div style="margin-top:6px; background:#f8fafc; padding:8px; border-radius:6px;">Post-Tax <br /><strong>@(results?.TaxableBalance.ToString("C0") ?? "-")</strong></div>
                    </div>
                </div>

                <!-- Center combined column (8) -->
                <div class="col-12 col-md-8">
                    <div class="panel section-panel">
                        <h4>Plan Sections</h4>

                        <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap:12px;">
                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">1</span>
                                        <div>Milestones & ages</div>
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">Current Age: @calculatorModel.CurrentAge</div>
                                    <div class="small-note" style="margin-top:8px;">Planned Retirement Age: @calculatorModel.RetirementAge</div>
                                    <div class="small-note" style="margin-top:8px;">Years until Retirement: @calculatorModel.Years</div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(1)">Edit</button>
                                </div>
                            </div>

                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">2</span>
                                        <div>Starting Balances</div>
                                    </div>

                                    <div class="small-note" style="margin-top:8px;">Taxable: @FormatMoneySafe(calculatorModel.InitialTaxableAmount)</div>
                                    <div class="small-note" style="margin-top:8px;">Traditional: @FormatMoneySafe(calculatorModel.InitialTraditionalAmount)</div>
                                    <div class="small-note" style="margin-top:8px;">Roth: @FormatMoneySafe(calculatorModel.InitialRothAmount)</div>

                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(2)">Edit</button>
                                </div>
                            </div>

                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">3</span>
                                        <div>Monthly Contributions</div>
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">Taxable: @calculatorModel.MonthlyTaxableContribution.ToString("C0")</div>
                                    <div class="small-note" style="margin-top:8px;">Traditional: @calculatorModel.MonthlyTraditionalContribution.ToString("C0")</div>
                                    <div class="small-note" style="margin-top:8px;">Roth: @calculatorModel.MonthlyRothContribution.ToString("C0")</div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(3)">Edit</button>
                                </div>
                            </div>
                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">4</span>
                                        <div>Estimated Growth Rate</div>
                                    </div>
                                    <div class="small-note">Taxable: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateTaxable)</div>
                                    <div class="small-note">Traditional: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateTraditional)</div>
                                    <div class="small-note">Roth: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateRoth)</div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(4)">Edit</button>
                                </div>
                            </div>


                            <div class="section-card">
                                <div>
                                    <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                        <span class="step-badge">5</span>
                                        <div>Tax Treatment</div>
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">Taxable IncomeType: @calculatorModel.TaxableIncomeType</div>
                                    <div class="small-note" style="margin-top:8px;">Tax Bracket: @calculatorModel.TaxBracket</div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(5)">Edit</button>
                                </div>
                            </div>
                        </div>
                        @if (results != null)
                        {
                            <div class="mt-3">
                                <div class="row mb-3">
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-primary summary-money">@results.FinalAmount.ToString("C0")</h4><p class="mb-0">Final Amount</p></div></div></div>
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-success summary-money">@results.TotalInterestEarned.ToString("C0")</h4><p class="mb-0">Growth</p></div></div></div>
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-info summary-money">@results.TotalContributions.ToString("C0")</h4><p class="mb-0">Total Contributions</p></div></div></div>
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-danger summary-money">@results.TotalTaxesPaid.ToString("C0")</h4><p class="mb-0">Total Taxes</p></div></div></div>
                                    @* <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-warning summary-money">@string.Format("{0:F1}%/{1:F1}%/{2:F1}%,", calculatorModel.AnnualGrowthRateTaxable, calculatorModel.AnnualGrowthRateTraditional, calculatorModel.AnnualGrowthRateRoth)</h4><p class="mb-0">Growth (Taxable/Traditional/Roth)</p></div></div></div> *@
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Right column (2) -->
                <div class="col-12 col-md-2">
                    <div class="panel">
                        <div style="font-weight:700; margin-bottom:8px; display:flex; justify-content:space-between; align-items:center;">
                            <div>Debug</div>
                            <div>
                                <button class="btn-ghost" style="padding:4px 6px; font-size:0.8rem;" @onclick="ToggleRightDebug">Toggle</button>
                            </div>
                        </div>
                        <div style="font-size:0.85rem; color:var(--muted);">Toggle messages</div>
                        @if (showRightDebug)
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:200px; overflow:auto;">
                                @foreach (var msg in DebugService.Messages.OrderByDescending(m => m.MessageTime))
                                {
                                    <div style="margin-bottom:6px;"><small style="color:var(--muted);">@msg.MessageTime.ToString("HH:mm:ss")</small><div>@msg.MessageText</div></div>
                                }
                            </div>
                        }
                        else
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:120px; overflow:auto;">No messages</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Yearly Projection grid - uses same bootstrap/table styling as retirement page *@
    <div class="grid-panel panel mt-3">
        <div class="grid-header">
            <div style="font-weight:800; font-size:1rem;">Yearly Projection</div>
            <div class="legend">
                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--brand-yellow)"></span><small> Milestone</small></div>
                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:#38B2AC"></span><small> Growth</small></div>
            </div>
        </div>

        <div class="grid">
            <table class="table table-sm table-bordered" aria-label="Yearly projection">
                <thead class="table-light">
                    <tr>
                        <th style="text-align:right; width:120px; padding:18px 12px; font-size:1.0rem;">Year</th>
                        <th style="text-align:right; width:90px; padding:18px 12px; font-size:1.0rem;">Age</th>

                        <th class="col-taxable" style="background-color: rgba(31,111,235,0.06); color:#1F6FEB; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Taxable</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Year Begin</span>
                            </div>
                        </th>
                        <th class="col-taxable" style="background-color: rgba(31,111,235,0.06); color:#1F6FEB; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Taxable</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Contribution</span>
                            </div>
                        </th>
                        <th class="col-taxable" style="background-color: rgba(31,111,235,0.06); color:#1F6FEB; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Taxable</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Growth</span>
                            </div>
                        </th>
                        <th class="col-taxable" style="background-color: rgba(31,111,235,0.06); color:#1F6FEB; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Tax</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Paid</span>
                            </div>
                        </th>
                        <th class="col-taxable" style="background-color: rgba(31,111,235,0.06); color:#1F6FEB; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Taxable</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Year End</span>
                            </div>
                        </th>

                        <th class="col-traditional" style="background-color: rgba(56,178,172,0.06); color:#38B2AC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Traditional</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Year Begin</span>
                            </div>
                        </th>
                        <th class="col-traditional" style="background-color: rgba(56,178,172,0.06); color:#38B2AC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Traditional</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Contribution</span>
                            </div>
                        </th>
                        <th class="col-traditional" style="background-color: rgba(56,178,172,0.06); color:#38B2AC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Traditional</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Growth</span>
                            </div>
                        </th>
                        <th class="col-traditional" style="background-color: rgba(56,178,172,0.06); color:#38B2AC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Traditional</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Year End</span>
                            </div>
                        </th>

                        <th class="col-roth" style="background-color: rgba(109,93,252,0.06); color:#6D5DFC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Roth</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Year Begin</span>
                            </div>
                        </th>
                        <th class="col-roth" style="background-color: rgba(109,93,252,0.06); color:#6D5DFC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Roth</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Contribution</span>
                            </div>
                        </th>
                        <th class="col-roth" style="background-color: rgba(109,93,252,0.06); color:#6D5DFC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Roth</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Growth</span>
                            </div>
                        </th>
                        <th class="col-roth" style="background-color: rgba(109,93,252,0.06); color:#6D5DFC; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Roth</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Year End</span>
                            </div>
                        </th>

                        <th class="text-end col-totals" style="background-color: rgba(255,214,0,0.06); color:#FFD600; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Total</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Contributions</span>
                            </div>
                        </th>
                        <th class="text-end col-totals" style="background-color: rgba(255,214,0,0.06); color:#FFD600; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Total</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Growth</span>
                            </div>
                        </th>
                        <th class="text-end col-totals" style="background-color: rgba(255,214,0,0.06); color:#FFD600; font-weight:700; padding:18px 12px;">
                            <div style="display:flex;flex-direction:column;align-items:flex-end;text-align:right;gap:2px;line-height:1;">
                                <span style="font-size:1.05rem;font-weight:800;">Total</span>
                                <span style="font-size:0.78rem;font-weight:600;opacity:.9;">Year End</span>
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (yearlyBreakdown == null || !yearlyBreakdown.Any())
                    {
                        <tr><td colspan="15" class="text-center text-muted">No projection rows available. Run Calculate to generate projections.</td></tr>
                    }
                    else
                    {
                        foreach (var r in yearlyBreakdown)
                        {

                            var age = calculatorModel.CurrentAge + r.Year; // approximate

                            <tr>
                                <td>@r.Year</td>
                                <td>@age</td>

                                <!-- Taxable columns -->
                                <!-- Taxable columns with inline styles -->
                                <td class="text-end col-taxable"
                                    style="font-size:0.78rem;font-weight:600;background-color: rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TaxableBOYBalance)
                                </td>
                                <td class="text-end col-taxable"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TaxableContribution)
                                </td>
                                <td class="text-end col-taxable"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TaxableInterest)
                                </td>
                                <td class="text-end col-taxable"
                                    style="color:#F56565; font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TaxesPaid)
                                </td>
                                <td class="text-end col-taxable"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TaxableEOYBalance)
                                </td>

                                <!-- Traditional columns with inline styles -->
                                <td class="text-end col-traditional"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TraditionalBOYBalance)
                                </td>
                                <td class="text-end col-traditional"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TraditionalContribution)
                                </td>

                                <td class="text-end col-traditional"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TraditionalInterest)
                                </td>
                                <td class="text-end col-traditional"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TraditionalEOYBalance)
                                </td>

                                <!-- Roth columns with inline styles -->
                                <td class="text-end col-roth"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.RothBOYBalance)
                                </td>
                                <td class="text-end col-roth"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.RothContribution)
                                </td>
                                <td class="text-end col-roth"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.RothInterest)
                                </td>
                                <td class="text-end col-roth"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.RothEOYBalance)
                                </td>

                                <!-- Totals columns with inline styles -->
                                <td class="text-end col-totals"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TotalContributions)
                                </td>
                                <td class="text-end col-totals"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TotalGrowth)
                                </td>
                                <td class="text-end col-totals"
                                    style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                    @FormatMoneySafe(r.TotalEOYBalance)
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <!-- Calculator Limitations Notice -->
    <div class="mt-3 p-3" style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #0d6efd; margin-top: 2px;">
                <i class="bi bi-info-circle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #495057; margin-bottom: 4px;">Calculator Limitations</div>
                <div style="font-size: 0.9rem; color: #6c757d; line-height: 1.4;">
                    This calculator does not enforce IRA/401(k) contribution limits, Roth IRA income phase-outs, or account for changing tax laws.
                    Actual contribution limits and eligibility rules may affect your savings strategy.
                    An advanced version with comprehensive tax and contribution limit modeling is coming soon.
                </div>
            </div>
        </div>
    </div>
    <!-- Important Disclaimers -->
    <div class="mt-3 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #856404; margin-top: 2px;">
                <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">Important Disclaimers</div>
                <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                    <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational purposes only. Results are projections based on your inputs and assumptions. This is not personalized financial, tax, or investment advice.</p>

                    <p style="margin-bottom: 8px;"><strong>Market Volatility:</strong> Actual investment returns will fluctuate and may be negative. Market crashes, economic downturns, and sequence of returns can significantly impact long-term outcomes.</p>

                    <p style="margin-bottom: 8px;"><strong>Tax Simplification:</strong> Tax calculations are simplified estimates. Actual tax situations involve complex rules, changing tax brackets, state taxes, and future legislation that may differ significantly.</p>

                    <p style="margin-bottom: 8px;"><strong>Life Changes:</strong> Job loss, family changes, health issues, and unexpected expenses are not modeled but can materially impact your ability to save and invest as planned.</p>

                    <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial advisors, tax professionals, and estate planning attorneys who can provide personalized advice for your complete financial situation.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Wizard control
    private bool showWizard = false;
    private int wizardOpenStep = 1;

    // State copied from WealthJourmeyPlanner
    [SupplyParameterFromForm]
    public SavingsCalculatorModel calculatorModel { get; set; } = new();
    private SavingsResults? results;
    private FinPlan.Shared.Models.Savings.SavingsResults? youResults;
    private FinPlan.Shared.Models.Savings.SavingsResults? partnerResults;
    private List<YearlyBreakdown> yearlyBreakdown = new();
    private List<IntervalSummary> intervalSummaries = new();
    private bool showRightDebug = false;
    private string calculatorType = "TestSavings_yours";
    private string userGuid = string.Empty;
    private readonly SemaphoreSlim _calculateSemaphore = new(1, 1);

    protected override async Task OnInitializedAsync()
    {
        // noop
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try { userGuid = await UserGuidService.GetOrCreateUserGuidAsync(); } catch { }
            await LoadUserSavingsAsync();
            Calculate();
            await LoadMiniSummariesAsync();
            StateHasChanged();
        }
    }
    // add this inside the existing @code { ... } block
    private async Task Calculate()
    {
        // forward to the async, semaphore-protected implementation
        await CalculateAsync();
    }

    private async Task CalculateAsync()
    {
        await _calculateSemaphore.WaitAsync();
        try
        {
            try
            {
                var calculator = new SavingsCalculationEngine();
                results = calculator.Calculate(calculatorModel);
                yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);
            }
            catch (Exception ex)
            {
                DebugService.AddMessage($"Calc error: {ex.Message}");
            }
        }
        finally
        {
            _calculateSemaphore.Release();
        }
    }

    private string GetApiBaseUrl()
    {
#if DEBUG
            return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "https://api.finplan.example";
#endif
    }

    private async Task LoadUserSavingsAsync()
    {
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calculatorType}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.GetAsync(url);
            if (!response.IsSuccessStatusCode) return;
            var json = await response.Content.ReadAsStringAsync();
            var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (loadedModel != null)
            {
                calculatorModel = loadedModel;
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Load failed: {ex.Message}");
        }
    }

    private async Task LoadMiniSummariesAsync()
    {
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            async Task<FinPlan.Shared.Models.Savings.SavingsResults?> LoadFor(string calcType)
            {
                try
                {
                    var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calcType}";
                    var response = await client.GetAsync(url);
                    if (!response.IsSuccessStatusCode) return null;
                    var json = await response.Content.ReadAsStringAsync();
                    var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (loadedModel == null) return null;
                    var calc = new FinPlan.Shared.Services.SavingsCalculationEngine();
                    return calc.Calculate(loadedModel);
                }
                catch { return null; }
            }

            var yourTask = LoadFor("TestSavings_yours");
            var partnerTask = LoadFor("TestSavings_partners");
            await Task.WhenAll(yourTask, partnerTask);
            youResults = await yourTask;
            partnerResults = await partnerTask;
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Mini summaries load failed: {ex.Message}");
        }
    }

    private async Task SaveUserSavingsAsync()
    {
        try
        {
            calculatorModel.LastUpdateDate = DateTime.UtcNow;
            var saveRequest = new PersistSavingsRequest { UserGuid = userGuid, CalculatorType = calculatorType, Data = calculatorModel };
            var json = System.Text.Json.JsonSerializer.Serialize(saveRequest);
            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync($"{GetApiBaseUrl()}/api/FinPlan/save", content);
            if (!response.IsSuccessStatusCode)
            {
                DebugService.AddMessage($"Save failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Save error: {ex.Message}");
        }
    }

    private async Task HandleWizardFinished((int AgeYou, int AgePartner) ages)
    {
        // map retirement age to model if present
        try
        {
            if (ages.AgeYou > 0) calculatorModel.RetirementAge = ages.AgeYou;
            // Save and recalc
            await SaveUserSavingsAsync();
            Calculate();
            StateHasChanged();
        }
        catch { }
    }

    private async Task HandleSection1Valid()
    {
        // Save and recalc after section 1 validation
        await SaveUserSavingsAsync();
        Calculate();
        StateHasChanged();
    }

    private void ToggleRightDebug() { showRightDebug = !showRightDebug; StateHasChanged(); }

    private string FormatMoneySafe(decimal? v) => v.HasValue ? v.Value.ToString("C0") : "-";

    private void OpenWizard(int step)
    {
        wizardOpenStep = step;
        showWizard = true;
    }

    private async Task SaveAndClose()
    {
        await SaveUserSavingsAsync();
        // Optionally, close any open wizards or perform additional actions
        showWizard = false;
    }

    private async Task OnUseTaxAdvantagedChanged(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool isChecked))
        {
            calculatorModel.UseTaxAdvantaged = isChecked;
            await SaveUserSavingsAsync();
        }
    }

    private async Task OnTaxableIncomeTypeChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(typeof(IncomeType), e.Value?.ToString(), out var selectedValue))
        {
            calculatorModel.TaxableIncomeType = (IncomeType)selectedValue;
            await SaveUserSavingsAsync();
        }
    }

    private async Task OnTaxBracketChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(typeof(TaxBracket), e.Value?.ToString(), out var selectedValue))
        {
            calculatorModel.TaxBracket = (TaxBracket)selectedValue;
            await SaveUserSavingsAsync();
        }
    }
}