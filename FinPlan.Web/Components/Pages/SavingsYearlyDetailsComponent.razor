@using FinPlan.Shared.Models
@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Enums
@using System.Text.Json
@inject FinPlan.Web.Services.DebugMessageService DebugService
<style>

    .column-group {
        background-color: #f0f8ff; /* Light blue - Alice Blue */
        padding: 4px 8px;
        border: none; /* Remove all default borders */
    }

        /* First column - left border and rounded left corners */
        .column-group.first {
            border-left: 2px solid #4682b4;
            /* add 3px padding on the left specifically */
            padding-left: 3px !important;
        }

        /* Last column - right border and rounded right corners */
        .column-group.last {
            border-right: 2px solid #4682b4;
            /* add 3px padding on the right specifically */
            padding-right: 3px !important;
        }

    /* Top borders only on header row */
    thead .column-group {
        border-top: 2px solid #4682b4 !important;
    }

        thead .column-group.first {
            border-top-left-radius: 6px;
        }

        thead .column-group.last {
            border-top-right-radius: 6px;
        }

    /* Bottom borders on header row and last data row */
    thead .column-group {
        border-bottom: 2px solid #4682b4 !important;
    }

    tbody tr:last-child .column-group {
        border-bottom: 2px solid #4682b4 !important;
    }

        tbody tr:last-child .column-group.first {
            border-bottom-left-radius: 6px;
        }

        tbody tr:last-child .column-group.last {
            border-bottom-right-radius: 6px;
        }

    /* Ensure no other borders appear */
    tbody tr:not(:last-child) .column-group {
        border-bottom: none !important;
    }

    tbody tr .column-group:not(.first) {
        border-left: none !important;
    }

    tbody tr .column-group:not(.last) {
        border-right: none !important;
    }
</style>

<div class="table-responsive">
    <table class="table table-sm">
        <thead class="table-light">
            <tr>
                <th><span style="display:block;">Year</span><span style="display:block;">Age</span></th>
                <th>EOY <br />Balance</th>
                <th>EOY <br />Growth</th>
                <th>EOY <br />Contrib</th>

                <th class="column-group first">Taxable<br />Contrib</th>
                <th class="column-group">Taxable<br />Growth</th>
                <th class="column-group">Taxes<br />Growth</th>
                <th class="column-group last">EOY Balance</th>
                
                <th class="column-group first">Traditional<br />Contrib</th>
                <th class="column-group last">Traditional<br />Growth</th>

                <th class="column-group first">Roth<br />Contrib</th>
                <th class="column-group last">Roth<br />Growth</th>
                <th><span style="display:block;">Tax</span><span style="display:block;">Rates</span></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var year in YearlyDetails)
            {
                <tr>
                    <td>Year @year.Year (@(CurrentAge + year.Year))</td>
                    <td>@year.Balance.ToString("C")</td>
                    <td class="text-success" style="position:relative;">
                        <span style="cursor:pointer;">
                            @year.InterestEarned.ToString("C")
                        </span>

                        @if (InterestTooltipYear == year.Year)
                        {
                            <div style="position:absolute; left:100%; top:0; background:#fff; color:#222; border:2px solid #6D5DFC; border-radius:8px; box-shadow:0 2px 12px rgba(0,0,0,0.18); padding:10px 16px; min-width:260px; z-index:9999; font-size:0.95em; display:flex; align-items:center;">
                                <strong style="margin-right:10px;">Interest:</strong>
                                <span style="margin-right:10px; color:#38B2AC;"><b>Taxable @year.TaxableInterest.ToString("C")</b></span>
                                <span style="margin-right:10px; color:#38B2AC;"><b>Trad @year.TaxDeferredInterest.ToString("C")</b></span>
                                <span style="margin-right:10px; color:#38B2AC;"><b>Roth @year.RothInterest.ToString("C")</b></span>
                            </div>
                        }
                    </td>
                    <td class="text-info">@year.ContributionsThisYear.ToString("C")</td>

                    <td class="column-group first">@year.TaxableContribution.ToString("C")</td>
                    <td class="column-group">@year.TaxableInterest.ToString("C")</td>
                    <td class="column-group">@year.TaxesPaid.ToString("C")</td>
                    <td class="column-group last">@year.TaxableEOYBalance.ToString("C")</td>

                    <td class ="column-group first">@year.TaxDeferredContribution.ToString("C")</td>
                    <td class="column-group last">@year.TaxDeferredInterest.ToString("C")</td>

                    <td class ="column-group first">@year.RothContribution.ToString("C")</td>
                    <td class="column-group last">@year.RothInterest.ToString("C")</td>
                    <td>
                        <span title="Applied to:">
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public List<YearlyBreakdown>? YearlyDetails { get; set; }
    [Parameter] public int CurrentAge { get; set; }
    [Parameter] public int? InterestTooltipYear { get; set; }
    [Parameter] public TaxBracket TaxBracket { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var msg = $"YearlyDetailsComponent.OnInitialized - CurrentAge={CurrentAge}, Count={(YearlyDetails?.Count ?? 0)}";
        Console.WriteLine(msg);
        DebugService?.AddMessage(msg);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        try
        {
            var count = YearlyDetails?.Count ?? 0;
            var firstSummary = count > 0 ? JsonSerializer.Serialize(YearlyDetails[0], new JsonSerializerOptions { WriteIndented = false }) : "none";
            var msg = $"YearlyDetailsComponent.OnParametersSet - Count={count}, CurrentAge={CurrentAge}, InterestTooltipYear={InterestTooltipYear}, TaxBracket={TaxBracket}, FirstYear={firstSummary}";

            Console.WriteLine(msg);
            DebugService?.AddMessage(msg);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"YearlyDetailsComponent.OnParametersSet debug failed: {ex.Message}");
            DebugService?.AddMessage($"YearlyDetailsComponent debug error: {ex.Message}");
        }
    }
}