@page "/savings-planner"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>Retirement Savings Planner</PageTitle>

<style>
    /* Dark theme styles */
    .dark-theme {
        background-color: #121212;
        color: #E2E8F0;
    }

    .dark-theme .card {
        background-color: #1E1E1E;
        border-color: #333;
    }

    .dark-theme .card-header {
        background-color: #252525 !important;
        border-bottom-color: #333;
        color: #E2E8F0 !important;
    }

    .dark-theme .form-control {
        background-color: #252525;
        border-color: #333;
        color: #E2E8F0;
    }

    .dark-theme .form-control:focus {
        background-color: #2D2D2D;
        box-shadow: 0 0 0 0.25rem rgba(109, 93, 252, 0.25);
    }

    .dark-theme .btn-primary {
        background-color: #6D5DFC;
        border-color: #6D5DFC;
    }

    .dark-theme .btn-primary:hover {
        background-color: #5A4AE3;
        border-color: #5A4AE3;
    }

    .dark-theme .text-primary {
        color: #6D5DFC !important;
    }

    .dark-theme .text-success {
        color: #38B2AC !important;
    }

    .dark-theme .text-info {
        color: #4FD1C5 !important;
    }

    .dark-theme .text-warning {
        color: #F6AD55 !important;
    }

    .dark-theme .progress-bar.bg-info {
        background-color: #4FD1C5 !important;
    }

    .dark-theme .progress-bar.bg-success {
        background-color: #38B2AC !important;
    }

    .dark-theme .table {
        color: #E2E8F0;
    }

    .dark-theme .table-striped > tbody > tr:nth-of-type(odd) {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .dark-theme .form-text {
        color: #A0AEC0;
    }

    .dark-theme .interval-summary {
        background-color: #252525;
    }

    .dark-theme .interval-summary:hover {
        background-color: #2D2D2D;
    }
    
    .dark-theme .card.bg-light {
        background-color: #252525 !important;
    }
    
    .dark-theme .alert-info {
        background-color: rgba(79, 209, 197, 0.15);
        color: #E2E8F0;
        border-color: rgba(79, 209, 197, 0.4);
    }
    
    .theme-toggle {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }
</style>

<div class="container-fluid @(isDarkTheme ? "dark-theme" : "")">
    <!-- Theme toggle button -->
    <button @onclick="ToggleTheme" class="btn btn-sm theme-toggle @(isDarkTheme ? "btn-light" : "btn-dark")">
        <i class="bi @(isDarkTheme ? "bi-sun" : "bi-moon")"></i>
        @(isDarkTheme ? "Light Mode" : "Dark Mode")
    </button>

    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header @(isDarkTheme ? "" : "bg-primary text-white")">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-calculator"></i> Retirement Savings Planner
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@calculatorModel" OnValidSubmit="@Calculate" FormName="SavingsCalculatorForm">
                        <DataAnnotationsValidator />
                        
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Initial Amount ($)</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTaxableAmount" class="form-label">Taxable (Post-tax)</label>
                                        <InputNumber id="initialTaxableAmount" class="form-control" 
                                                    @bind-Value="calculatorModel.InitialTaxableAmount" />
                                        <small class="form-text">Regular brokerage account</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTraditionalAmount" class="form-label">Traditional (Pre-tax)</label>
                                        <InputNumber id="initialTraditionalAmount" class="form-control" 
                                                    @bind-Value="calculatorModel.InitialTraditionalAmount" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialRothAmount" class="form-label">Roth (Post-tax)</label>
                                        <InputNumber id="initialRothAmount" class="form-control" 
                                                    @bind-Value="calculatorModel.InitialRothAmount" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Initial: $@(calculatorModel.InitialTaxableAmount + calculatorModel.InitialTraditionalAmount + calculatorModel.InitialRothAmount)</small>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Monthly Contributions</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTaxableContribution" class="form-label">Taxable (Post-tax)</label>
                                        <InputNumber id="monthlyTaxableContribution" class="form-control" 
                                                    @bind-Value="calculatorModel.MonthlyTaxableContribution" />
                                        <small class="form-text">Regular brokerage account</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTraditionalContribution" class="form-label">Traditional (Pre-tax)</label>
                                        <InputNumber id="monthlyTraditionalContribution" class="form-control" 
                                                    @bind-Value="calculatorModel.MonthlyTraditionalContribution" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyRothContribution" class="form-label">Roth (Post-tax)</label>
                                        <InputNumber id="monthlyRothContribution" class="form-control" 
                                                    @bind-Value="calculatorModel.MonthlyRothContribution" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Monthly: $@(calculatorModel.MonthlyTaxableContribution + calculatorModel.MonthlyTraditionalContribution + calculatorModel.MonthlyRothContribution)</small>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Annual Growth Rate (%)</h5>
                                    </div>
                                    <div class="card-body">
                                        <InputNumber id="annualGrowthRate" class="form-control" @bind-Value="calculatorModel.AnnualGrowthRate" step="0.1" />
                                        <ValidationMessage For="@(() => calculatorModel.AnnualGrowthRate)" class="text-danger" />
                                        <small class="form-text">Enter as percentage (e.g., 7 for 7%)</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Compounding Frequency</h5>
                                    </div>
                                    <div class="card-body">
                                        <input type="text" id="compoundingFrequency" class="form-control" value="Monthly" readonly />
                                        <small class="form-text">Interest is compounded monthly</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Retirement Timeline</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="currentAge" class="form-label">Current Age</label>
                                        <input type="number" id="currentAge" class="form-control" 
                                               @bind-value="calculatorModel.CurrentAge" @bind-value:event="oninput" />
                                        <ValidationMessage For="@(() => calculatorModel.CurrentAge)" class="text-danger" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="retirementAge" class="form-label">Retirement Age</label>
                                        <input type="number" id="retirementAge" class="form-control" 
                                               @bind-value="calculatorModel.RetirementAge" @bind-value:event="oninput" />
                                        <ValidationMessage For="@(() => calculatorModel.RetirementAge)" class="text-danger" />
                                        <small class="form-text">Most people retire between 60-67</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="years" class="form-label">Years Until Retirement</label>
                                        <input type="text" id="years" class="form-control bg-light" value="@calculatorModel.Years" readonly />
                                        <small class="form-text">Automatically calculated</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header bg-info text-white">
                                <div class="form-check mb-0">
                                    <input type="checkbox" id="useTaxAdvantaged" class="form-check-input" 
                                           @bind="calculatorModel.UseTaxAdvantaged" />
                                    <label for="useTaxAdvantaged" class="form-check-label fw-bold">
                                        Include tax-advantaged accounts (401k, IRA)
                                    </label>
                                </div>
                            </div>
                            @if (calculatorModel.UseTaxAdvantaged)
                            {
                                <div class="card-body">
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle"></i> Tax-deferred accounts (401k, IRA) grow tax-free until withdrawal, 
                                        while taxable accounts are subject to annual taxes on growth.
                                    </div>
                                    
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="annualTaxDeferredContribution" class="form-label">Annual 401k/IRA Contribution ($)</label>
                                            <InputNumber id="annualTaxDeferredContribution" class="form-control" 
                                                   @bind-Value="calculatorModel.AnnualTaxDeferredContribution" />
                                            <div class="form-text">Annual contribution to tax-deferred accounts</div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="annualTaxableContribution" class="form-label">Annual Taxable Account Contribution ($)</label>
                                            <InputNumber id="annualTaxableContribution" class="form-control" 
                                                   @bind-Value="calculatorModel.AnnualTaxableContribution" />
                                            <div class="form-text">Annual contribution to taxable investment accounts</div>
                                        </div>
                                    </div>
                                    
                                    <div class="row mt-2">
                                        <div class="col-12">
                                            <label class="form-label fw-bold">Taxable Account Income Type</label>
                                            <select class="form-control" @bind="calculatorModel.TaxableIncomeType">
                                                <option value="@IncomeType.MixedInvestment">Mixed Investment (default mix)</option>
                                                <option value="@IncomeType.MostlyDividends">Mostly Dividends</option>
                                                <option value="@IncomeType.MostlyLongTermGains">Mostly Long-Term Capital Gains</option>
                                                <option value="@IncomeType.MostlyInterest">Mostly Interest/Short-Term Gains</option>
                                            </select>
                                            <div class="form-text">This affects how income from taxable investments is taxed annually</div>
                                        </div>
                                    </div>
                                    
                                    <div class="row mt-3">
                                        <div class="col-12">
                                            <label class="form-label fw-bold">Tax Bracket</label>
                                            <select class="form-control" @bind="calculatorModel.TaxBracket">
                                                <option value="@TaxBracket.Low">Low (10-12% ordinary, 0% long-term)</option>
                                                <option value="@TaxBracket.Medium">Medium (22-24% ordinary, 15% long-term)</option>
                                                <option value="@TaxBracket.High">High (32-35% ordinary, 20% long-term)</option>
                                            </select>
                                            <div class="form-text">Your current federal income tax bracket</div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg w-100">
                            <i class="bi bi-calculator"></i> Calculate Savings
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            @if (results != null)
            {
                <div class="card">
                    <div class="card-header @(isDarkTheme ? "" : "bg-success text-white")">
                        <h3 class="card-title mb-0">
                            <i class="bi bi-graph-up"></i> Results
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-primary">@results.FinalAmount.ToString("C")</h4>
                                        <p class="mb-0">Final Amount</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-success">@results.TotalInterestEarned.ToString("C")</h4>
                                        <p class="mb-0">Interest Earned</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-info">@results.TotalContributions.ToString("C")</h4>
                                        <p class="mb-0">Total Contributions</p>
                                    </div>
                                </div>
                            </div> 
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-warning">@calculatorModel.AnnualGrowthRate.ToString("F1")%</h4>
                                        <p class="mb-0">Annual Growth Rate</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="progress mb-3" style="height: 30px;">
                            <div class="progress-bar bg-info" role="progressbar" 
                                 style="width: @(results.TotalContributions / results.FinalAmount * 100)%">
                                Your Savings
                            </div>
                            <div class="progress-bar bg-success" role="progressbar" 
                                 style="width: @(results.TotalInterestEarned / results.FinalAmount * 100)%">
                                Growth from Interest
                            </div>
                        </div>

                        <div class="alert alert-info">
                            <strong>💡 How Your Money Grows:</strong><br>
                            You'll contribute <strong>@results.TotalContributions.ToString("C")</strong> over @calculatorModel.Years years, 
                            and compound interest will add <strong>@results.TotalInterestEarned.ToString("C")</strong> more!
                            <br><br>
                            @if (calculatorModel.UseTaxAdvantaged)
                            {
                                <div>
                                    <strong>Tax-Advantaged Summary:</strong><br>
                                    <ul class="mb-0">
                                        <li>Tax-deferred accounts (401k/IRA): <strong>@results.TaxDeferredBalance.ToString("C")</strong></li>
                                        <li>Taxable investment accounts: <strong>@results.TaxableBalance.ToString("C")</strong></li>
                                        <li>Estimated tax advantage benefit: <strong>@results.EstimatedTaxSavings.ToString("C")</strong></li>
                                    </ul>
                                    
                                    <div class="mt-3 mb-0">
                                        <strong>Income Type Breakdown:</strong>
                                        <div class="progress mt-1 mb-2" style="height: 20px;">
                                            <div class="progress-bar bg-success" role="progressbar" 
                                                 style="width: @(results.QualifiedDividendIncome / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                 title="Qualified Dividends: @results.QualifiedDividendIncome.ToString("C")">
                                                Qualified
                                            </div>
                                            <div class="progress-bar bg-info" role="progressbar" 
                                                 style="width: @(results.LongTermCapitalGains / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                 title="Long-Term Capital Gains: @results.LongTermCapitalGains.ToString("C")">
                                                LTCG
                                            </div>
                                            <div class="progress-bar bg-warning" role="progressbar" 
                                                 style="width: @(results.NonQualifiedIncome / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                 title="Non-Qualified Income: @results.NonQualifiedIncome.ToString("C")">
                                                Interest
                                            </div>
                                            <div class="progress-bar bg-danger" role="progressbar" 
                                                 style="width: @(results.ShortTermCapitalGains / (results.TaxableInterestEarned + 0.0001m) * 100)%"
                                                 title="Short-Term Capital Gains: @results.ShortTermCapitalGains.ToString("C")">
                                                STCG
                                            </div>
                                        </div>
                                        <small>Effective tax rate on taxable investments: <strong>@results.EffectiveTaxRate.ToString("F1")%</strong></small>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <small>That's a <strong>@((results.TotalInterestEarned / results.TotalContributions * 100).ToString("F0"))% total growth</strong> over @calculatorModel.Years years 
                                with @calculatorModel.AnnualGrowthRate% annual returns.</small>
                            }
                        </div>

                        <h5>Your Retirement Plan Summary</h5>
                        <ul class="list-unstyled">
                            <li><strong>Current Age:</strong> @calculatorModel.CurrentAge years old</li>
                            <li><strong>Target Retirement Age:</strong> @calculatorModel.RetirementAge years old</li>
                            <li><strong>Years to Save:</strong> @calculatorModel.Years years</li>
                            <li><strong>Initial Taxable Amount:</strong> @calculatorModel.InitialTaxableAmount.ToString("C")</li>
                            <li><strong>Initial Traditional Amount:</strong> @calculatorModel.InitialTraditionalAmount.ToString("C")</li>
                            <li><strong>Initial Roth Amount:</strong> @calculatorModel.InitialRothAmount.ToString("C")</li>
                            <li><strong>Total Initial Amount:</strong> @calculatorModel.InitialAmount.ToString("C")</li>
                            @if (!calculatorModel.UseTaxAdvantaged)
                            {
                                <li><strong>Monthly Taxable Contribution:</strong> @calculatorModel.MonthlyTaxableContribution.ToString("C")</li>
                                <li><strong>Monthly Traditional Contribution:</strong> @calculatorModel.MonthlyTraditionalContribution.ToString("C")</li>
                                <li><strong>Monthly Roth Contribution:</strong> @calculatorModel.MonthlyRothContribution.ToString("C")</li>
                                <li><strong>Total Monthly Contribution:</strong> @(calculatorModel.MonthlyTaxableContribution + calculatorModel.MonthlyTraditionalContribution + calculatorModel.MonthlyRothContribution).ToString("C")</li>
                            }
                            else
                            {
                                <li><strong>Monthly Tax-Deferred Savings:</strong> @(calculatorModel.AnnualTaxDeferredContribution / 12).ToString("C")</li>
                                <li><strong>Monthly Taxable Savings:</strong> @(calculatorModel.AnnualTaxableContribution / 12).ToString("C")</li>
                                <li><strong>Monthly Total Savings:</strong> @((calculatorModel.AnnualTaxDeferredContribution / 12) + (calculatorModel.AnnualTaxableContribution / 12)).ToString("C")</li>
                                <li><strong>Investment Income Type:</strong> @GetIncomeTypeDescription(calculatorModel.TaxableIncomeType)</li>
                                <li><strong>Tax Bracket:</strong> @GetTaxBracketDescription(calculatorModel.TaxBracket)</li>
                                <li><strong>Total Taxes Paid:</strong> @results.TotalTaxesPaid.ToString("C")</li>
                            }
                            <li><strong>Expected Growth Rate:</strong> @calculatorModel.AnnualGrowthRate% annually</li>
                            <li><strong>Compounding:</strong> @GetCompoundingText()</li>
                        </ul>
                    </div>
                </div>

                @if (yearlyBreakdown.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="bi bi-graph-up-arrow"></i> Your Age-Based Retirement Journey
                                @if (calculatorModel.Years > 10)
                                {
                                <small class="text-muted ms-2">Click age ranges to see yearly details (@intervalSummaries.Count intervals)</small>
                                }
                            </h5>
                        </div>
                        <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                            @if (calculatorModel.Years > 10 && intervalSummaries.Any())
                            {
                                <!-- 5-Year Interval View for Long-Term Plans -->
                                @foreach (var interval in intervalSummaries)
                                {
                                    var isExpanded = expandedIntervals.Contains(interval.StartYear);
                                    <div class="interval-group mb-3">
                                        <!-- Interval Summary Row -->
                                        <div class="interval-summary p-3 border rounded @(isExpanded ? "border-primary" : "")" 
                                             style="cursor: pointer; transition: all 0.2s ease;">
                                            <div class="row align-items-center" @onclick="@(() => ToggleInterval(interval.StartYear))">
                                                <div class="col-md-3">
                                                    <h6 class="mb-1">
                                                        <i class="bi bi-@(isExpanded ? "chevron-down" : "chevron-right")"></i>
                                                        Ages @interval.StartAge-@interval.EndAge
                                                    </h6>
                                                    @if (!string.IsNullOrEmpty(interval.MilestoneAchieved))
                                                    {
                                                        <small class="text-success fw-bold">@interval.MilestoneAchieved</small>
                                                    }
                                                </div>
                                                <div class="col-md-3">
                                                    <strong>@interval.FinalBalance.ToString("C")</strong>
                                                    <br><small class="text-muted">Final Balance</small>
                                                </div>
                                                <div class="col-md-3">
                                                    <span class="text-success">+@interval.TotalGrowth.ToString("C")</span>
                                                    <br><small class="text-muted">Interest Earned</small>
                                                </div>
                                                <div class="col-md-3">
                                                    <span class="text-info">@interval.TotalContributions.ToString("C")</span>
                                                    <br><small class="text-muted">You Contributed</small>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Expanded Yearly Details -->
                                        @if (isExpanded)
                                        {
                                            <div class="yearly-details mt-2 ms-3 border-start border-primary ps-3">
                                                <div class="table-responsive">
                                                    <table class="table table-sm">
                                                        <thead class="table-light">
                                                            <tr>
                                                                <th>Year/Age</th>
                                                                <th>Balance</th>
                                                                <th>Interest</th>
                                                                <th>Contributions</th>
                                                                @if (calculatorModel.UseTaxAdvantaged)
                                                                {
                                                                    <th>Tax-Deferred</th>
                                                                    <th>Taxable</th>
                                                                }
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var year in interval.YearlyDetails)
                                                            {
                                                                <tr>
                                                                    <td>Year @year.Year (@(calculatorModel.CurrentAge + year.Year))</td>
                                                                    <td>@year.Balance.ToString("C")</td>
                                                                    <td class="text-success">@year.InterestEarned.ToString("C")</td>
                                                                    <td class="text-info">@year.ContributionsThisYear.ToString("C")</td>
                                                                    @if (calculatorModel.UseTaxAdvantaged)
                                                                    {
                                                                        <td>@year.TaxDeferredBalance.ToString("C")</td>
                                                                        <td>@year.TaxableBalance.ToString("C")</td>
                                                                        <td class="text-danger">@year.TaxesPaid.ToString("C")</td>
                                                                    }
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <!-- Traditional Year-by-Year View for Short-Term Plans -->
                                <div class="table-responsive">
                                    <table class="table table-sm table-striped">
                                        <thead>
                                            <tr>
                                                <th>Year/Age</th>
                                                <th>Balance</th>
                                                <th>Interest</th>
                                                <th>Contributions</th>
                                                @if (calculatorModel.UseTaxAdvantaged)
                                                {
                                                    <th>Tax-Deferred</th>
                                                    <th>Taxable</th>
                                                    <th>Taxes Paid</th>
                                                }
                                                @if (calculatorModel.UseTaxAdvantaged)
                                                {
                                                    <th>Tax-Deferred</th>
                                                    <th>Taxable</th>
                                                    <th>Taxes Paid</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var year in yearlyBreakdown)
                                            {
                                                <tr>
                                                    <td>Year @year.Year (@(calculatorModel.CurrentAge + year.Year))</td>
                                                    <td>@year.Balance.ToString("C")</td>
                                                    <td>@year.InterestEarned.ToString("C")</td>
                                                    <td>@year.ContributionsThisYear.ToString("C")</td>
                                                    @if (calculatorModel.UseTaxAdvantaged)
                                                    {
                                                        <td>@year.TaxDeferredBalance.ToString("C")</td>
                                                        <td>@year.TaxableBalance.ToString("C")</td>
                                                        <td class="text-danger">@year.TaxesPaid.ToString("C")</td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private bool isDarkTheme = false;
    
    // Enums for tax calculations
    public enum IncomeType
    {
        MixedInvestment,      // Default mix of dividends, interest, and capital gains
        MostlyDividends,      // Higher percentage of qualified dividends
        MostlyLongTermGains,  // Higher percentage of long-term capital gains
        MostlyInterest        // Higher percentage of interest/short-term gains
    }
    
    public enum TaxBracket
    {
        Low,    // 10-12% ordinary income, 0% long-term capital gains
        Medium, // 22-24% ordinary income, 15% long-term capital gains
        High    // 32-35% ordinary income, 20% long-term capital gains
    }
    
    private void ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        Console.WriteLine($"Theme toggled to {(isDarkTheme ? "dark" : "light")} mode");
    }
    
    [SupplyParameterFromForm]
    public SavingsCalculatorModel calculatorModel { get; set; } = new();
    private SavingsResults? results;
    private List<YearlyBreakdown> yearlyBreakdown = new();
    private List<IntervalSummary> intervalSummaries = new();
    private HashSet<int> expandedIntervals = new();

    protected override void OnInitialized()
    {
        // Initialize model with default values
        calculatorModel = new SavingsCalculatorModel
        {
            CurrentAge = 30,
            RetirementAge = 65,
            InitialTaxableAmount = 400,
            InitialTraditionalAmount = 400,
            InitialRothAmount = 200,
            MonthlyTaxableContribution = 200,
            MonthlyTraditionalContribution = 200,
            MonthlyRothContribution = 100,
            AnnualGrowthRate = 7,
            UseTaxAdvantaged = false,
            AnnualTaxDeferredContribution = 6000, // $6,000/year to 401k/IRA
            AnnualTaxableContribution = 6000,     // $6,000/year to taxable accounts
            TaxableIncomeType = IncomeType.MixedInvestment,
            TaxBracket = TaxBracket.Medium
        };
        
        base.OnInitialized();
    }

// Add a custom StateHasChanged method
    private void ForceUpdate()
    {
        Console.WriteLine($"[DEBUG] {DateTime.Now:HH:mm:ss.fff} ForceUpdate called - CurrentAge: {calculatorModel.CurrentAge}, RetirementAge: {calculatorModel.RetirementAge}, Years: {calculatorModel.Years}");
        StateHasChanged();
    }
    private void Calculate() 
    {
        try
        {
            var calculator = new SavingsCalculationEngine();
            results = calculator.Calculate(calculatorModel);
            yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);
            
            // Create interval summaries for better UX
            if (calculatorModel.Years > 10)
            {
                intervalSummaries = CreateIntervalSummaries(yearlyBreakdown);
            }
            
            StateHasChanged(); // Force UI update
        }
        catch (Exception ex)
        {
            // For debugging - you can remove this later
            Console.WriteLine($"Calculation error: {ex.Message}");
        } 
    }

    private string GetCompoundingText()
    {
        return "Monthly";
    }
    
    private string GetIncomeTypeDescription(IncomeType incomeType)
    {
        return incomeType switch
        {
            IncomeType.MixedInvestment => "Mixed (Balanced portfolio)",
            IncomeType.MostlyDividends => "Mostly Dividends (Dividend-focused)",
            IncomeType.MostlyLongTermGains => "Mostly Long-Term Gains (Buy and hold)",
            IncomeType.MostlyInterest => "Mostly Interest/Short-Term (Fixed income/active)",
            _ => "Mixed Investment"
        };
    }
    
    private string GetTaxBracketDescription(TaxBracket bracket)
    {
        return bracket switch
        {
            TaxBracket.Low => "Low (10-12% ordinary, 0% long-term)",
            TaxBracket.Medium => "Medium (22-24% ordinary, 15% long-term)",
            TaxBracket.High => "High (32-35% ordinary, 20% long-term)",
            _ => "Medium Tax Bracket"
        };
    }

    private List<IntervalSummary> CreateIntervalSummaries(List<YearlyBreakdown> breakdown)
    {
        // Get starting age - round up to next 5-year interval
        int startingAge = calculatorModel.CurrentAge;
        int roundedStartAge = (int)Math.Ceiling(startingAge / 5.0) * 5;
        
        return breakdown
            .Select((y, index) => new 
            { 
                Year = y, 
                Age = calculatorModel.CurrentAge + index + 1 
            })
            .GroupBy(item => ((item.Age - 1) / 5) * 5 + 5) // Group into 5-year age intervals
            .Select(g => new IntervalSummary
            {
                StartYear = g.First().Year.Year,
                EndYear = g.Last().Year.Year,
                StartAge = g.Key - 5,
                EndAge = Math.Min(g.Key, calculatorModel.RetirementAge),
                FinalBalance = g.Last().Year.Balance,
                TotalGrowth = g.Sum(item => item.Year.InterestEarned),
                TotalContributions = g.Sum(item => item.Year.ContributionsThisYear),
                YearlyDetails = g.Select(item => item.Year).ToList(),
                MilestoneAchieved = GetMilestone(g.Last().Year.Balance)
            })
            .ToList();
    }

    private string GetMilestone(decimal balance)
    {
        if (balance >= 1000000) return "🎉 Millionaire!";
        if (balance >= 500000) return "🚀 Half Million!";
        if (balance >= 250000) return "💪 Quarter Million!";
        if (balance >= 100000) return "🎯 First $100K!";
        if (balance >= 50000) return "📈 $50K Milestone!";
        return "";
    }

    private void ToggleInterval(int startYear)
    {
        Console.WriteLine($"ToggleInterval called for year {startYear}"); // Debug line
        if (expandedIntervals.Contains(startYear))
        {
            expandedIntervals.Remove(startYear);
            Console.WriteLine($"Collapsed interval {startYear}"); // Debug line 
        }
        else
        {
            expandedIntervals.Add(startYear);
            Console.WriteLine($"Expanded interval {startYear}"); // Debug line
        }
        Console.WriteLine($"Total expanded intervals: {expandedIntervals.Count}"); // Debug line
        StateHasChanged(); // Force UI refresh
    }

    public class SavingsCalculatorModel
    {
        [Required]
        [Range(18, 100, ErrorMessage = "Please enter your current age (18-100)")]
        public int CurrentAge { get; set; } = 30;

        [Required]
        [Range(50, 100, ErrorMessage = "Retirement age should be between 50-100")]
        public int RetirementAge { get; set; } = 65;

        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Initial taxable amount must be positive")]
        public decimal InitialTaxableAmount { get; set; } = 400;
        
        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Initial traditional amount must be positive")]
        public decimal InitialTraditionalAmount { get; set; } = 400;
        
        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Initial Roth amount must be positive")]
        public decimal InitialRothAmount { get; set; } = 200;
        
        // Legacy property for backwards compatibility
        public decimal InitialAmount 
        { 
            get => InitialTaxableAmount + InitialTraditionalAmount + InitialRothAmount;
            set 
            {
                // Split evenly if using the old model
                decimal portion = value / 3;
                InitialTaxableAmount = portion;
                InitialTraditionalAmount = portion;
                InitialRothAmount = portion;
            }
        }

        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Monthly taxable contribution must be positive")]
        public decimal MonthlyTaxableContribution { get; set; } = 200;
        
        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Monthly traditional contribution must be positive")]
        public decimal MonthlyTraditionalContribution { get; set; } = 200;
        
        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Monthly Roth contribution must be positive")]
        public decimal MonthlyRothContribution { get; set; } = 100;
        
        // Legacy property for backwards compatibility
        public decimal MonthlyContribution 
        { 
            get => MonthlyTaxableContribution + MonthlyTraditionalContribution + MonthlyRothContribution;
            set 
            {
                // Split evenly if using the old model
                decimal portion = value / 3;
                MonthlyTaxableContribution = portion;
                MonthlyTraditionalContribution = portion;
                MonthlyRothContribution = portion;
            }
        }

        [Required]
        [Range(0, 50, ErrorMessage = "Growth rate must be between 0 and 50%")]
        public decimal AnnualGrowthRate { get; set; } = 7;

        // Tax-advantaged account properties
        public bool UseTaxAdvantaged { get; set; } = false;
        
        [Range(0, double.MaxValue, ErrorMessage = "Tax-deferred contribution must be positive")]
        public decimal AnnualTaxDeferredContribution { get; set; } = 6000;
        
        [Range(0, double.MaxValue, ErrorMessage = "Taxable contribution must be positive")]
        public decimal AnnualTaxableContribution { get; set; } = 6000;
        
        // Advanced tax properties
        public IncomeType TaxableIncomeType { get; set; } = IncomeType.MixedInvestment;
        public TaxBracket TaxBracket { get; set; } = TaxBracket.Medium;

        // Calculated property
        public int Years 
        { 
            get 
            {
                var result = Math.Max(0, RetirementAge - CurrentAge);
                Console.WriteLine($"[DEBUG] Years calculated: {RetirementAge} - {CurrentAge} = {result}");
                return result;
            }
        }
   
        // Fixed to monthly compounding
        public int CompoundingFrequency { get; set; } = 12; 
    }

    public class SavingsResults
    {
        public decimal FinalAmount { get; set; }
        public decimal TotalContributions { get; set; }
        public decimal TotalInterestEarned { get; set; }
        
        // Tax-advantaged specific results
        public decimal TaxDeferredBalance { get; set; }
        public decimal TaxableBalance { get; set; }
        public decimal RothBalance { get; set; }
        public decimal TaxDeferredInterestEarned { get; set; }
        public decimal TaxableInterestEarned { get; set; }
        public decimal RothInterestEarned { get; set; }
        public decimal EstimatedTaxSavings { get; set; }
        
        // Detailed tax breakdowns
        public decimal QualifiedDividendIncome { get; set; }
        public decimal NonQualifiedIncome { get; set; }
        public decimal LongTermCapitalGains { get; set; }
        public decimal ShortTermCapitalGains { get; set; }
        public decimal TotalTaxesPaid { get; set; }
        public decimal EffectiveTaxRate { get; set; }
    }

    public class YearlyBreakdown
    {
        public int Year { get; set; }
        public decimal Balance { get; set; }
        public decimal InterestEarned { get; set; }
        public decimal ContributionsThisYear { get; set; }
        
        // Tax-advantaged specific breakdowns
        public decimal TaxDeferredBalance { get; set; }
        public decimal TaxableBalance { get; set; }
        public decimal RothBalance { get; set; }
        public decimal TaxDeferredInterest { get; set; }
        public decimal TaxableInterest { get; set; }
        public decimal RothInterest { get; set; }
        public decimal TaxDeferredContribution { get; set; }
        public decimal TaxableContribution { get; set; }
        public decimal RothContribution { get; set; }
        
        // Detailed income and tax breakdowns
        public decimal QualifiedDividends { get; set; }
        public decimal NonQualifiedIncome { get; set; }
        public decimal LongTermGains { get; set; }
        public decimal ShortTermGains { get; set; }
        public decimal TaxesPaid { get; set; }
    }

    public class IntervalSummary
    {
        public int StartYear { get; set; }
        public int EndYear { get; set; }
        public int StartAge { get; set; }
        public int EndAge { get; set; }
        public decimal FinalBalance { get; set; }
        public decimal TotalGrowth { get; set; }
        public decimal TotalContributions { get; set; }
        public List<YearlyBreakdown> YearlyDetails { get; set; } = new();
        public string MilestoneAchieved { get; set; } = "";
    }

    public class SavingsCalculationEngine
    {
        // Tax rates based on bracket
        private decimal GetOrdinaryTaxRate(TaxBracket bracket)
        {
            return bracket switch
            {
                TaxBracket.Low => 0.12m,    // 12% (10-12% bracket)
                TaxBracket.Medium => 0.24m, // 24% (22-24% bracket)
                TaxBracket.High => 0.35m,   // 35% (32-35% bracket)
                _ => 0.24m                  // Default to medium
            };
        }
        
        private decimal GetLongTermGainsTaxRate(TaxBracket bracket)
        {
            return bracket switch
            {
                TaxBracket.Low => 0.0m,     // 0% for low income
                TaxBracket.Medium => 0.15m, // 15% for middle income
                TaxBracket.High => 0.20m,   // 20% for high income
                _ => 0.15m                  // Default to medium
            };
        }
        
        // Income distribution percentages based on income type
        private (decimal qualifiedDividends, decimal nonQualifiedIncome, decimal longTermGains, decimal shortTermGains) 
            GetIncomeDistribution(IncomeType incomeType)
        {
            return incomeType switch
            {
                IncomeType.MixedInvestment => (0.25m, 0.25m, 0.40m, 0.10m),      // Balanced mix
                IncomeType.MostlyDividends => (0.60m, 0.20m, 0.15m, 0.05m),      // Dividend-focused
                IncomeType.MostlyLongTermGains => (0.15m, 0.10m, 0.70m, 0.05m),  // Growth/buy-and-hold
                IncomeType.MostlyInterest => (0.05m, 0.65m, 0.10m, 0.20m),       // Fixed income/active trading
                _ => (0.25m, 0.25m, 0.40m, 0.10m)                                // Default to mixed
            };
        }

        public SavingsResults Calculate(SavingsCalculatorModel model)
        {
            if (!model.UseTaxAdvantaged)
            {
                // Original calculation method for non-tax-advantaged
                decimal totalInitialAmount = model.InitialTaxableAmount + model.InitialTraditionalAmount + model.InitialRothAmount;
                decimal monthlyRate = model.AnnualGrowthRate / 100 / 12;
                int totalMonths = model.Years * 12;
                decimal totalMonthlyContribution = model.MonthlyTaxableContribution + model.MonthlyTraditionalContribution + model.MonthlyRothContribution;
                decimal totalContributions = totalInitialAmount + (totalMonthlyContribution * totalMonths);

                // Calculate future value with compound interest and regular contributions
                decimal futureValue = totalInitialAmount;
                
                // Compound the initial amount
                futureValue *= (decimal)Math.Pow((double)(1 + monthlyRate), totalMonths);
                
                // Add future value of monthly contributions (annuity)
                if (monthlyRate > 0)
                {
                    decimal annuityFV = totalMonthlyContribution * 
                        ((decimal)Math.Pow((double)(1 + monthlyRate), totalMonths) - 1) / monthlyRate;
                    futureValue += annuityFV;
                }
                else
                {
                    futureValue += totalMonthlyContribution * totalMonths;
                }

                return new SavingsResults
                {
                    FinalAmount = Math.Round(futureValue, 2),
                    TotalContributions = totalContributions,
                    TotalInterestEarned = Math.Round(futureValue - totalContributions, 2)
                };
            }
            else
            {
                // Get tax rates based on bracket
                decimal ordinaryTaxRate = GetOrdinaryTaxRate(model.TaxBracket);
                decimal longTermGainsTaxRate = GetLongTermGainsTaxRate(model.TaxBracket);
                
                // Get income distribution based on type
                var (qualifiedPercent, nonQualifiedPercent, longTermPercent, shortTermPercent) = 
                    GetIncomeDistribution(model.TaxableIncomeType);
                
                // Tax-advantaged calculation
                decimal taxDeferredBalance = model.InitialAmount / 2; // Split initial amount between accounts
                decimal taxableBalance = model.InitialAmount / 2;
                
                decimal monthlyRate = model.AnnualGrowthRate / 100 / 12;
                int totalMonths = model.Years * 12;
                
                decimal monthlyTaxDeferredContribution = model.AnnualTaxDeferredContribution / 12;
                decimal monthlyTaxableContribution = model.AnnualTaxableContribution / 12;
                
                decimal totalTaxDeferredContributions = taxDeferredBalance + (monthlyTaxDeferredContribution * totalMonths);
                decimal totalTaxableContributions = taxableBalance + (monthlyTaxableContribution * totalMonths);
                
                // Track total taxes paid and income by type
                decimal totalQualifiedDividends = 0;
                decimal totalNonQualifiedIncome = 0;
                decimal totalLongTermGains = 0;
                decimal totalShortTermGains = 0;
                decimal totalTaxesPaid = 0;
                
                // Calculate tax-deferred account growth (no annual tax drag)
                decimal taxDeferredFutureValue = taxDeferredBalance;
                decimal taxDeferredInterest = 0;
                
                // Calculate taxable account with yearly tax impact
                decimal taxableValue = taxableBalance;
                decimal taxableInterest = 0;
                
                // Year by year calculation to account for taxes
                for (int year = 1; year <= model.Years; year++)
                {
                    // Tax-deferred account - simple compound growth
                    decimal yearlyTaxDeferredInterest = 0;
                    decimal yearlyTaxDeferredContribution = monthlyTaxDeferredContribution * 12;
                    
                    for (int month = 1; month <= 12; month++)
                    {
                        decimal monthlyInterest = taxDeferredFutureValue * monthlyRate;
                        yearlyTaxDeferredInterest += monthlyInterest;
                        taxDeferredFutureValue += monthlyInterest + monthlyTaxDeferredContribution;
                    }
                    
                    taxDeferredInterest += yearlyTaxDeferredInterest;
                    
                    // Taxable account - with tax drag
                    decimal yearlyTaxableInterest = 0;
                    decimal yearlyTaxableContribution = monthlyTaxableContribution * 12;
                    
                    // Calculate yearly interest before taxes
                    for (int month = 1; month <= 12; month++)
                    {
                        decimal monthlyInterest = taxableValue * monthlyRate;
                        yearlyTaxableInterest += monthlyInterest;
                        taxableValue += monthlyInterest + monthlyTaxableContribution;
                    }
                    
                    // Break down the interest by income type
                    decimal qualifiedDividends = yearlyTaxableInterest * qualifiedPercent;
                    decimal nonQualifiedIncome = yearlyTaxableInterest * nonQualifiedPercent;
                    decimal longTermGains = yearlyTaxableInterest * longTermPercent;
                    decimal shortTermGains = yearlyTaxableInterest * shortTermPercent;
                    
                    // Calculate tax on each type of income
                    decimal qualifiedDividendsTax = qualifiedDividends * longTermGainsTaxRate; // Qualified dividends taxed as LTCG
                    decimal nonQualifiedTax = nonQualifiedIncome * ordinaryTaxRate;
                    decimal longTermGainsTax = longTermGains * longTermGainsTaxRate;
                    decimal shortTermGainsTax = shortTermGains * ordinaryTaxRate;
                    
                    decimal yearlyTaxes = qualifiedDividendsTax + nonQualifiedTax + longTermGainsTax + shortTermGainsTax;
                    
                    // Reduce the account value by taxes paid
                    taxableValue -= yearlyTaxes;
                    
                    // Accumulate totals
                    totalQualifiedDividends += qualifiedDividends;
                    totalNonQualifiedIncome += nonQualifiedIncome;
                    totalLongTermGains += longTermGains;
                    totalShortTermGains += shortTermGains;
                    totalTaxesPaid += yearlyTaxes;
                    taxableInterest += yearlyTaxableInterest - yearlyTaxes; // Net interest after taxes
                }
                
                // Calculate the effective tax rate on all taxable investment income
                decimal totalTaxableIncome = totalQualifiedDividends + totalNonQualifiedIncome + 
                                           totalLongTermGains + totalShortTermGains;
                decimal effectiveTaxRate = (totalTaxableIncome > 0) ? (totalTaxesPaid / totalTaxableIncome) : 0;
                
                // Calculate what growth would have been without tax advantages
                decimal totalRegularTaxes = (taxDeferredInterest + totalTaxableIncome) * effectiveTaxRate;
                decimal estimatedTaxSavings = totalRegularTaxes - totalTaxesPaid;
                
                // Total combined values
                decimal totalFutureValue = taxDeferredFutureValue + taxableValue;
                decimal totalContributions = totalTaxDeferredContributions + totalTaxableContributions;
                
                return new SavingsResults
                {
                    FinalAmount = Math.Round(totalFutureValue, 2),
                    TotalContributions = totalContributions,
                    TotalInterestEarned = Math.Round(taxDeferredInterest + taxableInterest, 2),
                    TaxDeferredBalance = Math.Round(taxDeferredFutureValue, 2),
                    TaxableBalance = Math.Round(taxableValue, 2),
                    TaxDeferredInterestEarned = Math.Round(taxDeferredInterest, 2),
                    TaxableInterestEarned = Math.Round(taxableInterest, 2),
                    EstimatedTaxSavings = Math.Round(estimatedTaxSavings, 2),
                    QualifiedDividendIncome = Math.Round(totalQualifiedDividends, 2),
                    NonQualifiedIncome = Math.Round(totalNonQualifiedIncome, 2),
                    LongTermCapitalGains = Math.Round(totalLongTermGains, 2),
                    ShortTermCapitalGains = Math.Round(totalShortTermGains, 2),
                    TotalTaxesPaid = Math.Round(totalTaxesPaid, 2),
                    EffectiveTaxRate = Math.Round(effectiveTaxRate * 100, 2) // As percentage
                };
            }
        }

        public List<YearlyBreakdown> GetYearlyBreakdown(SavingsCalculatorModel model)
        {
            var breakdown = new List<YearlyBreakdown>();
            
            if (!model.UseTaxAdvantaged)
            {
                // Original breakdown calculation
                decimal totalInitialAmount = model.InitialTaxableAmount + model.InitialTraditionalAmount + model.InitialRothAmount;
                decimal balance = totalInitialAmount;
                decimal monthlyRate = model.AnnualGrowthRate / 100 / 12;
                decimal totalMonthlyContribution = model.MonthlyTaxableContribution + model.MonthlyTraditionalContribution + model.MonthlyRothContribution;

                for (int year = 1; year <= model.Years; year++)
                {
                    decimal startBalance = balance;
                    decimal yearlyInterest = 0;

                    // Calculate month by month for this year
                    for (int month = 1; month <= 12; month++)
                    {
                        decimal monthlyInterest = balance * monthlyRate;
                        yearlyInterest += monthlyInterest;
                        balance += monthlyInterest + totalMonthlyContribution;
                    }

                    breakdown.Add(new YearlyBreakdown
                    {
                        Year = year,
                        Balance = Math.Round(balance, 2),
                        InterestEarned = Math.Round(yearlyInterest, 2),
                        ContributionsThisYear = totalMonthlyContribution * 12,
                        // Add contribution breakdown by account type
                        TaxableContribution = model.MonthlyTaxableContribution * 12,
                        TaxDeferredContribution = model.MonthlyTraditionalContribution * 12,
                        RothContribution = model.MonthlyRothContribution * 12
                    });
                }
            }
            else
            {
                // Get tax rates based on bracket
                decimal ordinaryTaxRate = GetOrdinaryTaxRate(model.TaxBracket);
                decimal longTermGainsTaxRate = GetLongTermGainsTaxRate(model.TaxBracket);
                
                // Get income distribution based on type
                var (qualifiedPercent, nonQualifiedPercent, longTermPercent, shortTermPercent) = 
                    GetIncomeDistribution(model.TaxableIncomeType);
                
                // Tax-advantaged breakdown calculation
                decimal taxDeferredBalance = model.InitialAmount / 2; // Split initial amount between accounts
                decimal taxableBalance = model.InitialAmount / 2;
                
                decimal monthlyRate = model.AnnualGrowthRate / 100 / 12;
                decimal monthlyTaxDeferredContribution = model.AnnualTaxDeferredContribution / 12;
                decimal monthlyTaxableContribution = model.AnnualTaxableContribution / 12;

                for (int year = 1; year <= model.Years; year++)
                {
                    decimal yearlyTaxDeferredInterest = 0;
                    decimal yearlyTaxableInterest = 0;
                    decimal startTaxDeferredBalance = taxDeferredBalance;
                    decimal startTaxableBalance = taxableBalance;

                    // Calculate month by month for this year
                    for (int month = 1; month <= 12; month++)
                    {
                        // Tax-deferred account growth
                        decimal monthlyTaxDeferredInterest = taxDeferredBalance * monthlyRate;
                        yearlyTaxDeferredInterest += monthlyTaxDeferredInterest;
                        taxDeferredBalance += monthlyTaxDeferredInterest + monthlyTaxDeferredContribution;
                        
                        // Taxable account growth
                        decimal monthlyTaxableInterest = taxableBalance * monthlyRate;
                        yearlyTaxableInterest += monthlyTaxableInterest;
                        taxableBalance += monthlyTaxableInterest + monthlyTaxableContribution;
                    }
                    
                    // Break down taxable interest by income type
                    decimal qualifiedDividends = yearlyTaxableInterest * qualifiedPercent;
                    decimal nonQualifiedIncome = yearlyTaxableInterest * nonQualifiedPercent;
                    decimal longTermGains = yearlyTaxableInterest * longTermPercent;
                    decimal shortTermGains = yearlyTaxableInterest * shortTermPercent;
                    
                    // Calculate taxes
                    decimal qualifiedDividendsTax = qualifiedDividends * longTermGainsTaxRate;
                    decimal nonQualifiedTax = nonQualifiedIncome * ordinaryTaxRate;
                    decimal longTermGainsTax = longTermGains * longTermGainsTaxRate;
                    decimal shortTermGainsTax = shortTermGains * ordinaryTaxRate;
                    
                    decimal yearlyTaxes = qualifiedDividendsTax + nonQualifiedTax + longTermGainsTax + shortTermGainsTax;
                    
                    // Reduce taxable balance by taxes paid
                    taxableBalance -= yearlyTaxes;

                    decimal totalBalance = taxDeferredBalance + taxableBalance;
                    decimal totalYearlyInterest = yearlyTaxDeferredInterest + yearlyTaxableInterest - yearlyTaxes;
                    decimal totalYearlyContributions = (monthlyTaxDeferredContribution + monthlyTaxableContribution) * 12;

                    breakdown.Add(new YearlyBreakdown
                    {
                        Year = year,
                        Balance = Math.Round(totalBalance, 2),
                        InterestEarned = Math.Round(totalYearlyInterest, 2),
                        ContributionsThisYear = totalYearlyContributions,
                        TaxDeferredBalance = Math.Round(taxDeferredBalance, 2),
                        TaxableBalance = Math.Round(taxableBalance, 2),
                        TaxDeferredInterest = Math.Round(yearlyTaxDeferredInterest, 2),
                        TaxableInterest = Math.Round(yearlyTaxableInterest - yearlyTaxes, 2),
                        TaxDeferredContribution = Math.Round(monthlyTaxDeferredContribution * 12, 2),
                        TaxableContribution = Math.Round(monthlyTaxableContribution * 12, 2),
                        QualifiedDividends = Math.Round(qualifiedDividends, 2),
                        NonQualifiedIncome = Math.Round(nonQualifiedIncome, 2),
                        LongTermGains = Math.Round(longTermGains, 2),
                        ShortTermGains = Math.Round(shortTermGains, 2),
                        TaxesPaid = Math.Round(yearlyTaxes, 2)
                    });
                }
            }

            return breakdown;
        }
    }
}
