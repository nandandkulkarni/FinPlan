@page "/wealth-building"
@using System.ComponentModel.DataAnnotations
@using FinPlan.Shared
@using FinPlan.Shared.Enums
@using FinPlan.Shared.Models
@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Services
@using FinPlan.Web.Components.Shared
@using FinPlan.Web.Services
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject FinPlan.Web.Services.DebugMessageService DebugService
@inject FinPlan.Web.Services.UserGuidService UserGuidService
@namespace FinPlan.Web.Components.Pages

<PageTitle>Savings - Wealth Journey</PageTitle>

<!-- Reuse the RetirementInputWizard for quick setup -->
<RetirementInputWizard Model="@calculatorModel" Visible="@showWizard" VisibleChanged="@(v => showWizard = v)" OnFinished="HandleWizardFinished" OnSave="SaveUserSavingsAsync" InitialStep="@wizardOpenStep" />

<style>
    :root { --brand-yellow: #FFD600; --muted: #6c757d; --accent: #6D5DFC; }
    .container-wire { padding: 14px; }
    .page-header { text-align:center; font-weight:700; font-size:1.45rem; margin-bottom:12px; color:#111; }
    .section-panel { border: 3px solid var(--brand-yellow); border-radius: 10px; box-shadow: 0 12px 30px rgba(13,38,76,0.06), 0 4px 18px rgba(255,214,0,0.08); padding: 14px; background:#fff; }
    .panel { background:#fff; border-radius:10px; padding:12px; border:1px solid rgba(0,0,0,0.03); display:flex; flex-direction:column; }
    .summary-money { font-size:1.5rem; font-weight:800; }
    .tab-panel-box { border:2px solid #C79A00; border-radius:8px; padding:26px 18px 20px 18px; background:#fff; box-shadow:0 4px 12px rgba(0,0,0,0.04); }
    .btn-ghost { background:transparent; border:1px solid #e6e9ee; padding:6px 10px; border-radius:8px; }
    .small-note { font-size:0.9rem; color:var(--muted); }
</style>

<div class="container-wire">
    <div class="page-header">
        <h3>Savings</h3>
        <div class="small-note">Wealth Journey planner wrapped in the drawdown-style chrome</div>
    </div>

    <div class="top-area">
        <div class="container-fluid">
            <div class="row g-3">
                <!-- Left column (2) -->
                <div class="col-12 col-md-2">
                    <div class="panel">
                        <div style="font-weight:700; margin-bottom:8px;">Quick Links</div>
                        <div style="display:flex; flex-direction:column; gap:6px;">
                            <a href="/" class="badge">Home</a>
                            <a href="/guides/how-to-use-wealth-journey-calculator" class="badge">How to</a>
                            <a href="/contact" class="badge">Contact</a>
                        </div>
                        <div style="margin-top:10px; font-size:0.85rem; color:var(--muted);">Mini summary</div>
                        <div style="margin-top:6px; background:#f8fafc; padding:8px; border-radius:6px;">Post-Tax <br /><strong>@(results?.TaxableBalance.ToString("C0") ?? "-")</strong></div>
                    </div>
                </div>

                <!-- Center combined column (8) -->
                <div class="col-12 col-md-8">
                    <div class="panel section-panel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4>Plan Sections</h4>
                            <div>
                                <button class="btn-ghost me-2" @onclick="() => { showWizard = true; wizardOpenStep = 1; }">Quick setup</button>
                                <button class="btn btn-primary" @onclick="Calculate">Calculate</button>
                            </div>
                        </div>

                        <div class="tab-panel-box">
                            <EditForm Model="@calculatorModel" OnValidSubmit="Calculate">
                                <DataAnnotationsValidator />

                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label>Brokerage / Savings</label>
                                        <FormattedNumberNew class="form-control" @bind-Value="calculatorModel.InitialTaxableAmount" Decimals="0" @onblur="SaveUserSavingsAsync" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label>Traditional</label>
                                        <FormattedNumberNew class="form-control" @bind-Value="calculatorModel.InitialTraditionalAmount" Decimals="0" @onblur="SaveUserSavingsAsync" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label>Roth</label>
                                        <FormattedNumberNew class="form-control" @bind-Value="calculatorModel.InitialRothAmount" Decimals="0" @onblur="SaveUserSavingsAsync" />
                                    </div>
                                </div>

                                <div class="row mt-2">
                                    <div class="col-md-4 mb-3">
                                        <label>Monthly Post-tax</label>
                                        <FormattedNumberNew class="form-control" @bind-Value="calculatorModel.MonthlyTaxableContribution" Decimals="0" @onblur="SaveUserSavingsAsync" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label>Monthly Traditional</label>
                                        <FormattedNumberNew class="form-control" @bind-Value="calculatorModel.MonthlyTraditionalContribution" Decimals="0" @onblur="SaveUserSavingsAsync" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label>Monthly Roth</label>
                                        <FormattedNumberNew class="form-control" @bind-Value="calculatorModel.MonthlyRothContribution" Decimals="0" @onblur="SaveUserSavingsAsync" />
                                    </div>
                                </div>

                                <div class="d-flex justify-content-end mt-3">
                                    <button type="submit" class="btn btn-primary" disabled="@calculatorModel.AutoCalculate">Calculate Growth</button>
                                </div>
                            </EditForm>
                        </div>

                        @if (results != null)
                        {
                            <div class="mt-3">
                                <div class="row mb-3">
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-primary summary-money">@results.FinalAmount.ToString("C0")</h4><p class="mb-0">Final Amount</p></div></div></div>
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-success summary-money">@results.TotalInterestEarned.ToString("C0")</h4><p class="mb-0">Growth</p></div></div></div>
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-info summary-money">@results.TotalContributions.ToString("C0")</h4><p class="mb-0">Total Contributions</p></div></div></div>
                                    <div class="col-md-3"><div class="card bg-light"><div class="card-body text-center"><h4 class="text-warning summary-money">@string.Format("{0:F1}%/{1:F1}%/{2:F1}%", calculatorModel.AnnualGrowthRateTaxable, calculatorModel.AnnualGrowthRateTraditional, calculatorModel.AnnualGrowthRateRoth)</h4><p class="mb-0">Growth (Taxable/Traditional/Roth)</p></div></div></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Right column (2) -->
                <div class="col-12 col-md-2">
                    <div class="panel">
                        <div style="font-weight:700; margin-bottom:8px; display:flex; justify-content:space-between; align-items:center;">
                            <div>Debug</div>
                            <div>
                                <button class="btn-ghost" style="padding:4px 6px; font-size:0.8rem;" @onclick="ToggleRightDebug">Toggle</button>
                            </div>
                        </div>
                        <div style="font-size:0.85rem; color:var(--muted);">Toggle messages</div>
                        @if (showRightDebug)
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:200px; overflow:auto;">
                                @foreach (var msg in DebugService.Messages.OrderByDescending(m => m.MessageTime))
                                {
                                    <div style="margin-bottom:6px;"><small style="color:var(--muted);">@msg.MessageTime.ToString("HH:mm:ss")</small><div>@msg.MessageText</div></div>
                                }
                            </div>
                        }
                        else
                        {
                            <div style="margin-top:8px; background:#fbfbfb; padding:8px; border-radius:6px; max-height:120px; overflow:auto;">No messages</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Yearly Projection grid - uses same bootstrap/table styling as retirement page *@
    <div class="grid-panel panel mt-3">
        <div class="grid-header">
            <div style="font-weight:800; font-size:1rem;">Yearly Projection</div>
            <div class="legend">
                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:var(--brand-yellow)"></span><small> Milestone</small></div>
                <div style="display:flex; gap:8px; align-items:center;"><span class="swatch" style="background:#38B2AC"></span><small> Growth</small></div>
            </div>
        </div>

        <div class="grid">
            <table class="table table-sm table-bordered" aria-label="Yearly projection">
                <thead class="table-light">
                    <tr>
                        <th>Year</th>
                        <th>Age</th>
                        <th>Taxable BOY</th>
                        <th>Taxable Growth</th>
                        <th>Taxes</th>
                        <th>Taxable EOY</th>
                        <th>Traditional BOY</th>
                        <th>Traditional Growth</th>
                        <th>Traditional EOY</th>
                        <th>Roth BOY</th>
                        <th>Roth Growth</th>
                        <th>Roth EOY</th>
                        <th class="text-end">Total Contributions</th>
                        <th class="text-end">Total Growth</th>
                        <th class="text-end">Total EOY</th>
                    </tr>
                </thead>
                <tbody>
                    @if (yearlyBreakdown == null || !yearlyBreakdown.Any())
                    {
                        <tr><td colspan="15" class="text-center text-muted">No projection rows available. Run Calculate to generate projections.</td></tr>
                    }
                    else
                    {
                        foreach (var r in yearlyBreakdown)
                        {
                            var age = calculatorModel.CurrentAge + r.Year; // approximate
                            <tr>
                                <td>@r.Year</td>
                                <td>@age</td>
                                <td class="text-end">@FormatMoneySafe(r.TaxableBOYBalance)</td>
                                <td class="text-end">@FormatMoneySafe(r.TaxableInterest)</td>
                                <td class="text-end">@FormatMoneySafe(r.TaxesPaid)</td>
                                <td class="text-end">@FormatMoneySafe(r.TaxableEOYBalance)</td>
                                <td class="text-end">@FormatMoneySafe(r.TraditionalBOYBalance)</td>
                                <td class="text-end">@FormatMoneySafe(r.Traditionalnterest)</td>
                                <td class="text-end">@FormatMoneySafe(r.TraditionalEOYBalance)</td>
                                <td class="text-end">@FormatMoneySafe(r.RothBOYBalance)</td>
                                <td class="text-end">@FormatMoneySafe(r.RothInterest)</td>
                                <td class="text-end">@FormatMoneySafe(r.RothEOYBalance)</td>
                                <td class="text-end">@FormatMoneySafe(r.TotalContributions)</td>
                                <td class="text-end">@FormatMoneySafe(r.TotalGrowth)</td>
                                <td class="text-end">@FormatMoneySafe(r.TotalEOYBalance)</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

</div>

@code {
    // Wizard control
    private bool showWizard = false;
    private int wizardOpenStep = 1;

    // State copied from WealthJourmeyPlanner
    [SupplyParameterFromForm]
    public SavingsCalculatorModel calculatorModel { get; set; } = new();
    private SavingsResults? results;
    private FinPlan.Shared.Models.Savings.SavingsResults? youResults;
    private FinPlan.Shared.Models.Savings.SavingsResults? partnerResults;
    private List<YearlyBreakdown> yearlyBreakdown = new();
    private List<IntervalSummary> intervalSummaries = new();
    private bool showRightDebug = false;
    private string calculatorType = "TestSavings_yours";
    private string userGuid = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // noop
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try { userGuid = await UserGuidService.GetOrCreateUserGuidAsync(); } catch { }
            await LoadUserSavingsAsync();
            Calculate();
            await LoadMiniSummariesAsync();
            StateHasChanged();
        }
    }

    private void Calculate()
    {
        try
        {
            var calculator = new SavingsCalculationEngine();
            results = calculator.Calculate(calculatorModel);
            yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Calc error: {ex.Message}");
        }
    }

    private string GetApiBaseUrl()
    {
#if DEBUG
            return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "https://api.finplan.example";
#endif
    }

    private async Task LoadUserSavingsAsync()
    {
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calculatorType}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.GetAsync(url);
            if (!response.IsSuccessStatusCode) return;
            var json = await response.Content.ReadAsStringAsync();
            var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            if (loadedModel != null)
            {
                calculatorModel = loadedModel;
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Load failed: {ex.Message}");
        }
    }

    private async Task LoadMiniSummariesAsync()
    {
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            async Task<FinPlan.Shared.Models.Savings.SavingsResults?> LoadFor(string calcType)
            {
                try
                {
                    var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calcType}";
                    var response = await client.GetAsync(url);
                    if (!response.IsSuccessStatusCode) return null;
                    var json = await response.Content.ReadAsStringAsync();
                    var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (loadedModel == null) return null;
                    var calc = new FinPlan.Shared.Services.SavingsCalculationEngine();
                    return calc.Calculate(loadedModel);
                }
                catch { return null; }
            }

            var yourTask = LoadFor("TestSavings_yours");
            var partnerTask = LoadFor("TestSavings_partners");
            await Task.WhenAll(yourTask, partnerTask);
            youResults = await yourTask;
            partnerResults = await partnerTask;
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Mini summaries load failed: {ex.Message}");
        }
    }

    private async Task SaveUserSavingsAsync()
    {
        try
        {
            calculatorModel.LastUpdateDate = DateTime.UtcNow;
            var saveRequest = new PersistSavingsRequest { UserGuid = userGuid, CalculatorType = calculatorType, Data = calculatorModel };
            var json = System.Text.Json.JsonSerializer.Serialize(saveRequest);
            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync($"{GetApiBaseUrl()}/api/FinPlan/save", content);
            if (!response.IsSuccessStatusCode)
            {
                DebugService.AddMessage($"Save failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Save error: {ex.Message}");
        }
    }

    private async Task HandleWizardFinished((int AgeYou, int AgePartner) ages)
    {
        // map retirement age to model if present
        try
        {
            if (ages.AgeYou > 0) calculatorModel.RetirementAge = ages.AgeYou;
            // Save and recalc
            await SaveUserSavingsAsync();
            Calculate();
            StateHasChanged();
        }
        catch { }
    }

    private void ToggleRightDebug() { showRightDebug = !showRightDebug; StateHasChanged(); }

    private string FormatMoneySafe(decimal? v) => v.HasValue ? v.Value.ToString("C0") : "-";
}
