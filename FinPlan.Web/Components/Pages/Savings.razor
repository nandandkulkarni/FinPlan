@page "/savings-wealth-building"
@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Services
@using FinPlan.Web.Components.Shared
@using FinPlan.Web.Services
@namespace FinPlan.Web.Components.Pages

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject DebugMessageService DebugService
@inject UserGuidService UserGuidService


<style>
    body {
    }

    /* Add missing CSS variable */
    :root {
        --brand-yellow: #FFD600;
    }


    /* CSS Variables - convert to actual values for better compatibility */
    .container-wire {
        padding: 14px;
    }

    /* Header info icon helpers (Option A + B) */
    .th-info {
        position: relative;
        padding-right: 18px;
    }
    /* reserve right edge */
    .th-info-icon {
        position: absolute;
        top: 6px;
        right: 6px;
        font-size: .9rem;
        cursor: pointer;
        opacity: .65;
        transition: opacity .15s ease-in-out;
    }
    /* Show icon only on header hover */
    .th-info .th-info-icon {
        opacity: 0;
    }

    thead th:hover .th-info .th-info-icon {
        opacity: .9;
    }
    /* Optional: hide on phones to keep headers tight */
    @@media (max-width: 768px) {
        .th-info-icon {
            display: none;
        }
    }

    .missing-badge {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 0.7rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
    }

    .incomplete-section {
        border: 1px solid rgba(220, 53, 69, 0.3);
        box-shadow: 0 2px 8px rgba(220, 53, 69, 0.1);
    }

    tab-panel-box {
        border: 2px solid #C79A00; /* dark yellow border */
        border-radius: 8px;
        padding: var(--tab-panel-padding-top) 18px 20px 18px;
        margin-top: 0;
        top: var(--tab-panel-top-offset);
        position: relative;
        background: #ffffff;
        box-shadow: 0 4px 12px rgba(0,0,0,0.04);
        z-index: 10;
        overflow: visible;
    }

    .tab-active-custom {
        background-color: #FFD600 !important;
        color: #222 !important;
        font-weight: 600;
        border: 1px solid #FFD600 !important;
        border-bottom: none !important;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s, color 0.2s;
    }

    .tab-item-active {
        background: #FFD600;
        border-radius: 8px 8px 0 0;
        padding: 4px 6px;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

    .col-taxable, th.col-taxable {
        background-color: rgba(31,111,235,0.06);
    }

    th.col-taxable {
        color: #1F6FEB;
        font-weight: 700;
    }

    .col-traditional, th.col-traditional {
        background-color: rgba(56,178,172,0.06);
    }

    .col-roth, th.col-roth {
        background-color: rgba(109,93,252,0.06);
    }

    th.col-roth {
        color: #6D5DFC;
        font-weight: 700;
    }

    .col-totals, th.col-totals {
        background-color: rgba(255,214,0,0.06);
    }

    th.col-totals {
        color: #FFD600;
        font-weight: 700;
    }

    th.col-traditional {
        color: #38B2AC;
        font-weight: 700;
    }

    /* small touch to keep numeric alignment and readability */
    .table td.col-taxable,
    .table td.col-traditional,
    .table td.col-roth,
    .table td.col-totals {
        font-variant-numeric: tabular-nums;
    }

    .page-header {
        text-align: center;
        font-weight: 700;
        font-size: 1.45rem;
        margin-bottom: 12px;
        color: #111;
    }

    .top-area {
        position: relative;
    }

    .panel {
        background: #ffffff;
        border-radius: 10px;
        box-shadow: 0 6px 18px rgba(22,28,36,0.06);
        padding: 12px;
        border: 1px solid rgba(0,0,0,0.03);
        display: flex;
        flex-direction: column;
        flex: 1 1 0%;
    }

    /* Section card variant used inside the Plan Sections grid */
    .section-card {
        border: 1px solid rgba(16,24,36,0.12);
        padding: 10px;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        min-height: 92px;
        background: #fff;
    }

        .section-card .actions {
            margin-top: auto;
            display: flex;
            justify-content: flex-start;
            gap: 8px;
            padding-top: 6px;
        }

    .btn-edit {
        background: #1F6FEB;
        color: #ffffff;
        border: 0;
        padding: 7px 12px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
    }

    .btn-ghost {
        background: transparent;
        border: 1px solid #e6e9ee;
        color: #333;
        padding: 4px 6px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.8rem;
    }

    /* Highlighted rectangular panel with yellow border and subtle shadow */
    .section-panel {
        border: 3px solid #FFD600;
        border-radius: 10px;
        box-shadow: 0 12px 30px rgba(13,38,76,0.06), 0 4px 18px rgba(255,214,0,0.08);
        padding: 14px;
        background: linear-gradient(180deg, #fff, #fff);
    }

    .step-badge {
        width: 36px;
        height: 36px;
        min-width: 36px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: #FFD600;
        color: #111;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        margin-right: 8px;
        flex-shrink: 0;
    }

    .small-note {
        font-size: 0.9rem;
        color: #6c757d;
        margin-top: 4px;
    }

    .badge {
        display: inline-block;
        padding: 6px 8px;
        border-radius: 999px;
        font-size: 0.85rem;
        background: #f1f3f5;
        color: #222;
        margin-right: 6px;
        text-decoration: none;
    }

        .badge:hover {
            background: #e9ecef;
            text-decoration: none;
        }

    .summary-money {
        font-size: 1.5rem;
        font-weight: 800;
        line-height: 1.05;
        font-variant-numeric: tabular-nums;
    }

    .grid-panel {
        margin-top: 12px;
    }

    .grid-header {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 8px;
    }

    .grid {
        width: 100%;
        border-radius: 8px;
        overflow: auto;
        background: #fff;
        border: 1px solid #e9ecef;
        box-shadow: 0 8px 24px rgba(12,18,30,0.04);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.98rem;
        min-width: 900px;
    }

    thead th {
        position: sticky;
        top: 0;
        background: #fff;
        padding: 10px 12px;
        border-bottom: 1px solid #eef2f6;
        text-align: left;
        font-weight: 700;
        color: #333;
    }

    tbody td {
        padding: 8px 12px;
        border-bottom: 1px solid #f2f4f7;
        vertical-align: middle;
    }

    .money-cell {
        text-align: right;
        font-variant-numeric: tabular-nums;
    }

    .legend {
        margin-left: auto;
        display: flex;
        gap: 8px;
        align-items: center;
        font-size: 0.95rem;
        color: #6c757d;
    }

        .legend .swatch {
            width: 14px;
            height: 14px;
            border-radius: 4px;
            display: inline-block;
        }

    /* Add missing empty-state styles */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
    }

    .start-planning-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.4);
        backdrop-filter: blur(1px);
        z-index: 10;
    }

        .start-planning-overlay .empty-state {
            background: rgba(255, 255, 255, 0.95);
            border: 2px solid var(--brand-yellow);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            margin: 20px;
        }

    @@media (max-width:1024px) {
        .top-area .row {
            gap: 12px;
        }
    }

</style>

<PageTitle>Savings & Wealth Building</PageTitle>


<SavingsInputWizard Model="@calculatorModel"
                    Visible="@showWizard"
                    VisibleChanged="@(v => showWizard = v)"
                    OnFinished="HandleWizardFinished"
                    OnSave="SaveAsync"
                    InitialStep="@wizardOpenStep" />

<SetupSavingsSampleData Visible="@showSampleDataModal"
                        OnClose="@(() => showSampleDataModal = false)"
                        OnSampleDataSelected="HandleSampleDataSelected" />

<div class="container-wire">
    <div class="page-header">
        <h3>Savings & Wealth Building</h3>
    </div>

    <div class="top-area">
        <div class="container-fluid">
            <div class="row g-3">
                <div class="col-12 col-md-2">
                    <div class="panel" style="z-index: 1002;">
                        <div style="font-weight:700; margin-bottom:8px;">Quick Links</div>
                        <div style="display:flex; flex-direction:column; gap:6px;">
                            <a href="/" class="badge">Home</a>
                            <a href="/contact" class="badge">Contact</a>
                        </div>
                    </div>
                </div>

                <div class="col-12 col-md-8">
                    <!-- Tab Navigation -->
                    <ul class="nav nav-tabs">
                        <li class="nav-item d-flex align-items-center me-1 @(activeTab == "your" ? "tab-item-active" : "")" role="presentation">
                            <button class="nav-link @(activeTab == "your" ? "tab-active-custom" : "")" role="tab" aria-selected="@(activeTab == "your" ? "true" : "false")" tabindex="0" @onclick="YourTabClick">
                                Your  Savings
                            </button>
                        </li>
                        <li class="nav-item d-flex align-items-center me-1 @(activeTab == "partner" ? "tab-item-active" : "")" role="presentation">
                            <button class="nav-link @(activeTab == "partner" ? "tab-active-custom" : "")" role="tab" aria-selected="@(activeTab == "partner" ? "true" : "false")" tabindex="0" @onclick="PartnerTabClick">
                                Partner  Savings
                            </button>
                        </li>
                    </ul>
                    <!-- Yellow border section panel that touches the tabs -->
                    <div class="section-panel" style="margin-top: -1px; border-top-left-radius: 0; border-top-right-radius: 0;">
                        <!-- Centered heading with Edit Plan button -->
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; position: relative;">
                            <div style="flex: 1;"></div>
                            <h5 style="position: absolute; left: 50%; transform: translateX(-50%); margin: 0; text-align: center;">Plan Input Data</h5>
                            <div style="display: flex; gap: 8px; flex: 1; justify-content: flex-end;">
                                <button class="btn btn-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                                    <i class="bi bi-gear" style="margin-right: 6px;"></i>
                                    Edit Plan
                                </button>
                            </div>
                        </div>

                        <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap:12px;">
                        <div class="section-card @(IsMilestonesSectionComplete() ? "" : "incomplete-section")">
                            <div>
                                <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                    <div style="display:flex; align-items:center; gap:8px;">
                                        <span class="step-badge">1</span>
                                        <div>Milestones & ages</div>
                                    </div>
                                    @if (!IsMilestonesSectionComplete())
                                    {
                                        <span style="font-size:0.75rem; color:#dc3545;">
                                            <i class="bi bi-exclamation-circle"></i> Incomplete
                                        </span>
                                    }
                                </div>

                                <div class="small-note" style="margin-top:8px; display: flex; align-items: center; justify-content: space-between;">
                                    <div>
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipCurrentAge = !showToolTipCurrentAge" tabindex="0" title="Click for more info"></span>
                                        Current Age: @calculatorModel.CurrentAge
                                        @if (showToolTipCurrentAge)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Your Current Age:</strong> Your age today. This is the starting point for calculating how many years you have to save before retirement.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipCurrentAge = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    @if (calculatorModel.CurrentAge <= 0)
                                    {
                                        <span class="missing-badge">
                                            <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                        </span>
                                    }
                                </div>

                                <div class="small-note" style="margin-top:8px; display: flex; align-items: center; justify-content: space-between;">
                                    <div>
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRetirementAge = !showToolTipRetirementAge" tabindex="0" title="Click for more info"></span>
                                        Planned Retirement Age: @calculatorModel.RetirementAge
                                        @if (showToolTipRetirementAge)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Planned Retirement Age:</strong> The age at which you plan to stop working and begin your retirement. Most people retire between ages 62-70, with full Social Security benefits available at 66-67 depending on birth year.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRetirementAge = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    @if (calculatorModel.RetirementAge <= 0)
                                    {
                                        <span class="missing-badge">
                                            <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                        </span>
                                    }
                                </div>

                                <div class="small-note" style="margin-top:8px; display: flex; align-items: center; justify-content: space-between;">
                                    <div>
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYearsUntilRetirement = !showToolTipYearsUntilRetirement" tabindex="0" title="Click for more info"></span>
                                        Years until Retirement: @calculatorModel.Years
                                        @if (showToolTipYearsUntilRetirement)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Years Until Retirement:</strong> Automatically calculated as the difference between your planned retirement age and current age. This determines how many years you have to save and how long your investments can grow before retirement.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYearsUntilRetirement = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    @if (calculatorModel.Years <= 0)
                                    {
                                        <span class="missing-badge">
                                            <i class="bi bi-exclamation-triangle-fill me-1"></i>Calculated
                                        </span>
                                    }
                                </div>
                            </div>
                            <div class="actions">
                                <button class="btn-edit" @onclick="() => OpenWizard(1)">Edit</button>
                            </div>
                        </div>

                        <div class="section-card @(!IsStartingBalancesSectionComplete() ? "incomplete-section" : "")">
                            <div>
                                <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                    <div style="display:flex; align-items:center; gap:8px;">
                                        <span class="step-badge">2</span>
                                        <div>Starting Balances</div>
                                    </div>
                                    @if (!IsStartingBalancesSectionComplete())
                                    {
                                        <span style="font-size:0.75rem; color:#dc3545;">
                                            <i class="bi bi-exclamation-circle"></i> At least one required
                                        </span>
                                    }
                                </div>

                                @if (!IsStartingBalancesSectionComplete())
                                {
                                    <div class="alert alert-light mt-2 mb-2 py-2" style="font-size: 0.85rem; border-left: 3px solid #dc3545;">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Enter the current balance for at least one account type you have.
                                    </div>
                                }

                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableBalance = !showToolTipTaxableBalance" tabindex="0" title="Click for more info"></span>
                                    Taxable: @FormatMoneySafe(calculatorModel.InitialTaxableAmount)
                                    @if (showToolTipTaxableBalance)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Taxable Accounts:</strong> Regular investment accounts that don't have special tax advantages. These include brokerage accounts, savings accounts, CDs, and other non-retirement investments. Earnings from these accounts are typically taxed annually.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableBalance = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalBalance = !showToolTipTraditionalBalance" tabindex="0" title="Click for more info"></span>
                                    Traditional: @FormatMoneySafe(calculatorModel.InitialTraditionalAmount)
                                    @if (showToolTipTraditionalBalance)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Traditional Accounts:</strong> Tax-deferred retirement accounts like 401(k)s, 403(b)s, and Traditional IRAs. Contributions often reduce your current taxable income, but withdrawals in retirement are taxed as ordinary income.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalBalance = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothBalance = !showToolTipRothBalance" tabindex="0" title="Click for more info"></span>
                                    Roth: @FormatMoneySafe(calculatorModel.InitialRothAmount)
                                    @if (showToolTipRothBalance)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Roth Accounts:</strong> After-tax retirement accounts like Roth IRAs and Roth 401(k)s. Contributions are made with already-taxed dollars, but qualified withdrawals in retirement are completely tax-free, including all growth.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothBalance = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="actions">
                                <button class="btn-edit" @onclick="() => OpenWizard(2)">Edit</button>
                            </div>
                        </div>

                        <div class="section-card @(!IsMonthlyContributionsSectionComplete() ? "incomplete-section" : "")">
                            <div>
                                <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                    <div style="display:flex; align-items:center; gap:8px;">
                                        <span class="step-badge">3</span>
                                        <div>Monthly Contributions</div>
                                    </div>
                                    @if (!IsMonthlyContributionsSectionComplete())
                                    {
                                        <span style="font-size:0.75rem; color:#dc3545;">
                                            <i class="bi bi-exclamation-circle"></i> At least one required
                                        </span>
                                    }
                                </div>

                                @if (!IsMonthlyContributionsSectionComplete())
                                {
                                    <div class="alert alert-light mt-2 mb-2 py-2" style="font-size: 0.85rem; border-left: 3px solid #dc3545;">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Enter at least one monthly contribution amount to grow your savings.
                                    </div>
                                }

                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableContribution = !showToolTipTaxableContribution" tabindex="0" title="Click for more info"></span>
                                    Taxable: @calculatorModel.MonthlyTaxableContribution.ToString("C0")
                                    @if (showToolTipTaxableContribution)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Monthly Taxable Contribution:</strong> How much you plan to add each month to your regular, non-retirement investment accounts. These contributions are made with after-tax dollars and offer more flexibility for early withdrawals without penalties.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableContribution = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalContribution = !showToolTipTraditionalContribution" tabindex="0" title="Click for more info"></span>
                                    Traditional: @calculatorModel.MonthlyTraditionalContribution.ToString("C0")
                                    @if (showToolTipTraditionalContribution)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Monthly Traditional Contribution:</strong> Your monthly contributions to tax-deferred retirement accounts. For 2023, the annual contribution limit for 401(k)s is $22,500 ($1,875/month) plus catch-up contributions of $7,500 for those 50+.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalContribution = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothContribution = !showToolTipRothContribution" tabindex="0" title="Click for more info"></span>
                                    Roth: @calculatorModel.MonthlyRothContribution.ToString("C0")
                                    @if (showToolTipRothContribution)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Monthly Roth Contribution:</strong> Your monthly contributions to Roth accounts. For 2023, Roth IRA contributions share the same limit as Traditional IRAs: $6,500 ($541/month) plus $1,000 catch-up for those 50+. Income limits apply for eligibility.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothContribution = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="actions">
                                <button class="btn-edit" @onclick="() => OpenWizard(3)">Edit</button>
                            </div>
                        </div>
                        <div class="section-card">
                            <div>
                                <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                    <span class="step-badge">4</span>
                                    <div>Estimated Growth Rate</div>
                                </div>
                                <div class="small-note">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableGrowth = !showToolTipTaxableGrowth" tabindex="0" title="Click for more info"></span>
                                    Taxable: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateTaxable)
                                    @if (showToolTipTaxableGrowth)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Taxable Growth Rate:</strong> Expected annual return for your taxable investments. This might be lower than retirement accounts due to tax drag (paying taxes on dividends and capital gains). Historical average for a diversified portfolio is around 6-7% before taxes.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableGrowth = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                                <div class="small-note">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalGrowth = !showToolTipTraditionalGrowth" tabindex="0" title="Click for more info"></span>
                                    Traditional: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateTraditional)
                                    @if (showToolTipTraditionalGrowth)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Traditional Account Growth Rate:</strong> Expected annual return for your tax-deferred retirement accounts. Because these accounts aren't taxed during growth years, returns can compound more efficiently. Historical average for a balanced portfolio is around 7-8%.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalGrowth = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                                <div class="small-note">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothGrowth = !showToolTipRothGrowth" tabindex="0" title="Click for more info"></span>
                                    Roth: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateRoth)
                                    @if (showToolTipRothGrowth)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Roth Account Growth Rate:</strong> Expected annual return for your Roth retirement accounts. Like traditional accounts, Roth investments grow tax-free, allowing for efficient compounding. The historical average is similar to traditional accounts at around 7-8%.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothGrowth = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="actions">
                                <button class="btn-edit" @onclick="() => OpenWizard(4)">Edit</button>
                            </div>
                        </div>

                        <div class="section-card">
                            <div>
                                <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                    <span class="step-badge">5</span>
                                    <div>Tax Treatment</div>
                                </div>
                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipIncomeType = !showToolTipIncomeType" tabindex="0" title="Click for more info"></span>
                                    Taxable IncomeType: @calculatorModel.TaxableIncomeType
                                    @if (showToolTipIncomeType)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Taxable Income Type:</strong> The primary type of income your taxable investments generate. Different income types are taxed differently: dividends and long-term capital gains often receive preferential tax rates, while interest is typically taxed as ordinary income.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipIncomeType = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                                <div class="small-note" style="margin-top:8px;">
                                    <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxBracket = !showToolTipTaxBracket" tabindex="0" title="Click for more info"></span>
                                    Tax Bracket: @calculatorModel.TaxBracket
                                    @if (showToolTipTaxBracket)
                                    {
                                        <div class="info-tooltip">
                                            <strong>Tax Bracket:</strong> Your estimated income tax bracket. This affects the tax efficiency of different account types. For 2023, federal brackets range from 10% to 37%. Low = 10-12%, Medium = 22-24%, High = 32-37%.
                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxBracket = false" title="Close">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="actions">
                                <button class="btn-edit" @onclick="() => OpenWizard(5)">Edit</button>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>

                <!-- Right column-->
                <div class="col-12 col-md-2">
                    <div class="panel" style="z-index: 1002;">
                        <div style="font-weight:700; margin-bottom:8px;">Quick Links</div>
                        <div style="display:flex; flex-direction:column; gap:6px;">
                            <a href="/" class="badge">Home</a>
                            <a href="/contact" class="badge">Contact</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="grid-panel panel mt-3">
        <div class="grid-header">
            <div style="font-weight:800; font-size:1rem;">Yearly Projection</div>
        </div>

        @if (calculatorModel.IsModelEmpty())
        {
            <div style="text-align: center; padding: 60px 20px; color: #6c757d;">
                <div style="font-size: 2.5rem; margin-bottom: 16px;">📊</div>
                <h5 style="color: #495057; margin-bottom: 12px;">No Projection Available</h5>
                <p style="margin-bottom: 20px;">Complete your savings plan setup to see projections.</p>
                <button class="btn btn-primary" @onclick="() => OpenWizard(1)">Get Started</button>
            </div>
        }
        else if (HasProjection)
        {

            <div class="grid">
                <table class="table table-sm table-bordered" aria-label="Yearly projection">
                    <thead class="table-light">
                        <!-- First Row: Categories -->
                        <tr>
                            <th rowspan="2" style="text-align:left; width:80px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderYear = !showToolTipTableHeaderYear" tabindex="0" title="Click for more info"></span>
                                Year
                                @if (showToolTipTableHeaderYear)
                                {
                                    <div class="info-tooltip">
                                        <strong>Year:</strong> The year for which the projection is calculated.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderYear = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th rowspan="2" style="text-align:left; width:60px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderAge = !showToolTipTableHeaderAge" tabindex="0" title="Click for more info"></span>
                                Age
                                @if (showToolTipTableHeaderAge)
                                {
                                    <div class="info-tooltip">
                                        <strong>Age:</strong> The age of the individual during the specified year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderAge = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="5" class="col-taxable" style="text-align:center; background-color: rgba(31,111,235,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableCategory = !showToolTipTableHeaderTaxableCategory" tabindex="0" title="Click for more info"></span>
                                Taxable
                                @if (showToolTipTableHeaderTaxableCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Taxable:</strong> Accounts subject to annual taxes on earnings, such as brokerage accounts.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="4" class="col-traditional" style="text-align:center; background-color: rgba(56,178,172,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTraditionalCategory = !showToolTipTableHeaderTraditionalCategory" tabindex="0" title="Click for more info"></span>
                                Traditional
                                @if (showToolTipTableHeaderTraditionalCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Traditional:</strong> Tax-deferred retirement accounts like 401(k)s and Traditional IRAs.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTraditionalCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="4" class="col-roth" style="text-align:center; background-color: rgba(109,93,252,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderRothCategory = !showToolTipTableHeaderRothCategory" tabindex="0" title="Click for more info"></span>
                                Roth
                                @if (showToolTipTableHeaderRothCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Roth:</strong> After-tax retirement accounts like Roth IRAs and Roth 401(k)s.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderRothCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="3" class="col-totals" style="text-align:center; background-color: rgba(255,214,0,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTotalsCategory = !showToolTipTableHeaderTotalsCategory" tabindex="0" title="Click for more info"></span>
                                Totals
                                @if (showToolTipTableHeaderTotalsCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Totals:</strong> Aggregated values across all account types.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTotalsCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                        </tr>
                        <!-- Second Row: Specific Headers -->
                        <tr>
                            <!-- Taxable Columns -->
                            <th style="width:100px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableYearBegin = !showToolTipTableHeaderTaxableYearBegin" tabindex="0" title="Click for more info"></span>
                                Year Begin
                                @if (showToolTipTableHeaderTaxableYearBegin)
                                {
                                    <div class="info-tooltip">
                                        <strong>Year Begin:</strong> The starting balance for the taxable account at the beginning of the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableYearBegin = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th style="width:100px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableContribution = !showToolTipTableHeaderTaxableContribution" tabindex="0" title="Click for more info"></span>
                                Contribution
                                @if (showToolTipTableHeaderTaxableContribution)
                                {
                                    <div class="info-tooltip">
                                        <strong>Contribution:</strong> The amount contributed to the taxable account during the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableContribution = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th style="width:100px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableGrowth = !showToolTipTableHeaderTaxableGrowth" tabindex="0" title="Click for more info"></span>
                                Growth
                                @if (showToolTipTableHeaderTaxableGrowth)
                                {
                                    <div class="info-tooltip">
                                        <strong>Growth:</strong> The growth in the taxable account due to investments.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableGrowth = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th style="width:100px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableTaxPaid = !showToolTipTableHeaderTaxableTaxPaid" tabindex="0" title="Click for more info"></span>
                                Tax Paid
                                @if (showToolTipTableHeaderTaxableTaxPaid)
                                {
                                    <div class="info-tooltip">
                                        <strong>Tax Paid:</strong> The taxes paid on the taxable account during the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableTaxPaid = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th style="width:100px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableYearEnd = !showToolTipTableHeaderTaxableYearEnd" tabindex="0" title="Click for more info"></span>
                                Year End
                                @if (showToolTipTableHeaderTaxableYearEnd)
                                {
                                    <div class="info-tooltip">
                                        <strong>Year End:</strong> The ending balance for the taxable account at the end of the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableYearEnd = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <!-- Traditional Columns -->
                            <th style="width:100px;">Year Begin</th>
                            <th style="width:100px;">Contribution</th>
                            <th style="width:100px;">Growth</th>
                            <th style="width:100px;">Year End</th>
                            <!-- Roth Columns -->
                            <th style="width:100px;">Year Begin</th>
                            <th style="width:100px;">Contribution</th>
                            <th style="width:100px;">Growth</th>
                            <th style="width:100px;">Year End</th>
                            <!-- Totals Columns -->
                            <th style="width:100px;">Contributions</th>
                            <th style="width:100px;">Growth</th>
                            <th style="width:100px;">Year End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (yearlyBreakdown == null || !yearlyBreakdown.Any())
                        {
                            <tr><td colspan="15" class="text-center text-muted">No projection rows available. Run Calculate to generate projections.</td></tr>
                        }
                        else
                        {
                            foreach (var r in yearlyBreakdown)
                            {

                                var age = calculatorModel.CurrentAge + r.Year; // approximate

                                <tr>
                                    <td>@r.Year</td>
                                    <td>@age</td>

                                    <!-- Taxable columns -->
                                    <!-- Taxable columns with inline styles -->
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color: rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableBOYBalance)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableContribution)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableInterest)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="color:#F56565; font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxesPaid)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableEOYBalance)
                                    </td>

                                    <!-- Traditional columns with inline styles -->
                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalBOYBalance)
                                    </td>
                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalContribution)
                                    </td>

                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalInterest)
                                    </td>
                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalEOYBalance)
                                    </td>

                                    <!-- Roth columns with inline styles -->
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothBOYBalance)
                                    </td>
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothContribution)
                                    </td>
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothInterest)
                                    </td>
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothEOYBalance)
                                    </td>

                                    <!-- Totals columns with inline styles -->
                                    <td class="text-end col-totals"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TotalContributions)
                                    </td>
                                    <td class="text-end col-totals"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TotalGrowth)
                                    </td>
                                    <td class="text-end col-totals"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TotalEOYBalance)
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>

    <div class="mt-3 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #856404; margin-top: 2px;">
                <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">Important Disclaimers</div>
                <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                    <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational purposes only. Results are projections based on your inputs and assumptions.</p>
                    <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial advisors who can provide personalized advice for your complete financial situation.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool showWizard = false;
    private int wizardOpenStep = 1;
    private bool showSampleDataModal = false;
    private bool showRightDebug = false;

    public SavingsCalculatorModel calculatorModel { get; set; } = new();
    private SavingsResults? results;
    private List<YearlyBreakdown> yearlyBreakdown = new();
    private string userGuid = string.Empty;
    private const string calculatorTypeYours = "savings_yours";
    private const string calculatorTypePartners = "savings_partners";
    private string calculatorType = calculatorTypeYours;
    private bool showIntroModal = true; // Show by default unless user has opted out
    private bool dontShowIntroAgain = false;

    // Tooltip visibility flags
    private bool showToolTipCurrentAge = false;
    private bool showToolTipRetirementAge = false;
    private bool showToolTipYearsUntilRetirement = false;

    private bool showToolTipTaxableBalance = false;
    private bool showToolTipTraditionalBalance = false;
    private bool showToolTipRothBalance = false;

    private bool showToolTipTaxableContribution = false;
    private bool showToolTipTraditionalContribution = false;
    private bool showToolTipRothContribution = false;

    private bool showToolTipTaxableGrowth = false;
    private bool showToolTipTraditionalGrowth = false;
    private bool showToolTipRothGrowth = false;

    private bool showToolTipIncomeType = false;
    private bool showToolTipTaxBracket = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
                await LoadAsync();
                Calculate();
                await HandleIntroModal();

                StateHasChanged();
            }
            catch (Exception ex)
            {
                DebugService.AddMessage($"Init error: {ex.Message}");
            }
        }
    }

    private async Task HandleIntroModal()
    {
        showIntroModal = false;

        if (calculatorModel == null || calculatorModel.IsModelEmpty())
        {
            // Check localStorage for intro modal preference
            string key = calculatorType == calculatorTypeYours
                ? "finplan-your-savings-wealth-building-hide-intro"
                : "finplan-partner-savings-wealth-building-hide-intro";
            var hideIntro = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
            if (!string.IsNullOrEmpty(hideIntro) && hideIntro.Equals("true", StringComparison.OrdinalIgnoreCase))
            {
                showIntroModal = false;
            }
            else
            {
                showIntroModal = true;
            }
        }
    }

    private async Task OnDontShowIntroChanged(ChangeEventArgs e)
    {
        bool checkedState = e?.Value is bool b && b;
        string key = calculatorType == calculatorTypeYours
            ? "finplan-your-savings-wealth-building-hide-intro"
            : "finplan-partner-savings-wealth-building-hide-intro";

        if (checkedState)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, "true");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
    }

    // Add these new methods
    private void CloseIntroModal()
    {
        showIntroModal = false;
        StateHasChanged();
    }

    private void Calculate()
    {
        try
        {
            var calculator = new SavingsCalculationEngine();
            results = calculator.Calculate(calculatorModel);
            yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Calc error: {ex.Message}");
        }
    }

    private async Task LoadAsync()
    {
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calculatorType}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (loadedModel != null)
                {
                    calculatorModel = loadedModel;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                //Does not exist, create an empty one
                calculatorModel = new SavingsCalculatorModel();
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Load error: {ex.Message}");
        }
    }

    private bool HasProjection => yearlyBreakdown?.Any() == true;


    private async Task SaveAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(userGuid))
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            }

            calculatorModel.LastUpdateDate = DateTime.UtcNow;
            var saveRequest = new PersistSavingsRequest
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = calculatorModel
            };
            var json = System.Text.Json.JsonSerializer.Serialize(saveRequest);
            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync($"{GetApiBaseUrl()}/api/FinPlan/save", content);
            if (!response.IsSuccessStatusCode)
            {
                DebugService.AddMessage($"Save failed: {response.StatusCode}");
            }

            // Always recalc so the grid becomes visible immediately after changes
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Save error: {ex.Message}");
        }
    }

    private async Task HandleWizardFinished((int AgeYou, int AgePartner) ages)
    {
        try
        {
            if (ages.AgeYou > 0) calculatorModel.RetirementAge = ages.AgeYou;
            await SaveAsync();
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Wizard finish error: {ex.Message}");
        }
    }

    private async Task HandleSampleDataSelected(SavingsCalculatorModel sampleModel)
    {
        calculatorModel = sampleModel;
        await SaveAsync();
        Calculate();
        StateHasChanged();
    }

    private void OpenWizard(int step)
    {
        wizardOpenStep = step;
        showWizard = true;
    }

    private void ToggleRightDebug()
    {
        showRightDebug = !showRightDebug;
        StateHasChanged();
    }

    private string FormatMoneySafe(decimal? v) => v.HasValue ? v.Value.ToString("C0") : "-";


    private string FormatMoney(decimal? value) => value?.ToString("C0") ?? "-";


    string activeTab = "your";

    private async Task YourTabClick()
    {
        calculatorType = calculatorTypeYours;
        SetActiveTab("your");
        await LoadAsync();
        Calculate();
        await HandleIntroModal();
        StateHasChanged();
    }

    private async Task PartnerTabClick()
    {
        calculatorType = calculatorTypePartners;
        SetActiveTab("partner");
        await LoadAsync();
        Calculate();
        await HandleIntroModal();
        StateHasChanged();
    }
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }
    private bool IsMonthlyContributionsSectionComplete()
    {
        return calculatorModel.MonthlyTaxableContribution > 0 ||
               calculatorModel.MonthlyTraditionalContribution > 0 ||
               calculatorModel.MonthlyRothContribution > 0;
    }
    private bool IsMilestonesSectionComplete()
    {
        return calculatorModel.CurrentAge > 0 && calculatorModel.RetirementAge > 0;
    }
    private bool IsStartingBalancesSectionComplete()
    {
        return calculatorModel.InitialTaxableAmount > 0 ||
               calculatorModel.InitialTraditionalAmount > 0 ||
               calculatorModel.InitialRothAmount > 0;
    }


    private bool showToolTipTableHeaderTaxableYearBegin = false;
    private bool showToolTipTableHeaderTaxableContribution = false;
    private bool showToolTipTableHeaderTaxableGrowth = false;
    private bool showToolTipTableHeaderTaxableTaxPaid = false;
    private bool showToolTipTableHeaderTaxableYearEnd = false;

    private bool showToolTipTableHeaderTraditionalYearBegin = false;
    private bool showToolTipTableHeaderTraditionalContribution = false;
    private bool showToolTipTableHeaderTraditionalGrowth = false;
    private bool showToolTipTableHeaderTraditionalYearEnd = false;

    private bool showToolTipTableHeaderRothYearBegin = false;
    private bool showToolTipTableHeaderRothContribution = false;
    private bool showToolTipTableHeaderRothGrowth = false;
    private bool showToolTipTableHeaderRothYearEnd = false;

    private bool showToolTipTableHeaderTotalContributions = false;
    private bool showToolTipTableHeaderTotalGrowth = false;
    private bool showToolTipTableHeaderTotalYearEnd = false;

private bool showToolTipTableHeaderTaxableCategory = false;
private bool showToolTipTableHeaderTraditionalCategory = false;
private bool showToolTipTableHeaderRothCategory = false;

    private bool showToolTipTableHeaderYear = false;
    private bool showToolTipTableHeaderAge = false;
    private bool showToolTipTableHeaderTotalsCategory = false;

    private string GetApiBaseUrl()
    {
#if DEBUG
        return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "https://api.finplan.example";
#endif
    }
}