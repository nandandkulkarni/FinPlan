@page "/savings-wealth-building"
@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Services
@using FinPlan.Web.Components.Shared
@using FinPlan.Web.Services
@namespace FinPlan.Web.Components.Pages

@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject DebugMessageService DebugService
@inject UserGuidService UserGuidService
@inject NavigationManager Navigation


<style>
    body {
    }

    /* Add missing CSS variable */
    :root {
        --brand-yellow: #FFD600;
    }

    .summary-cards-row {
        display: flex;
        gap: 12px;
        margin-bottom: 12px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .savings-card {
        background: #fff;
        color: #222;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(31,111,235,0.08);
        min-width: 132px;
        max-width: 132px;
        min-height: 132px;
        max-height: 132px;
        width: 132px;
        height: 132px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 12px 10px;
        font-size: 1rem;
    }

    .savings-card-yellow {
        background: #FFD600;
        color: #222;
    }

    .savings-card-teal {
        background: #38B2AC;
        color: #fff;
    }

    .savings-card-purple {
        background: #6D5DFC;
        color: #fff;
    }

    .savings-card-red {
        background: #F56565;
        color: #fff;
    }

    .savings-card .bi {
        font-size: 1.4rem;
        margin-bottom: 4px;
        color: inherit;
    }

    .savings-card .card-label {
        font-weight: 600;
        font-size: 0.95rem;
        margin-bottom: 2px;
        color: inherit;
        text-align: center;
    }

    .savings-card .card-value {
        font-size: 1.05rem;
        font-weight: 700;
        color: inherit;
        text-align: center;
        margin-top: 2px;
    }

    .survey-card {
        border-right: 8px solid #1F6FEB !important;
        border-top: 1px solid #e9ecef;
        border-bottom: 1px solid #e9ecef;
        border-left: 1px solid #e9ecef;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(31,111,235,0.08);
        background: #fff;
    }

    .survey-card-narrow {
        width: 75%;
        min-width: 180px;
        max-width: 320px;
        margin-left: 0;
        margin-right: auto;
        align-self: flex-start;
    }

    /* CSS Variables - convert to actual values for better compatibility */
    .container-wire {
        padding: 14px;
    }

    /* Header info icon helpers (Option A + B) */
    .th-info {
        position: relative;
        padding-right: 18px;
    }
    /* reserve right edge */
    .th-info-icon {
        position: absolute;
        top: 6px;
        right: 6px;
        font-size: .9rem;
        cursor: pointer;
        opacity: .65;
        transition: opacity .15s ease-in-out;
    }
    /* Show icon only on header hover */
    .th-info .th-info-icon {
        opacity: 0;
    }

    thead th:hover .th-info .th-info-icon {
        opacity: .9;
    }
    /* Optional: hide on phones to keep headers tight */
    @@media (max-width: 768px) {
        .th-info-icon {
            display: none;
        }
    }

    .missing-badge {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 0.7rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
    }

    .incomplete-section {
        border: 1px solid rgba(220, 53, 69, 0.3);
        box-shadow: 0 2px 8px rgba(220, 53, 69, 0.1);
    }

    tab-panel-box {
        border: 2px solid #C79A00; /* dark yellow border */
        border-radius: 8px;
        padding: var(--tab-panel-padding-top) 18px 20px 18px;
        margin-top: 0;
        top: var(--tab-panel-top-offset);
        position: relative;
        background: #ffffff;
        box-shadow: 0 4px 12px rgba(0,0,0,0.04);
        z-index: 10;
        overflow: visible;
    }

    .tab-active-custom {
        background-color: #FFD600 !important;
        color: #222 !important;
        font-weight: 600;
        border: 1px solid #FFD600 !important;
        border-bottom: none !important;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s, color 0.2s;
    }

    .tab-item-active {
        background: #FFD600;
        border-radius: 8px 8px 0 0;
        padding: 4px 6px;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

    .col-taxable, th.col-taxable {
        background-color: rgba(31,111,235,0.06);
    }

    th.col-taxable {
        color: #1F6FEB;
        font-weight: 700;
    }

    .col-traditional, th.col-traditional {
        background-color: rgba(56,178,172,0.06);
    }

    .col-roth, th.col-roth {
        background-color: rgba(109,93,252,0.06);
    }

    th.col-roth {
        color: #6D5DFC;
        font-weight: 700;
    }

    .col-totals, th.col-totals {
        background-color: rgba(255,214,0,0.06);
    }

    th.col-totals {
        color: #FFD600;
        font-weight: 700;
    }

    th.col-traditional {
        color: #38B2AC;
        font-weight: 700;
    }

    /* small touch to keep numeric alignment and readability */
    .table td.col-taxable,
    .table td.col-traditional,
    .table td.col-roth,
    .table td.col-totals {
        font-variant-numeric: tabular-nums;
    }

    .page-header {
        text-align: center;
        font-weight: 700;
        font-size: 1.45rem;
        margin-bottom: 12px;
        color: #111;
    }

    .top-area {
        position: relative;
    }

    .panel {
        background: #ffffff;
        border-radius: 10px;
        box-shadow: 0 6px 18px rgba(22,28,36,0.06);
        padding: 12px;
        border: 1px solid rgba(0,0,0,0.03);
        display: flex;
        flex-direction: column;
        flex: 1 1 0%;
    }

    /* Section card variant used inside the Plan Sections grid */
    .section-card {
        border: 1px solid rgba(16,24,36,0.12);
        padding: 10px;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        min-height: 92px;
        background: #fff;
    }

        .section-card .actions {
            margin-top: auto;
            display: flex;
            justify-content: flex-start;
            gap: 8px;
            padding-top: 16px; /* Increased from 6px to 16px for more space */
        }

    /* .section-card .actions {
                            margin-top: auto;
                            display: flex;
                            justify-content: flex-start;
                            gap: 8px;
                            padding-top: 6px;
                        } */

    .btn-edit {
        background: #1F6FEB;
        color: #ffffff;
        border: 0;
        padding: 7px 12px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
    }

    .btn-ghost {
        background: transparent;
        border: 1px solid #e6e9ee;
        color: #333;
        padding: 4px 6px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.8rem;
    }

    /* Highlighted rectangular panel with yellow border and subtle shadow */
    .section-panel {
        border: 3px solid #FFD600;
        border-radius: 10px;
        box-shadow: 0 12px 30px rgba(13,38,76,0.06), 0 4px 18px rgba(255,214,0,0.08);
        padding: 14px;
        background: linear-gradient(180deg, #fff, #fff);
    }

    .step-badge {
        width: 36px;
        height: 36px;
        min-width: 36px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: var(--brand-yellow);
        color: #111;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        margin-right: 8px;
        margin-bottom: 12px; /* Added margin-bottom for spacing */
        flex-shrink: 0;
    }

    /* .step-badge {
                        width: 36px;
                        height: 36px;
                        min-width: 36px;
                        border-radius: 50%;
                        display: inline-flex;
                        align-items: center;
                        justify-content: center;
                        background: #FFD600;
                        color: #111;
                        font-weight: 800;
                        font-size: 1rem;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.12);
                        margin-right: 8px;
                        flex-shrink: 0;
                    } */

    .small-note {
        font-size: 0.9rem;
        color: #6c757d;
        margin-top: 4px;
    }

    .badge {
        display: inline-block;
        padding: 6px 8px;
        border-radius: 999px;
        font-size: 0.85rem;
        background: #f1f3f5;
        color: #222;
        margin-right: 6px;
        text-decoration: none;
    }

        .badge:hover {
            background: #e9ecef;
            text-decoration: none;
        }

    .summary-money {
        font-size: 1.5rem;
        font-weight: 800;
        line-height: 1.05;
        font-variant-numeric: tabular-nums;
    }

    .grid-panel {
        margin-top: 12px;
    }

    .grid-header {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 8px;
    }

    .grid {
        width: 100%;
        border-radius: 8px;
        overflow: auto;
        background: #fff;
        border: 1px solid #e9ecef;
        box-shadow: 0 8px 24px rgba(12,18,30,0.04);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.98rem;
        min-width: 900px;
    }

    thead th {
        position: sticky;
        top: 0;
        background: #fff;
        padding: 10px 12px;
        border-bottom: 1px solid #eef2f6;
        text-align: left;
        font-weight: 700;
        color: #333;
    }

    tbody td {
        padding: 8px 12px;
        border-bottom: 1px solid #f2f4f7;
        vertical-align: middle;
    }

    .money-cell {
        text-align: right;
        font-variant-numeric: tabular-nums;
    }

    .legend {
        margin-left: auto;
        display: flex;
        gap: 8px;
        align-items: center;
        font-size: 0.95rem;
        color: #6c757d;
    }

        .legend .swatch {
            width: 14px;
            height: 14px;
            border-radius: 4px;
            display: inline-block;
        }

    /* Add missing empty-state styles */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
    }

    .start-planning-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.4);
        backdrop-filter: blur(1px);
        z-index: 10;
    }

        .start-planning-overlay .empty-state {
            background: rgba(255, 255, 255, 0.95);
            border: 2px solid var(--brand-yellow);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            margin: 20px;
        }

    @@media (max-width:1024px) {
        .top-area .row {
            gap: 12px;
        }
    }

    /* Tooltip: light blue background and black foreground, rectangle, bigger X */
    .info-tooltip, .first-row-tooltip {
        position: absolute;
        background: #e6f2ff !important; /* Light blue */
        color: #111 !important; /* Black text */
        border: 1px solid #b6d4fe;
        border-radius: 8px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.15), 0 4px 12px rgba(0,0,0,0.08);
        padding: 16px 20px;
        z-index: 9999;
        max-width: 320px;
        min-width: 220px;
        font-size: 0.95rem;
        line-height: 1.5;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        margin-top: 8px;
        animation: tooltipFadeIn 0.2s ease-out;
    }

    @@keyframes tooltipFadeIn {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(-4px);
        }

        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    .info-tooltip strong, .first-row-tooltip strong {
        color: #000 !important;
        font-weight: 600;
        display: block;
        margin-bottom: 8px;
    }

    .info-tooltip .float-end, .first-row-tooltip .close-btn {
        position: absolute;
        top: 12px;
        right: 12px;
        cursor: pointer;
        color: #111 !important;
        font-size: 1.25rem !important; /* Bigger X */
        font-weight: 700;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        transition: all 0.15s ease;
        line-height: 1;
    }

        .info-tooltip .float-end:hover, .first-row-tooltip .close-btn:hover {
            color: #0056b3 !important;
            background-color: #d0e7ff !important;
        }

    .info-tooltip::before, .first-row-tooltip::before {
        content: '';
        position: absolute;
        top: -8px;
        left: 50%;
        transform: translateX(-50%);
        width: 0;
        height: 0;
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        border-bottom: 8px solid #e6f2ff !important;
        filter: drop-shadow(0 -2px 2px rgba(0,0,0,0.05));
    }

    /* Large Mode Toggle Styles - Same as Cost of Living */
    .form-switch .form-check-input {
        transition: all 0.2s ease;
    }

        .form-switch .form-check-input:checked {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }

        .form-switch .form-check-input:focus {
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.2);
        }

    /* Large form switch for prominent toggle */
    .form-switch-lg .form-check-input {
        width: 3rem !important;
        height: 1.5rem !important;
        background-color: #6c757d;
        border: none;
        transition: all 0.3s ease;
    }

        .form-switch-lg .form-check-input:checked {
            background-color: #0d6efd;
            box-shadow: 0 0 8px rgba(13, 110, 253, 0.3);
        }

        .form-switch-lg .form-check-input:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .mode-toggle-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 2px solid #dee2e6;
        transition: all 0.3s ease;
        border-radius: 12px;
        padding: 1rem 1.5rem;
        margin-bottom: 1rem;
    }

    .simple-mode .mode-toggle-header {
        background: linear-gradient(135deg, #d1e7dd 0%, #a3cfbb 100%);
        border-bottom: 2px solid #75b798;
    }

</style>

<PageTitle>Savings & Wealth Building</PageTitle>


<SavingsInputWizard Model="@calculatorModel"
                    Visible="@showWizard"
                    VisibleChanged="@(v => showWizard = v)"
                    OnFinished="HandleWizardFinished"
                    OnSave="SaveAsync"
                    InitialStep="@wizardOpenStep" />

<SetupSavingsSampleData Visible="@showSampleDataModal"
                        OnClose="@(() => showSampleDataModal = false)"
                        OnSampleDataSelected="HandleSampleDataSelected" />

<div class="container-wire">
    <div class="page-header">
        <h3>Savings & Wealth Building</h3>
    </div>


    <div class="top-area">
        <div class="container-fluid">
            <div class="row g-3">
                <div class="col-12 col-md-2">
                    @* <ul class="list-unstyled mb-0">
                        <li><a class="text-decoration-none d-block py-1" href="/"><i class="bi bi-house"></i> Home</a></li>
                    </ul> *@
                    <div class="card survey-card survey-card-narrow mb-2">
                        <div class="card-body text-center">
                            <i class="bi bi-chat-dots" style="font-size:2rem; color:#1F6FEB;"></i>
                            <div class="fw-bold mt-2 mb-1">Share Your Feedback</div>
                            <a href="/survey-savings-wealth-building" class="btn btn-primary btn-sm">
                                Take Living Cost  Survey
                            </a>
                        </div>
                    </div>
                    <!-- Ad container for long Adsterra banner in left column -->

                </div>

                <div class="col-12 col-md-8">
                    <!-- Tab Navigation -->
                    <ul class="nav nav-tabs">
                        <li class="nav-item d-flex align-items-center me-1 @(activeTab == "your" ? "tab-item-active" : "")" role="presentation">
                            <button class="nav-link @(activeTab == "your" ? "tab-active-custom" : "")" role="tab" aria-selected="@(activeTab == "your" ? "true" : "false")" tabindex="0" @onclick="YourTabClick">
                                Your  Savings
                            </button>
                        </li>
                        <li class="nav-item d-flex align-items-center me-1 @(activeTab == "partner" ? "tab-item-active" : "")" role="presentation">
                            <button class="nav-link @(activeTab == "partner" ? "tab-active-custom" : "")" role="tab" aria-selected="@(activeTab == "partner" ? "true" : "false")" tabindex="0" @onclick="PartnerTabClick">
                                Partner  Savings
                            </button>
                        </li>
                    </ul>
                    <!-- Yellow border section panel that touches the tabs -->
                    <div class="section-panel" style="margin-top: -1px; border-top-left-radius: 0; border-top-right-radius: 0;">

                        @if (showIntroModal)
                        {
                            <div class="start-planning-overlay">
                                <div class="empty-state" style="max-width: 500px;">
                                    <!-- X Close Button -->
                                    <div class="d-flex justify-content-end">
                                        <button type="button"
                                                class="btn btn-outline-secondary"
                                                aria-label="Close"
                                                @onclick="CloseIntroModal">
                                            &#10005;
                                        </button>
                                    </div>
                                    <div style="font-size: 3rem; color: #6c757d; margin-bottom: 16px;">🎯</div>
                                    <h4 style="color: #495057; margin-bottom: 16px;">Welcome to Savings Planning!</h4>
                                    <p style="color: #6c757d; margin-bottom: 24px; max-width: 500px; margin-left: auto; margin-right: auto;">
                                        Let's create your personalized retirement income plan. We'll walk you through the setup in just a few quick steps.
                                    </p>
                                    <div style="display: flex; gap: 12px; justify-content: center; margin-bottom: 16px;">
                                        <button class="btn btn-primary" style="padding: 12px 24px; font-size: 1.1rem; font-weight: 600;" @onclick="() => OpenWizard(1)">
                                            <i class="bi bi-play-circle me-2"></i>
                                            Start Planning
                                        </button>
                                        <button class="btn btn-primary"
                                                style="padding: 12px 24px; font-size: 1.1rem; font-weight: 600;"
                                                @onclick="() => { showSampleDataModal = true; showIntroModal = false; }">
                                            <i class="bi bi-clipboard-data me-2"></i>
                                            Try Sample Data
                                        </button>
                                    </div>
                                    <div style="margin-top: 24px; padding-top: 18px; border-top: 2px solid #FFD600; background: linear-gradient(90deg,#fffbe6,#fffde7); border-radius: 8px; box-shadow: 0 2px 12px rgba(255,214,0,0.08);">
                                        <div class="form-check d-flex align-items-center justify-content-center gap-2">
                                            <input class="form-check-input"
                                                   type="checkbox"
                                                   id="dontShowIntroAgainCheck"
                                                   @onchange="OnDontShowIntroChanged"
                                                   style="width: 1.3em; height: 1.3em; border: 2px solid #C79A00; box-shadow: 0 0 0 0.15rem rgba(255,214,0,0.25);" />
                                            <label class="form-check-label"
                                                   for="dontShowIntroAgainCheck"
                                                   style="font-size: 1.15rem; font-weight: 700; color: #C79A00; letter-spacing: 0.02em; padding: 8px 18px; border-radius: 6px; background: rgba(255,214,0,0.12); margin-bottom: 0; box-shadow: 0 1px 4px rgba(255,214,0,0.10); display: inline-block;">
                                                Don't show this welcome screen again
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (results != null && !calculatorModel.IsModelEmpty())
                        {
                            <div class="summary-cards-row">
                                <div class="summary-card savings-card savings-card-yellow">
                                    <span class="bi bi-piggy-bank"></span>
                                    <div class="card-label">Final Savings</div>
                                    <div class="card-value">@results.FinalAmount.ToString("C0")</div>
                                </div>
                                <div class="summary-card savings-card savings-card-teal">
                                    <span class="bi bi-arrow-up-circle"></span>
                                    <div class="card-label">Total Contributions</div>
                                    <div class="card-value">@results.TotalContributions.ToString("C0")</div>
                                </div>
                                <div class="summary-card savings-card savings-card-purple">
                                    <span class="bi bi-graph-up"></span>
                                    <div class="card-label">Total Growth</div>
                                    <div class="card-value">@results.TotalInterestEarned.ToString("C0")</div>
                                </div>
                                <div class="summary-card savings-card savings-card-red">
                                    <span class="bi bi-receipt"></span>
                                    <div class="card-label">Taxes Paid</div>
                                    <div class="card-value">@results.TotalTaxesPaid.ToString("C0")</div>
                                </div>
                            </div>

                            <!-- Simple Progress Indicator for General Public -->
                            @if (results != null && results.FinalAmount > 0)
                            {
                                <div class="alert" style="margin: 16px 0; padding: 12px; border-radius: 8px;
                                                        @(GetSavingsProgressMessage().isGood ? "background-color: #d4edda; border-color: #c3e6cb; color: #155724;" : "background-color: #f8d7da; border-color: #f5c6cb; color: #721c24;")">
                                    <div style="display: flex; align-items: center, flex-direction: row; gap: 8px;">
                                        <i class="bi @(GetSavingsProgressMessage().isGood ? "bi-check-circle" : "bi-exclamation-triangle")" style="font-size: 1.2rem;"></i>
                                        <div>
                                            <strong>@GetSavingsProgressMessage().title</strong>
                                            <div style="font-size: 0.9rem; margin-top: 4px;">@GetSavingsProgressMessage().message</div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        <!-- Centered heading with Edit Plan button -->
                        @* <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; position: relative;">
                            <div style="flex: 1;"></div>
                            <h5 style="position: absolute; left: 50%; transform: translateX(-50%); margin: 0; text-align: center;">Plan Input Data</h5>
                            <div style="display: flex; gap: 8px; flex: 1; justify-content: flex-end; align-items: center;">
                                <div class="form-check form-switch" style="margin-right: 12px;">
                                    <input class="form-check-input" type="checkbox" id="advancedSetupToggle" @onchange="ToggleAdvancedSetup" checked="@showAdvancedSetup">
                                    <label class="form-check-label" for="advancedSetupToggle" style="font-size: 0.9rem;">Advanced Setup</label>
                                </div>
                                <button class="btn btn-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                                    <i class="bi bi-gear" style="margin-right: 6px;"></i>
                                    Update Plan
                                </button>
                                <!-- Centered heading with Edit Plan button -->
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; position: relative;">
                                    <div style="flex: 1;"></div>
                                    <h5 style="position: absolute; left: 50%; transform: translateX(-50%); margin: 0; text-align: center;">Plan Input Data</h5>
                                    <div style="display: flex; gap: 8px; flex: 1; justify-content: flex-end; align-items: center;">
                                        <div class="form-check form-switch" style="margin-right: 12px;">
                                            <input class="form-check-input" type="checkbox" id="advancedSetupToggle" @onchange="ToggleAdvancedSetup" checked="@showAdvancedSetup">
                                            <label class="form-check-label" for="advancedSetupToggle" style="font-size: 0.9rem;">Advanced Setup</label>
                                        </div>
                                        <button class="btn btn-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                                            <i class="bi bi-gear" style="margin-right: 6px;"></i>
                                            Update Plan
                                        </button>
                                        <button class="btn btn-outline-danger" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="ClearDataAsync" title="Clear saved plan data for current calculator">
                                            <i class="bi bi-trash me-1"></i>
                                            Clear Plan Data
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div> *@
                        <!-- Enhanced header with large mode toggle - Same as Cost of Living -->
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; position: relative; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 12px; padding: 1rem 1.5rem;">
                            <div style="flex: 1;"></div>
                            @* <h5 style="position: absolute; left: 50%; transform: translateX(-50%); margin: 0; text-align: center;">
                                @(showAdvancedSetup ? "Advanced Savings Planning" : "Simple Savings Plan")
                            </h5> *@
                            <h5>
                                Savings & Wealth Building - Inputs
                            </h5>
                            <div style="display: flex; gap: 16px; flex: 1; justify-content: flex-end; align-items: center;">
                                <!-- Large Mode Toggle - Same as Cost of Living -->
                                @*  <div class="d-flex align-items-center gap-3">
                                    <div class="text-end">
                                        <div class="d-flex align-items-center gap-2 mb-1">
                                            <span style="font-size: 1.1rem;">@(showAdvancedSetup ? "⚙️" : "🎯")</span>
                                            <span class="fw-bold @(showAdvancedSetup ? "text-primary" : "text-success")">
                                                @(showAdvancedSetup ? "Advanced Mode" : "Simple Mode")
                                            </span>
                                        </div>
                                        <small class="text-muted">
                                            @(showAdvancedSetup ? "All features & controls" : "Basic & easy to use")
                                        </small>
                                    </div>
                                    <div class="form-check form-switch form-switch-lg">
                                        <input class="form-check-input" type="checkbox" id="advancedSetupToggle" @onchange="ToggleAdvancedSetup" checked="@showAdvancedSetup">
                                        <label class="form-check-label fw-bold ms-2" for="advancedSetupToggle" style="cursor: pointer;">
                                            @(showAdvancedSetup ? "Simplify Interface" : "Enable Advanced Features")
                                        </label>
                                    </div>
                                </div> *@
                                <button class="btn btn-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                                    <i class="bi bi-gear me-2"></i>
                                    Update Plan
                                </button>
                                <button class="btn btn-outline-danger" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="ClearDataAsync" title="Clear saved plan data for current calculator">
                                    <i class="bi bi-trash me-1"></i>
                                    Clear Plan Data
                                </button>
                            </div>
                        </div>
                        <div style="display:grid; grid-template-columns: repeat(3, 1fr); gap:12px;">
                            <div class="section-card @(IsMilestonesSectionComplete() ? "" : "incomplete-section")"
                                 style="background-color: rgba(255, 214, 0, 0.03); border-left: 3px solid #FFD600;">
                                <div>
                                    <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                        <div style="display:flex; align-items:center; gap:8px;">
                                            <span class="step-badge">1</span>
                                            <div>Milestones & ages</div>
                                        </div>
                                        @if (!IsMilestonesSectionComplete())
                                        {
                                            <span style="font-size:0.75rem; color:#dc3545;">
                                                <i class="bi bi-exclamation-circle"></i> Incomplete
                                            </span>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px; display: flex; align-items: center; justify-content: space-between;">
                                        <div>
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipCurrentAge = !showToolTipCurrentAge" tabindex="0" title="Click for more info"></span>
                                            Current Age: @calculatorModel.CurrentAge
                                            @if (showToolTipCurrentAge)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Your Current Age:</strong> Your age today. This is the starting point for calculating how many years you have to save before retirement.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipCurrentAge = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                        @if (calculatorModel.CurrentAge <= 0)
                                        {
                                            <span class="missing-badge">
                                                <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                            </span>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px; display: flex; align-items: center; justify-content: space-between;">
                                        <div>
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRetirementAge = !showToolTipRetirementAge" tabindex="0" title="Click for more info"></span>
                                            Planned Retirement Age: @calculatorModel.RetirementAge
                                            @if (showToolTipRetirementAge)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Planned Retirement Age:</strong> The age at which you plan to stop working and begin your retirement. Most people retire between ages 62-70, with full Social Security benefits available at 66-67 depending on birth year.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRetirementAge = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                        @if (calculatorModel.RetirementAge <= 0)
                                        {
                                            <span class="missing-badge">
                                                <i class="bi bi-exclamation-triangle-fill me-1"></i>Required
                                            </span>
                                        }
                                    </div>

                                    <div class="small-note" style="margin-top:8px; display: flex; align-items: center; justify-content: space-between;">
                                        <div>
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipYearsUntilRetirement = !showToolTipYearsUntilRetirement" tabindex="0" title="Click for more info"></span>
                                            Years until Retirement: @calculatorModel.Years
                                            @if (showToolTipYearsUntilRetirement)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Years Until Retirement:</strong> Automatically calculated as the difference between your planned retirement age and current age. This determines how many years you have to save and how long your investments can grow before retirement.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYearsUntilRetirement = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                        @if (calculatorModel.Years <= 0)
                                        {
                                            <span class="missing-badge">
                                                <i class="bi bi-exclamation-triangle-fill me-1"></i>Calculated
                                            </span>
                                        }
                                    </div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(1)">Update</button>
                                </div>
                            </div>

                            <div class="section-card @(!IsStartingBalancesSectionComplete() ? "incomplete-section" : "")"
                                 style="background-color: rgba(31, 111, 235, 0.03); border-left: 3px solid #1F6FEB;">
                                <div>
                                    <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                        <div style="display:flex; align-items:center; gap:8px;">
                                            <span class="step-badge">2</span>
                                            <div>Starting Balances</div>
                                        </div>
                                        @if (!IsStartingBalancesSectionComplete())
                                        {
                                            <span style="font-size:0.75rem; color:#dc3545;">
                                                <i class="bi bi-exclamation-circle"></i> At least one required
                                            </span>
                                        }
                                    </div>

                                    <!-- Simple explanation for general public -->
                                    <div class="alert alert-info mt-2 mb-2 py-2" style="font-size: 0.85rem; background-color: #e8f4f8; border-left: 3px solid #1F6FEB;">
                                        <strong>Quick Guide:</strong>
                                        <strong>Taxable</strong> = Regular savings/investment accounts.
                                        <strong>Traditional</strong> = 401k, Traditional IRA (tax-deferred).
                                        <strong>Roth</strong> = Roth IRA, Roth 401k (tax-free growth).
                                    </div>

                                    @if (!showAdvancedSetup)
                                    {
                                        <div class="alert alert-success mt-2 mb-2 py-2" style="font-size: 0.85rem; background-color: #f0f9f0; border-left: 3px solid #28a745;">
                                            <strong>💡 Beginner Tip:</strong> Start with just one account type you have money in. You can always add others later!
                                        </div>
                                    }

                                    @if (!IsStartingBalancesSectionComplete())
                                    {
                                        <div class="alert alert-light mt-2 mb-2 py-2" style="font-size: 0.85rem; border-left: 3px solid #dc3545;">
                                            <i class="bi bi-info-circle me-1"></i>
                                            Enter the current balance for at least one account type you have.
                                        </div>
                                    }

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableBalance = !showToolTipTaxableBalance" tabindex="0" title="Click for more info"></span>
                                        Taxable: @FormatMoneySafe(calculatorModel.InitialTaxableAmount)
                                        <!-- Fix the taxable account tooltip to be more beginner-friendly -->
                                        @if (showToolTipTaxableBalance)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Taxable Accounts:</strong> Regular investment and savings accounts that don't have special tax benefits. Examples include:
                                                <br>• Bank savings accounts
                                                <br>• Brokerage accounts (stocks, bonds, mutual funds)
                                                <br>• Certificates of deposit (CDs)
                                                <br>• Money market accounts
                                                <br><br><strong>Tax Impact:</strong> You pay taxes each year on interest, dividends, and capital gains, but you can access your money anytime without penalties.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableBalance = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalBalance = !showToolTipTraditionalBalance" tabindex="0" title="Click for more info"></span>
                                        Traditional: @FormatMoneySafe(calculatorModel.InitialTraditionalAmount)
                                        @if (showToolTipTraditionalBalance)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Traditional Accounts:</strong> Tax-deferred retirement accounts like 401(k)s, 403(b)s, and Traditional IRAs. Contributions often reduce your current taxable income, but withdrawals in retirement are taxed as ordinary income.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalBalance = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothBalance = !showToolTipRothBalance" tabindex="0" title="Click for more info"></span>
                                        Roth: @FormatMoneySafe(calculatorModel.InitialRothAmount)
                                        @if (showToolTipRothBalance)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Roth Accounts:</strong> After-tax retirement accounts like Roth IRAs and Roth 401(k)s. Contributions are made with already-taxed dollars, but qualified withdrawals in retirement are completely tax-free, including all growth.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothBalance = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(2)">Update</button>
                                </div>
                            </div>


                            <div class="section-card @(!IsMonthlyContributionsSectionComplete() ? "incomplete-section" : "")"
                                 style="background-color: rgba(56, 178, 172, 0.03); border-left: 3px solid #38B2AC;">
                                <div>
                                    <div style="display:flex; align-items:center; justify-content:space-between; font-weight:700;">
                                        <div style="display:flex; align-items:center; gap:8px;">
                                            <span class="step-badge">3</span>
                                            <div>Monthly Contributions</div>
                                        </div>
                                        @if (!IsMonthlyContributionsSectionComplete())
                                        {
                                            <span style="font-size:0.75rem; color:#dc3545;">
                                                <i class="bi bi-exclamation-circle"></i> At least one required
                                            </span>
                                        }
                                    </div>

                                    @if (!IsMonthlyContributionsSectionComplete())
                                    {
                                        <div class="alert alert-light mt-2 mb-2 py-2" style="font-size: 0.85rem; border-left: 3px solid #dc3545;">
                                            <i class="bi bi-info-circle me-1"></i>
                                            Enter at least one monthly contribution amount to grow your savings.
                                        </div>
                                    }

                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableContribution = !showToolTipTaxableContribution" tabindex="0" title="Click for more info"></span>
                                        Taxable: @calculatorModel.MonthlyTaxableContribution.ToString("C0")
                                        @if (showToolTipTaxableContribution)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Monthly Taxable Contribution:</strong> How much you plan to add each month to your regular, non-retirement investment accounts. These contributions are made with after-tax dollars and offer more flexibility for early withdrawals without penalties.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableContribution = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalContribution = !showToolTipTraditionalContribution" tabindex="0" title="Click for more info"></span>
                                        Traditional: @calculatorModel.MonthlyTraditionalContribution.ToString("C0")
                                        @if (showToolTipTraditionalContribution)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Monthly Traditional Contribution:</strong> Your monthly contributions to tax-deferred retirement accounts. For 2023, the annual contribution limit for 401(k)s is $22,500 ($1,875/month) plus catch-up contributions of $7,500 for those 50+.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalContribution = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    <div class="small-note" style="margin-top:8px;">
                                        <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothContribution = !showToolTipRothContribution" tabindex="0" title="Click for more info"></span>
                                        Roth: @calculatorModel.MonthlyRothContribution.ToString("C0")
                                        @if (showToolTipRothContribution)
                                        {
                                            <div class="info-tooltip">
                                                <strong>Monthly Roth Contribution:</strong> Your monthly contributions to Roth accounts. For 2023, Roth IRA contributions share the same limit as Traditional IRAs: $6,500 ($541/month) plus $1,000 catch-up for those 50+. Income limits apply for eligibility.
                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothContribution = false" title="Close">
                                                    <span class="bi bi-x-lg"></span>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="actions">
                                    <button class="btn-edit" @onclick="() => OpenWizard(3)">Update</button>
                                </div>
                            </div>

                            @if (showAdvancedSetup)
                            {
                                <div class="section-card"
                                     style="background-color: rgba(109, 93, 252, 0.03); border-left: 3px solid #6D5DFC;">
                                    <div>
                                        <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                            <span class="step-badge">4</span>
                                            <div>Estimated Growth Rate</div>
                                        </div>
                                        <div class="small-note">
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableGrowth = !showToolTipTaxableGrowth" tabindex="0" title="Click for more info"></span>
                                            Taxable: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateTaxable)
                                            <!-- Enhance the growth rate tooltip with context -->
                                            @if (showToolTipTaxableGrowth)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Taxable Growth Rate:</strong> Expected annual return for your taxable investments. This is usually lower than retirement accounts because:
                                                    <br>• You pay taxes on dividends and capital gains each year
                                                    <br>• This "tax drag" reduces your effective returns
                                                    <br>• Historical average: 6-7% before taxes, 4-5% after taxes

                                                    <br><br><strong>Reality Check:</strong> Markets don't grow steadily - some years are up 20%, others down 10%. This calculator uses averages for planning purposes.

                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableGrowth = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                        <div class="small-note">
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalGrowth = !showToolTipTraditionalGrowth" tabindex="0" title="Click for more info"></span>
                                            Traditional: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateTraditional)
                                            @if (showToolTipTraditionalGrowth)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Traditional Account Growth Rate:</strong> Expected annual return for your tax-deferred retirement accounts. Because these accounts aren't taxed during growth years, returns can compound more efficiently. Historical average for a balanced portfolio is around 7-8%.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalGrowth = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                        <div class="small-note">
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothGrowth = !showToolTipRothGrowth" tabindex="0" title="Click for more info"></span>
                                            Roth: @string.Format("{0:F1}%", calculatorModel.AnnualGrowthRateRoth)
                                            @if (showToolTipRothGrowth)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Roth Account Growth Rate:</strong> Expected annual return for your Roth retirement accounts. Like traditional accounts, Roth investments grow tax-free, allowing for efficient compounding. The historical average is similar to traditional accounts at around 7-8%.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothGrowth = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-edit" @onclick="() => OpenWizard(4)">Update</button>
                                    </div>
                                </div>
                            }

                            @if (showAdvancedSetup)
                            {
                                <div class="section-card"
                                     style="background-color: rgba(79, 209, 197, 0.03); border-left: 3px solid #4FD1C5;">
                                    <div>
                                        <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                            <span class="step-badge">5</span>
                                            <div>Tax Treatment</div>
                                        </div>
                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipIncomeType = !showToolTipIncomeType" tabindex="0" title="Click for more info"></span>
                                            Taxable Income Type: @calculatorModel.TaxableIncomeType
                                            @if (showToolTipIncomeType)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Taxable Income Type:</strong> The primary type of income your taxable investments generate. Different income types are taxed differently: dividends and long-term capital gains often receive preferential tax rates, while interest is typically taxed as ordinary income.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipIncomeType = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                        <div class="small-note" style="margin-top:8px;">
                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxBracket = !showToolTipTaxBracket" tabindex="0" title="Click for more info"></span>
                                            Tax Bracket: @calculatorModel.TaxBracket
                                            @if (showToolTipTaxBracket)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Tax Bracket:</strong> Your estimated income tax bracket. This affects the tax efficiency of different account types. For 2023, federal brackets range from 10% to 37%. Low = 10-12%, Medium = 22-24%, High = 32-37%.

                                                    <br><br><strong>Simplified Assumptions:</strong><br>
                                                    • State taxes not included in calculations<br>
                                                    • Tax rates assumed constant over time<br>
                                                    • No consideration of changing tax laws<br>
                                                    • Standard deduction and other tax benefits not modeled

                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxBracket = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="actions">
                                        <button class="btn-edit" @onclick="() => OpenWizard(5)">Update</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Right column-->
                <div class="col-12 col-md-2">
                    <div class="panel" style="z-index: 1002;">
                        <div style="font-weight:700; margin-bottom:8px;">Quick Links</div>
                        <div style="display:flex; flex-direction:column; gap:6px;">
                            <a href="/" class="badge">Home</a>
                            <a href="/about-rewealthen" class="badge">About</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="grid-panel panel mt-3">
        <div class="grid-header">
            <div style="font-weight:800; font-size:1rem;">Yearly Projection</div>
            <div style="display: flex; gap: 12px; align-items: center;">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="simpleViewToggle" @onchange="ToggleSimpleView" checked="@showSimpleView">
                    <label class="form-check-label" for="simpleViewToggle" style="font-size: 0.9rem;">Simple View</label>
                </div>
                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipMethodology = !showToolTipMethodology" tabindex="0" title="Click for calculation methodology"></span>
            </div>
            @if (showToolTipMethodology)
            {
                <div class="info-tooltip" style="max-width: 400px;">
                    <strong>Calculation Methodology:</strong>
                    <br>• Contributions added monthly at month beginning
                    <br>• Annual growth applied to average account balance
                    <br>• Taxes calculated on taxable account growth only
                    <br>• No consideration of market volatility or timing
                    <br>• Tax rates held constant throughout projection period
                    <br>• No inflation adjustments to contribution amounts

                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipMethodology = false" title="Close">
                        <span class="bi bi-x-lg"></span>
                    </span>
                </div>
            }
        </div>

        @if (calculatorModel.IsModelEmpty())
        {
            <div style="text-align: center; padding: 60px 20px; color: #6c757d;">
                <div style="font-size: 2.5rem; margin-bottom: 16px;">📊</div>
                <h5 style="color: #495057; margin-bottom: 12px;">No Projection Available</h5>
                <p style="margin-bottom: 20px;">Complete your savings plan setup to see projections.</p>
                <button class="btn btn-primary" @onclick="() => OpenWizard(1)">Get Started</button>
            </div>
        }
        else if (HasProjection)
        {

            <div class="grid">
                <table class="table table-sm table-bordered" aria-label="Yearly projection">
                    <thead class="table-light">
                        <!-- First Row: Categories -->
                        <tr>
                            <th rowspan="2" style="text-align:left; width:80px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderYear = !showToolTipTableHeaderYear" tabindex="0" title="Click for more info"></span>
                                Year
                                @if (showToolTipTableHeaderYear)
                                {
                                    <div class="info-tooltip">
                                        <strong>Year:</strong> The year for which the projection is calculated.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderYear = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th rowspan="2" style="text-align:left; width:60px;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderAge = !showToolTipTableHeaderAge" tabindex="0" title="Click for more info"></span>
                                Age
                                @if (showToolTipTableHeaderAge)
                                {
                                    <div class="info-tooltip">
                                        <strong>Age:</strong> The age of the individual during the specified year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderAge = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="5" class="col-taxable" style="text-align:center; background-color: rgba(31,111,235,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableCategory = !showToolTipTableHeaderTaxableCategory" tabindex="0" title="Click for more info"></span>
                                Taxable
                                @if (showToolTipTableHeaderTaxableCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Taxable:</strong> Accounts subject to annual taxes on earnings, such as brokerage accounts.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="4" class="col-traditional" style="text-align:center; background-color: rgba(56,178,172,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTraditionalCategory = !showToolTipTableHeaderTraditionalCategory" tabindex="0" title="Click for more info"></span>
                                Traditional
                                @if (showToolTipTableHeaderTraditionalCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Traditional:</strong> Tax-deferred retirement accounts like 401(k)s and Traditional IRAs.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTraditionalCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="4" class="col-roth" style="text-align:center; background-color: rgba(109,93,252,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderRothCategory = !showToolTipTableHeaderRothCategory" tabindex="0" title="Click for more info"></span>
                                Roth
                                @if (showToolTipTableHeaderRothCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Roth:</strong> After-tax retirement accounts like Roth IRAs and Roth 401(k)s.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderRothCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th colspan="3" class="col-totals" style="text-align:center; background-color: rgba(255,214,0,0.06);">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTotalsCategory = !showToolTipTableHeaderTotalsCategory" tabindex="0" title="Click for more info"></span>
                                Totals
                                @if (showToolTipTableHeaderTotalsCategory)
                                {
                                    <div class="info-tooltip">
                                        <strong>Totals:</strong> Aggregated values across all account types.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTotalsCategory = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                        </tr>
                        <!-- Second Row: Specific Headers -->
                        <tr>
                            <!-- Taxable Columns - Match parent color -->
                            <th style="width:100px;text-align:right;background-color: rgba(31,111,235,0.06);color: #1F6FEB;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableYearBegin = !showToolTipTableHeaderTaxableYearBegin" tabindex="0" title="Click for more info"></span>
                                Year Begin
                                @if (showToolTipTableHeaderTraditionalYearBegin)
                                {
                                    <div class="info-tooltip">
                                        <strong>Traditional Year Begin:</strong> The starting balance for your tax-deferred retirement accounts (401k, Traditional IRA) at the beginning of the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTraditionalYearBegin = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th style="width:100px;text-align:right;background-color: rgba(31,111,235,0.06);color: #1F6FEB;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableContribution = !showToolTipTableHeaderTaxableContribution" tabindex="0" title="Click for more info"></span>
                                Contribution
                                @if (showToolTipTableHeaderTaxableContribution)
                                {
                                    <div class="info-tooltip">
                                        <strong>Contribution:</strong> The amount contributed to the taxable account during the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableContribution = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <!-- Make column headers more descriptive -->
                            <!-- Change "Growth" to "Annual Growth" for clarity -->
                            <th style="width:100px;text-align:right;background-color: rgba(31,111,235,0.06);color: #1F6FEB;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableGrowth = !showToolTipTableHeaderTaxableGrowth" tabindex="0" title="Click for more info"></span>
                                Growth
                                @if (showToolTipTableHeaderTaxableGrowth)
                                {
                                    <div class="info-tooltip">
                                        <strong>Annual Growth:</strong> How much your taxable investments grew this year from interest, dividends, and capital gains before taxes are deducted.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableGrowth = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th style="width:100px;text-align:right;background-color: rgba(31,111,235,0.06);color: #1F6FEB;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableTaxPaid = !showToolTipTableHeaderTaxableTaxPaid" tabindex="0" title="Click for more info"></span>
                                Tax Paid
                                @if (showToolTipTableHeaderTaxableTaxPaid)
                                {
                                    <div class="info-tooltip">
                                        <strong>Tax Paid:</strong> The taxes paid on the taxable account during the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableTaxPaid = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                            <th style="width:100px;text-align:right;background-color: rgba(31,111,235,0.06);color: #1F6FEB;">
                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTableHeaderTaxableYearEnd = !showToolTipTableHeaderTaxableYearEnd" tabindex="0" title="Click for more info"></span>
                                Year End
                                @if (showToolTipTableHeaderTaxableYearEnd)
                                {
                                    <div class="info-tooltip">
                                        <strong>Year End:</strong> The ending balance for the taxable account at the end of the year.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTableHeaderTaxableYearEnd = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </th>
                           <!-- Traditional Columns - Match parent color -->
        <th style="text-align:right;background-color: rgba(56,178,172,0.06);color: #38B2AC;">Year Begin</th>
        <th style="text-align:right;background-color: rgba(56,178,172,0.06);color: #38B2AC;">Contribution</th>
        <th style="text-align:right;background-color: rgba(56,178,172,0.06);color: #38B2AC;">Growth</th>
        <th style="text-align:right;background-color: rgba(56,178,172,0.06);color: #38B2AC;">Year End</th>
        <!-- Roth Columns - Match parent color -->
        <th style="text-align:right;background-color: rgba(109,93,252,0.06);color: #6D5DFC;">Year Begin</th>
        <th style="text-align:right;background-color: rgba(109,93,252,0.06);color: #6D5DFC;">Contribution</th>
        <th style="text-align:right;background-color: rgba(109,93,252,0.06);color: #6D5DFC;">Growth</th>
        <th style="text-align:right;background-color: rgba(109,93,252,0.06);color: #6D5DFC;">Year End</th>
        <!-- Totals Columns - Match parent color -->
        <th style="text-align:right;background-color: rgba(255,214,0,0.06);color: #C79A00;">Contributions</th>
        <th style="text-align:right;background-color: rgba(255,214,0,0.06);color: #C79A00;">Growth</th>
        <th style="text-align:right;background-color: rgba(255,214,0,0.06);color: #C79A00;">Year End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (yearlyBreakdown == null || !yearlyBreakdown.Any())
                        {
                            <tr><td colspan="15" class="text-center text-muted">No projection rows available. Run Calculate to generate projections.</td></tr>
                        }
                        else
                        {
                            foreach (var r in yearlyBreakdown)
                            {

                                var age = calculatorModel.CurrentAge + (r.Year - 1);  // r.Year is 1-based
                                                                                      <tr>
                                                                                          <td>@r.Year</td>
                                                                                          <td>@age</td>

                                    <!-- Taxable columns -->
                                    <!-- Taxable columns with inline styles -->
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color: rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableBOYBalance)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableContribution)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableInterest)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="color:#F56565; font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxesPaid)
                                    </td>
                                    <td class="text-end col-taxable"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(31,111,235,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TaxableEOYBalance)
                                    </td>

                                    <!-- Traditional columns with inline styles -->
                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalBOYBalance)
                                    </td>
                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalContribution)
                                    </td>

                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalInterest)
                                    </td>
                                    <td class="text-end col-traditional"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(56,178,172,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TraditionalEOYBalance)
                                    </td>

                                    <!-- Roth columns with inline styles -->
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothBOYBalance)
                                    </td>
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothContribution)
                                    </td>
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothInterest)
                                    </td>
                                    <td class="text-end col-roth"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(109,93,252,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.RothEOYBalance)
                                    </td>

                                    <!-- Totals columns with inline styles -->
                                    <td class="text-end col-totals"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TotalContributions)
                                    </td>
                                    <td class="text-end col-totals"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TotalGrowth)
                                    </td>
                                    <td class="text-end col-totals"
                                        style="font-size:0.78rem;font-weight:600;background-color:rgba(255,214,0,0.06); background-clip: padding-box; text-align: right; font-variant-numeric: tabular-nums;">
                                        @FormatMoneySafe(r.TotalEOYBalance)
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>

    <div class="mt-3 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #856404; margin-top: 2px;">
                <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">Important Disclaimers & Assumptions</div>
                <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                    <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational purposes only. Results are projections based on your inputs and simplified assumptions.</p>

                    <p style="margin-bottom: 8px;"><strong>Key Assumptions:</strong> Calculations assume steady annual growth, constant tax rates, monthly contributions at month start, and no market volatility, emergencies, or changing life circumstances.</p>

                    <p style="margin-bottom: 8px;"><strong>Limitations:</strong> This calculator does not include state taxes, inflation effects on contributions, changing tax laws, market crashes, or personal financial emergencies. It does not model withdrawals or distributions before retirement, required minimum distributions (RMDs), early withdrawal penalties, or inflation on contributions. Results assume no market volatility, job loss, or other unexpected events.</p>

                    <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial advisors who can provide personalized advice for your complete financial situation and account for factors not modeled here.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool showWizard = false;
    private int wizardOpenStep = 1;
    private bool showSampleDataModal = false;
    private bool showRightDebug = false;

    public SavingsCalculatorModel calculatorModel { get; set; } = new();
    private SavingsResults? results;
    private List<YearlyBreakdown> yearlyBreakdown = new();
    private string userGuid = string.Empty;
    private const string calculatorTypeYours = "savings_yours";
    private const string calculatorTypePartners = "savings_partners";
    private string calculatorType = calculatorTypeYours;
    private bool showIntroModal = true; // Show by default unless user has opted out
    private bool dontShowIntroAgain = false;

    // Tooltip visibility flags
    private bool showToolTipCurrentAge = false;
    private bool showToolTipRetirementAge = false;
    private bool showToolTipYearsUntilRetirement = false;

    private bool showToolTipTaxableBalance = false;
    private bool showToolTipTraditionalBalance = false;
    private bool showToolTipRothBalance = false;

    private bool showToolTipTaxableContribution = false;
    private bool showToolTipTraditionalContribution = false;
    private bool showToolTipRothContribution = false;

    private bool showToolTipTaxableGrowth = false;
    private bool showToolTipTraditionalGrowth = false;
    private bool showToolTipRothGrowth = false;

    private bool showToolTipIncomeType = false;
    private bool showToolTipTaxBracket = false;
    private bool showToolTipMethodology = false;

    // UX Enhancement toggles
    private bool showSimpleView = true;
    private bool showAdvancedSetup = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
                await LoadAsync();
                Calculate();
                await HandleIntroModal();

                StateHasChanged();
            }
            catch (Exception ex)
            {
                DebugService.AddMessage($"Init error: {ex.Message}");
            }
        }
    }

    private async Task HandleIntroModal()
    {
        // Check for showIntro query parameter
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var showIntroParam = query["showIntro"];
        
        if (!string.IsNullOrEmpty(showIntroParam) && showIntroParam.Equals("false", StringComparison.OrdinalIgnoreCase))
        {
            // Query parameter explicitly says to hide intro
            showIntroModal = false;
            return;
        }

        showIntroModal = false;

        if (!calculatorModel.HasRealData)
        {
            // Check localStorage for intro modal preference
            string key = calculatorType == calculatorTypeYours
                ? "finplan-your-savings-wealth-building-hide-intro"
                : "finplan-partner-savings-wealth-building-hide-intro";
            var hideIntro = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
            if (!string.IsNullOrEmpty(hideIntro) && hideIntro.Equals("true", StringComparison.OrdinalIgnoreCase))
            {
                showIntroModal = false;
            }
            else
            {
                showIntroModal = true;
            }
        }
    }

    private async Task OnDontShowIntroChanged(ChangeEventArgs e)
    {
        bool checkedState = e?.Value is bool b && b;
        string key = calculatorType == calculatorTypeYours
            ? "finplan-your-savings-wealth-building-hide-intro"
            : "finplan-partner-savings-wealth-building-hide-intro";

        if (checkedState)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, "true");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
    }

    // Add these new methods
    private void CloseIntroModal()
    {
        showIntroModal = false;
        StateHasChanged();
    }

    private void Calculate()
    {
        try
        {
            var calculator = new SavingsCalculationEngine();
            results = calculator.Calculate(calculatorModel);
            yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Calc error: {ex.Message}");
        }
    }

    private async Task LoadAsync()
    {
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calculatorType}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (loadedModel != null)
                {
                    calculatorModel = loadedModel;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                //Does not exist, create an empty one
                calculatorModel = new SavingsCalculatorModel();
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Load error: {ex.Message}");
        }
    }

    private bool HasProjection => yearlyBreakdown?.Any() == true;


    private async Task SaveAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(userGuid))
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            }

            calculatorModel.LastUpdateDate = DateTime.UtcNow;
            var saveRequest = new PersistSavingsRequest
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = calculatorModel
            };
            var json = System.Text.Json.JsonSerializer.Serialize(saveRequest);
            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync($"{GetApiBaseUrl()}/api/FinPlan/save", content);
            if (!response.IsSuccessStatusCode)
            {
                DebugService.AddMessage($"Save failed: {response.StatusCode}");
            }

            // Always recalc so the grid becomes visible immediately after changes
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Save error: {ex.Message}");
        }
    }

    private async Task HandleWizardFinished((int AgeYou, int AgePartner) ages)
    {
        try
        {
            if (ages.AgeYou > 0) calculatorModel.RetirementAge = ages.AgeYou;
            await SaveAsync();
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Wizard finish error: {ex.Message}");
        }
    }

    private async Task HandleSampleDataSelected(SavingsCalculatorModel sampleModel)
    {
        calculatorModel = sampleModel;
        await SaveAsync();
        Calculate();
        StateHasChanged();
    }

    private void OpenWizard(int step)
    {
        wizardOpenStep = step;
        showWizard = true;
    }

    private void ToggleRightDebug()
    {
        showRightDebug = !showRightDebug;
        StateHasChanged();
    }

    private string FormatMoneySafe(decimal? v) => v.HasValue ? v.Value.ToString("C0") : "-";


    private string FormatMoney(decimal? value) => value?.ToString("C0") ?? "-";


    string activeTab = "your";

    private async Task YourTabClick()
    {
        calculatorType = calculatorTypeYours;
        SetActiveTab("your");
        await LoadAsync();
        Calculate();
        await HandleIntroModal();
        StateHasChanged();
    }

    private async Task PartnerTabClick()
    {
        calculatorType = calculatorTypePartners;
        SetActiveTab("partner");
        await LoadAsync();
        Calculate();
        await HandleIntroModal();
        StateHasChanged();
    }
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }
    private bool IsMonthlyContributionsSectionComplete()
    {
        return calculatorModel.MonthlyTaxableContribution > 0 ||
               calculatorModel.MonthlyTraditionalContribution > 0 ||
               calculatorModel.MonthlyRothContribution > 0;
    }
    private bool IsMilestonesSectionComplete()
    {
        return calculatorModel.CurrentAge > 0 && calculatorModel.RetirementAge > 0;
    }
    private bool IsStartingBalancesSectionComplete()
    {
        return calculatorModel.InitialTaxableAmount > 0 ||
               calculatorModel.InitialTraditionalAmount > 0 ||
               calculatorModel.InitialRothAmount > 0;
    }


    private bool showToolTipTableHeaderTaxableYearBegin = false;
    private bool showToolTipTableHeaderTaxableContribution = false;
    private bool showToolTipTableHeaderTaxableGrowth = false;
    private bool showToolTipTableHeaderTaxableTaxPaid = false;
    private bool showToolTipTableHeaderTaxableYearEnd = false;

    private bool showToolTipTableHeaderTraditionalYearBegin = false;
    private bool showToolTipTableHeaderTraditionalContribution = false;
    private bool showToolTipTableHeaderTraditionalGrowth = false;
    private bool showToolTipTableHeaderTraditionalYearEnd = false;

    private bool showToolTipTableHeaderRothYearBegin = false;
    private bool showToolTipTableHeaderRothContribution = false;
    private bool showToolTipTableHeaderRothGrowth = false;
    private bool showToolTipTableHeaderRothYearEnd = false;

    private bool showToolTipTableHeaderTotalContributions = false;
    private bool showToolTipTableHeaderTotalGrowth = false;
    private bool showToolTipTableHeaderTotalYearEnd = false;

    private bool showToolTipTableHeaderTaxableCategory = false;
    private bool showToolTipTableHeaderTraditionalCategory = false;
    private bool showToolTipTableHeaderRothCategory = false;

    private bool showToolTipTableHeaderYear = false;
    private bool showToolTipTableHeaderAge = false;
    private bool showToolTipTableHeaderTotalsCategory = false;

    private string GetApiBaseUrl()
    {
#if DEBUG
            return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }
    // Add this method to your @code section
    // Add this method to your @code section
    private async Task ClearDataAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Starting clear operation");
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Calculator type = {calculatorType}");

            // Confirm with user before deleting
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to clear all saved data for {(calculatorType == calculatorTypeYours ? "Your" : "Partners")} savings plan? This action cannot be undone.");

            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: User confirmation = {confirm}");

            if (!confirm)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: User cancelled operation");
                return;
            }

            if (string.IsNullOrWhiteSpace(userGuid))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Getting user GUID");
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            }

            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Using user GUID = {userGuid}");

            var apiBaseUrl = GetApiBaseUrl();
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: API base URL = {apiBaseUrl}");

            // Create request body for POST instead of query parameters for DELETE
            var deleteRequest = new
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType
            };

            var json = System.Text.Json.JsonSerializer.Serialize(deleteRequest);
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Request payload = {json}");

            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var endpoint = $"{apiBaseUrl}/api/FinPlan/remove";
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Making POST request to {endpoint}");

            // Use POST to delete endpoint instead of DELETE with query parameters
            var response = await client.PostAsync(endpoint, content);

            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Response status = {response.StatusCode}");
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Response success = {response.IsSuccessStatusCode}");

            if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Clear operation succeeded");
                DebugService.AddMessage("Plan data cleared successfully.");

                // Remove the intro modal hide localStorage key
                string key = calculatorType == calculatorTypeYours
                    ? "finplan-your-savings-wealth-building-hide-intro"
                    : "finplan-partner-savings-wealth-building-hide-intro";

                await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Removing localStorage key = {key}");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);

                // Reset the model to empty so IsModelEmpty() returns true on reload
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Resetting calculator model to empty state");
                calculatorModel = new SavingsCalculatorModel();

                // Reload the page to reflect the cleared state
                await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Reloading page to {Navigation.Uri}");
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Failed to clear data - Status: {response.StatusCode}");
                DebugService.AddMessage($"Failed to clear data: {response.StatusCode}");

                // Log response content for debugging
                var responseContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Response content = {responseContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Exception occurred - {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Stack trace = {ex.StackTrace}");
            DebugService.AddMessage($"Error clearing data: {ex.Message}");
        }
    }


    // UX Enhancement Methods
    private void ToggleSimpleView(ChangeEventArgs e)
    {
        showSimpleView = e.Value?.ToString()?.ToLower() == "true";
        StateHasChanged();
    }

    private void ToggleAdvancedSetup(ChangeEventArgs e)
    {
        showAdvancedSetup = e.Value?.ToString()?.ToLower() == "true";
        StateHasChanged();
    }

    private (string title, string message, bool isGood) GetSavingsProgressMessage()
    {
        if (results == null || calculatorModel == null) return ("", "", true);

        var monthlyContributions = calculatorModel.MonthlyTaxableContribution +
                                  calculatorModel.MonthlyTraditionalContribution +
                                  calculatorModel.MonthlyRothContribution;
        var annualContributions = monthlyContributions * 12;
        var yearsToRetirement = calculatorModel.RetirementAge - calculatorModel.CurrentAge;
        var finalSavings = results.FinalAmount;

        // Simple rule of thumb: 10-15% of income saved, or $1M+ by retirement
        if (finalSavings >= 1_000_000)
        {
            return ("Great job! 🎉", $"You're projected to have {finalSavings:C0} by retirement. You're on track for a comfortable retirement!", true);
        }
        else if (finalSavings >= 500_000)
        {
            return ("Good progress! 👍", $"You're projected to have {finalSavings:C0} by retirement. Consider increasing contributions if possible.", true);
        }
        else if (annualContributions < 10_000)
        {
            return ("Consider saving more 💡", $"You're currently saving {annualContributions:C0}/year. Financial experts suggest saving 10-15% of income for retirement.", false);
        }
        else
        {
            return ("Keep it up! 💪", $"You're saving {annualContributions:C0}/year. Your projected {finalSavings:C0} is a good start - consider increasing when possible.", true);
        }
    }
}