@using System.ComponentModel.DataAnnotations
@using FinPlan.Web.Components
@using FinPlan.Web.Services
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<style>
    /* Dark theme styles */
    .dark-theme {
        background-color: #121212;
        color: #E2E8F0;
    }
    .dark-theme .card {
        background-color: #1E1E1E;
        border-color: #333;
    }
    .dark-theme .card-header {
        background-color: #252525 !important;
        border-bottom-color: #333;
        color: #E2E8F0 !important;
    }
    .dark-theme .form-control {
        background-color: #252525;
        border-color: #333;
        color: #E2E8F0;
    }
    .dark-theme .form-control:focus {
        background-color: #2D2D2D;
        box-shadow: 0 0 0 0.25rem rgba(109, 93, 252, 0.25);
    }
    .dark-theme .btn-primary {
        background-color: #6D5DFC;
        border-color: #6D5DFC;
    }
    .dark-theme .btn-primary:hover {
        background-color: #5A4AE3;
        border-color: #5A4AE3;
    }
    .dark-theme .text-primary {
        color: #6D5DFC !important;
    }
    .dark-theme .text-success {
        color: #38B2AC !important;
    }
    .dark-theme .text-info {
        color: #4FD1C5 !important;
    }
    .dark-theme .text-warning {
        color: #F6AD55 !important;
    }
    .dark-theme .progress-bar.bg-info {
        background-color: #4FD1C5 !important;
    }
    .dark-theme .progress-bar.bg-success {
        background-color: #38B2AC !important;
    }
    .dark-theme .table {
        color: #E2E8F0;
    }
    .dark-theme .table-striped > tbody > tr:nth-of-type(odd) {
        background-color: rgba(255, 255, 255, 0.05);
    }
    .dark-theme .form-text {
        color: #A0AEC0;
    }
    .dark-theme .interval-summary {
        background-color: #252525;
    }
    .dark-theme .interval-summary:hover {
        background-color: #2D2D2D;
    }
    .dark-theme .card.bg-light {
        background-color: #252525 !important;
    }
    .dark-theme .alert-info {
        background-color: rgba(79, 209, 197, 0.15);
        color: #E2E8F0;
        border-color: rgba(79, 209, 197, 0.4);
    }
    .theme-toggle {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }
</style>

<div class="container-fluid @(isDarkTheme ? "dark-theme" : "")">
    <button @onclick="ToggleTheme" class="btn btn-sm theme-toggle @(isDarkTheme ? "btn-light" : "btn-dark")">
        <i class="bi @(isDarkTheme ? "bi-sun" : "bi-moon")"></i>
        @(isDarkTheme ? "Light Mode" : "Dark Mode")
    </button>
    <div class="row">
        <div class="col-12">
            <h3>@Title</h3>
        </div>
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header @(isDarkTheme ? "" : "bg-primary text-white")">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-calculator"></i> @Title
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@calculatorModel" OnValidSubmit="@Calculate" OnFieldChanged="OnFieldChanged" FormName="SavingsCalculatorForm">
                        <DataAnnotationsValidator />
                        <!-- All form fields, cards, and controls from SavingsPlanner.razor -->
                        <!-- ...copy the full form UI here... -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Initial Amount ($)</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTaxableAmount" class="form-label">Post Tax(Post-tax)</label>
                                        <FormattedInputNumber id="initialTaxableAmount" class="form-control" 
                                               @bind-value="calculatorModel.InitialTaxableAmount" />
                                        <small class="form-text">Bank or Regular brokerage account</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTraditionalAmount" class="form-label">Traditional (Pre-tax)</label>
                                        <FormattedInputNumber id="initialTraditionalAmount" class="form-control" 
                                               @bind-value="calculatorModel.InitialTraditionalAmount" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialRothAmount" class="form-label">Roth (Post-tax)</label>
                                        <FormattedInputNumber id="initialRothAmount" class="form-control" 
                                               @bind-value="calculatorModel.InitialRothAmount" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Initial: $@(calculatorModel.InitialTaxableAmount + calculatorModel.InitialTraditionalAmount + calculatorModel.InitialRothAmount)</small>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Monthly Contributions</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTaxableContribution" class="form-label">Post Tax(Post-tax)</label>
                                        <FormattedInputNumber id="monthlyTaxableContribution" class="form-control" 
                                               @bind-value="calculatorModel.MonthlyTaxableContribution" />
                                        <small class="form-text">Regular brokerage account</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTraditionalContribution" class="form-label">Traditional (Pre-tax)</label>
                                        <FormattedInputNumber id="monthlyTraditionalContribution" class="form-control" 
                                               @bind-value="calculatorModel.MonthlyTraditionalContribution" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyRothContribution" class="form-label">Roth (Post-tax)</label>
                                        <FormattedInputNumber id="monthlyRothContribution" class="form-control" 
                                               @bind-value="calculatorModel.MonthlyRothContribution" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Monthly: $@(calculatorModel.MonthlyTaxableContribution + calculatorModel.MonthlyTraditionalContribution + calculatorModel.MonthlyRothContribution)</small>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Annual Growth Rate (%)</h5>
                                    </div>
                                    <div class="card-body">
                                        <input type="number" id="annualGrowthRate" class="form-control" 
                                               @bind-value="calculatorModel.AnnualGrowthRate" 
                                               @oninput="@(e => { if (autoCalculate) OnInputChanged(); })"
                                               step="0.1" />
                                        <ValidationMessage For="@(() => calculatorModel.AnnualGrowthRate)" class="text-danger" />
                                        <small class="form-text">Enter as percentage (e.g., 7 for 7%)</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Compounding Frequency</h5>
                                    </div>
                                    <div class="card-body">
                                        <input type="text" id="compoundingFrequency" class="form-control" value="Monthly" readonly />
                                        <small class="form-text">Interest is compounded monthly</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Retirement Timeline</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="currentAge" class="form-label">Current Age</label>
                                        <input type="number" id="currentAge" class="form-control" 
                                               @bind-value="calculatorModel.CurrentAge" 
                                               @oninput="@(e => { if (autoCalculate) OnInputChanged(); })" />
                                        <ValidationMessage For="@(() => calculatorModel.CurrentAge)" class="text-danger" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="retirementAge" class="form-label">Retirement Age</label>
                                        <input type="number" id="retirementAge" class="form-control" 
                                               @bind-value="calculatorModel.RetirementAge" 
                                               @oninput="@(e => { if (autoCalculate) OnInputChanged(); })" />
                                        <ValidationMessage For="@(() => calculatorModel.RetirementAge)" class="text-danger" />
                                        <small class="form-text">Most people retire between 60-67</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="years" class="form-label">Years Until Retirement</label>
                                        <input type="text" id="years" class="form-control bg-light" value="@calculatorModel.Years" readonly />
                                        <small class="form-text">Automatically calculated</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Investment Settings</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Post TaxAccount Income Type</label>
                                        <select class="form-control" @bind="calculatorModel.TaxableIncomeType" @bind:after="HandleSelectChange">
                                            <option value="@SavingsPlanner.IncomeType.MixedInvestment">Mixed Investment (default mix)</option>
                                            <option value="@SavingsPlanner.IncomeType.MostlyDividends">Mostly Dividends</option>
                                            <option value="@SavingsPlanner.IncomeType.MostlyLongTermGains">Mostly Long-Term Capital Gains</option>
                                            <option value="@SavingsPlanner.IncomeType.MostlyInterest">Mostly Interest/Short-Term Gains</option>
                                        </select>
                                        <div class="form-text">This affects how income from Post Taxinvestments is taxed annually</div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label fw-bold">Tax Bracket</label>
                                        <select class="form-control" @bind="calculatorModel.TaxBracket" @bind:after="HandleSelectChange">
                                            <option value="@SavingsPlanner.TaxBracket.Low">Low (10-12% ordinary, 0% long-term)</option>
                                            <option value="@SavingsPlanner.TaxBracket.Medium">Medium (22-24% ordinary, 15% long-term)</option>
                                            <option value="@SavingsPlanner.TaxBracket.High">High (32-35% ordinary, 20% long-term)</option>
                                        </select>
                                        <div class="form-text">Your current federal income tax bracket</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex align-items-center mb-3">
                            <div class="form-check me-auto">
                                <input class="form-check-input" type="checkbox" id="autoCalculate" @bind="autoCalculate" />
                                <label class="form-check-label" for="autoCalculate">
                                    Auto-calculate (updates immediately as you type)
                                </label>
                            </div>
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@autoCalculate">
                                <i class="bi bi-calculator"></i> Calculate Savings
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            @if (results != null)
            {
                <!-- Results UI copied from SavingsPlanner.razor -->
                <!-- ...all results cards, breakdowns, tables, etc... -->
                @* Copy the entire results markup from SavingsPlanner.razor here *@
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Savings";
    private bool isDarkTheme = false;
    private bool autoCalculate = false;
    private System.Timers.Timer? debounceTimer;
    public SavingsPlanner.SavingsCalculatorModel calculatorModel { get; set; } = new();
    private SavingsPlanner.SavingsResults? results;
    private List<SavingsPlanner.YearlyBreakdown> yearlyBreakdown = new();
    private List<SavingsPlanner.IntervalSummary> intervalSummaries = new();
    private HashSet<int> expandedIntervals = new();
    private bool isPlanSummaryExpanded = true;
    private bool isSavingsBreakdownExpanded = true;

    // Use a simple key for local storage persistence
    private string LocalStorageKey => Title switch
    {
        "Your Savings" => "FamilySavingsPlanner_yours",
        "Partner's Savings" => "FamilySavingsPlanner_partner",
        _ => $"FamilySavingsPlanner_{Title.Replace(" ", "_")}"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Try to load from localStorage (JS interop is allowed here)
            var savedJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", LocalStorageKey);
            if (!string.IsNullOrEmpty(savedJson))
            {
                try
                {
                    calculatorModel = System.Text.Json.JsonSerializer.Deserialize<SavingsPlanner.SavingsCalculatorModel>(savedJson) ?? new SavingsPlanner.SavingsCalculatorModel();
                }
                catch { calculatorModel = new SavingsPlanner.SavingsCalculatorModel(); }
            }
            else
            {
                calculatorModel = new SavingsPlanner.SavingsCalculatorModel
                {
                    CurrentAge = 30,
                    RetirementAge = 65,
                    InitialTaxableAmount = 400,
                    InitialTraditionalAmount = 400,
                    InitialRothAmount = 200,
                    MonthlyTaxableContribution = 200,
                    MonthlyTraditionalContribution = 200,
                    MonthlyRothContribution = 100,
                    AnnualGrowthRate = 7,
                    UseTaxAdvantaged = true,
                    TaxableIncomeType = SavingsPlanner.IncomeType.MixedInvestment,
                    TaxBracket = SavingsPlanner.TaxBracket.Medium
                };
            }
            await CalculateAsync();
            StateHasChanged();
        }
    }
    protected override Task OnInitializedAsync()
    {
        debounceTimer = new System.Timers.Timer(500);
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += (sender, args) => { InvokeAsync(() => { Calculate(); }); };
        return Task.CompletedTask;
    }

    private void ToggleTheme() => isDarkTheme = !isDarkTheme;

    private async void OnInputChanged()
    {
        if (autoCalculate) { debounceTimer?.Stop(); debounceTimer?.Start(); }
        await SaveModelAsync();
    }
    private async void HandleSelectChange()
    {
        if (autoCalculate) { OnInputChanged(); }
        await SaveModelAsync();
    }
    private async Task OnFieldChanged(EditContext context)
    {
        // Save to local storage on any field change
        var json = System.Text.Json.JsonSerializer.Serialize(calculatorModel);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, json);
    }
    private async Task SaveModelAsync()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(calculatorModel);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, json);
    }
    private async Task CalculateAsync()
    {
        var calculator = new SavingsPlanner.SavingsCalculationEngine();
        results = calculator.Calculate(calculatorModel);
        yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);
        if (calculatorModel.Years > 10)
        {
            intervalSummaries = CreateIntervalSummaries(yearlyBreakdown);
            expandedIntervals.Clear();
            if (intervalSummaries.Count > 0) expandedIntervals.Add(intervalSummaries[0].StartYear);
            if (intervalSummaries.Count > 1) expandedIntervals.Add(intervalSummaries[1].StartYear);
        }
        StateHasChanged();
    }
    private void Calculate() { CalculateAsync(); }
    private List<SavingsPlanner.IntervalSummary> CreateIntervalSummaries(List<SavingsPlanner.YearlyBreakdown> breakdown)
    {
        int startingAge = calculatorModel.CurrentAge;
        int roundedStartAge = (int)Math.Ceiling(startingAge / 5.0) * 5;
        return breakdown
            .Select((y, index) => new { Year = y, Age = calculatorModel.CurrentAge + index + 1 })
            .GroupBy(item => ((item.Age - 1) / 5) * 5 + 5)
            .Select(g => new SavingsPlanner.IntervalSummary
            {
                StartYear = g.First().Year.Year,
                EndYear = g.Last().Year.Year,
                StartAge = g.Key - 5,
                EndAge = Math.Min(g.Key, calculatorModel.RetirementAge),
                FinalBalance = g.Last().Year.Balance,
                TotalGrowth = g.Sum(item => item.Year.InterestEarned),
                TotalContributions = g.Sum(item => item.Year.ContributionsThisYear),
                YearlyDetails = g.Select(item => item.Year).ToList(),
                MilestoneAchieved = GetMilestone(g.Last().Year.Balance)
            })
            .ToList();
    }
    private string GetMilestone(decimal balance)
    {
        if (balance >= 1000000) return "?? Millionaire!";
        if (balance >= 500000) return "?? Half Million!";
        if (balance >= 250000) return "?? Quarter Million!";
        if (balance >= 100000) return "?? First $100K!";
        if (balance >= 50000) return "?? $50K Milestone!";
        return "";
    }
    private void ToggleInterval(int startYear)
    {
        if (expandedIntervals.Contains(startYear)) expandedIntervals.Remove(startYear);
        else expandedIntervals.Add(startYear);
        StateHasChanged();
    }
    private void TogglePlanSummary() { isPlanSummaryExpanded = !isPlanSummaryExpanded; StateHasChanged(); }
    private void ToggleSavingsBreakdown() { isSavingsBreakdownExpanded = !isSavingsBreakdownExpanded; StateHasChanged(); }
}
