@using Microsoft.AspNetCore.Components.Forms
@using FinPlan.Web.Components
@using static FinPlan.Web.Components.Pages.SavingsPlanner
@code {
    // Use only SavingsPlanner types for all models and engine
    private SavingsCalculatorModel calculatorModel = new SavingsCalculatorModel();
    private SavingsResults results = new SavingsResults();
    private List<YearlyBreakdown> yearlyBreakdown = new List<YearlyBreakdown>();
    [Parameter] public string Title { get; set; } = "Savings";
    private bool useLocalStorage = true;
    private string userGuid = "";

    // Debug variables
    private bool showDebugInfo = true; // Always show debug info
    private bool dataLoaded = false;
    private string lastLoadAttempt = "";
    private string loadError = "";

    // UI state
    private bool isDarkTheme = false;
    private bool autoCalculate = false;
    private System.Timers.Timer? debounceTimer;
    private bool isSavingsBreakdownExpanded = true;
    private bool showLeftDebugWindow = true;
    public static List<string> DebugEntries { get; set; } = new();

    private bool isPlanSummaryExpanded = true;

    private void ToggleTheme() => isDarkTheme = !isDarkTheme;
    private void ToggleDebug() { /* No-op, always on */ }
    private string LocalStorageKey => Title switch
    {
        "Your Savings" => "TestSavings_yours",
        "Partner's Savings" => "TestSavings_partner",
        _ => $"TestSavings_{Title.Replace(" ", "_")}"
    };
}

@using System.ComponentModel.DataAnnotations
@using FinPlan.Web.Components
@using FinPlan.Web.Services
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@rendermode InteractiveServer

<style>
    /* Dark theme styles */
    .dark-theme {
        background-color: #121212;
        color: #E2E8F0;
    }

        .dark-theme .card {
            background-color: #1E1E1E;
            border-color: #333;
        }

        .dark-theme .card-header {
            background-color: #252525 !important;
            border-bottom-color: #333;
            color: #E2E8F0 !important;
        }

        .dark-theme .form-control {
            background-color: #252525;
            border-color: #333;
            color: #E2E8F0;
        }

            .dark-theme .form-control:focus {
                background-color: #2D2D2D;
                box-shadow: 0 0 0 0.25rem rgba(109, 93, 252, 0.25);
            }

        .dark-theme .btn-primary {
            background-color: #6D5DFC;
            border-color: #6D5DFC;
        }

            .dark-theme .btn-primary:hover {
                background-color: #5A4AE3;
                border-color: #5A4AE3;
            }

        .dark-theme .text-primary {
            color: #6D5DFC !important;
        }

        .dark-theme .text-success {
            color: #38B2AC !important;
        }

        .dark-theme .text-info {
            color: #4FD1C5 !important;
        }

        .dark-theme .text-warning {
            color: #F6AD55 !important;
        }

        .dark-theme .progress-bar.bg-info {
            background-color: #4FD1C5 !important;
        }

        .dark-theme .progress-bar.bg-success {
            background-color: #38B2AC !important;
        }

        .dark-theme .table {
            color: #E2E8F0;
        }

        .dark-theme .table-striped > tbody > tr:nth-of-type(odd) {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .dark-theme .form-text {
            color: #A0AEC0;
        }

        .dark-theme .interval-summary {
            background-color: #252525;
        }

            .dark-theme .interval-summary:hover {
                background-color: #2D2D2D;
            }

        .dark-theme .card.bg-light {
            background-color: #252525 !important;
        }

        .dark-theme .alert-info {
            background-color: rgba(79, 209, 197, 0.15);
            color: #E2E8F0;
            border-color: rgba(79, 209, 197, 0.4);
        }

    .theme-toggle {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }

    /* Debug info */
    .debug-info {
        position: fixed;
        bottom: 10px;
        left: 10px;
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-size: 12px;
        z-index: 1000;
    }

    .left-debug-window {
        position: fixed;
        top: 80px;
        left: 10px;
        width: 260px;
        background: rgba(0,0,0,0.85);
        color: #fff;
        padding: 12px;
        border-radius: 8px;
        font-size: 13px;
        z-index: 2000;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        max-height: 60vh;
        overflow-y: auto;
    }
</style>

<div class="container-fluid @(isDarkTheme ? "dark-theme" : "")">
    <button @onclick="ToggleTheme" class="btn btn-sm theme-toggle @(isDarkTheme ? "btn-light" : "btn-dark")">
        <i class="bi @(isDarkTheme ? "bi-sun" : "bi-moon")"></i>
        @(isDarkTheme ? "Light Mode" : "Dark Mode")
    </button>

    <!-- Debug Info -->
    @if (showDebugInfo)
    {
        <div class="debug-info">
            <div>LocalStorage Key: @LocalStorageKey</div>
            <div>Data Loaded: @dataLoaded</div>
            <div>Current Age: @calculatorModel.CurrentAge</div>
            <div>Initial Taxable: @calculatorModel.InitialTaxableAmount</div>
            <div>Last Load Attempt: @lastLoadAttempt</div>
            <div>Load Error: @loadError</div>
        </div>
    }

    @if (showLeftDebugWindow)
    {
        <div class="left-debug-window">
            <b>Debug Window</b>
            <ul style="padding-left: 1em;">
                @foreach (var entry in DebugEntries.TakeLast(10).Reverse())
                {
                    <li>@entry</li>
                }
            </ul>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <h3>@Title</h3>
            <button @onclick="ToggleDebug" class="btn btn-sm btn-secondary">Toggle Debug</button>
            <button @onclick="ClearLocalStorage" class="btn btn-sm btn-warning">Clear Saved Data</button>
        </div>
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header @(isDarkTheme ? "" : "bg-primary text-white")">
                    <h3 class="card-title mb-0">
                        <i class="bi bi-calculator"></i> @Title
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@calculatorModel" OnValidSubmit="@Calculate" OnFieldChanged="OnFieldChanged" FormName="SavingsCalculatorForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Initial Amount ($)</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTaxableAmount" class="form-label">Post Tax</label>
                                        <FormattedInputNumber id="initialTaxableAmount" class="form-control"
                                               @bind-value="calculatorModel.InitialTaxableAmount" />
                                        <small class="form-text">Bank or Regular brokerage account</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialTraditionalAmount" class="form-label">Traditional (Pre-tax)</label>
                                        <FormattedInputNumber id="initialTraditionalAmount" class="form-control"
                                               @bind-value="calculatorModel.InitialTraditionalAmount" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="initialRothAmount" class="form-label">Roth (Post-tax)</label>
                                        <FormattedInputNumber id="initialRothAmount" class="form-control"
                                               @bind-value="calculatorModel.InitialRothAmount" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Initial: $@(calculatorModel.InitialTaxableAmount + calculatorModel.InitialTraditionalAmount + calculatorModel.InitialRothAmount)</small>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Monthly Contributions</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTaxableContribution" class="form-label">Post Tax</label>
                                        <FormattedInputNumber id="monthlyTaxableContribution" class="form-control"
                                               @bind-value="calculatorModel.MonthlyTaxableContribution" />
                                        <small class="form-text">Regular brokerage account</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyTraditionalContribution" class="form-label">Traditional (Pre-tax)</label>
                                        <FormattedInputNumber id="monthlyTraditionalContribution" class="form-control"
                                               @bind-value="calculatorModel.MonthlyTraditionalContribution" />
                                        <small class="form-text">401k, Traditional IRA</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="monthlyRothContribution" class="form-label">Roth (Post-tax)</label>
                                        <FormattedInputNumber id="monthlyRothContribution" class="form-control"
                                               @bind-value="calculatorModel.MonthlyRothContribution" />
                                        <small class="form-text">Roth 401k, Roth IRA</small>
                                    </div>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">Total Monthly: $@(calculatorModel.MonthlyTaxableContribution + calculatorModel.MonthlyTraditionalContribution + calculatorModel.MonthlyRothContribution)</small>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Annual Growth Rate (%)</h5>
                                    </div>
                                    <div class="card-body">
                                        <input type="number" id="annualGrowthRate" class="form-control"
                                               @bind="calculatorModel.AnnualGrowthRate"
                                               @oninput="@(e => OnFieldDebugChanged(nameof(calculatorModel.AnnualGrowthRate), e))"
                                               @onblur="@(e => OnFieldDebugBlur(nameof(calculatorModel.AnnualGrowthRate), e))"
                                               step="0.1" />
                                        <ValidationMessage For="@(() => calculatorModel.AnnualGrowthRate)" class="text-danger" />
                                        <small class="form-text">Enter as percentage (e.g., 7 for 7%)</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-header">
                                        <h5 class="mb-0">Current/Retirement Age</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-6">
                                                <label class="form-label">Current</label>
                                                <input type="number" class="form-control"
                                                       @bind="calculatorModel.CurrentAge"
                                                       @oninput="@(e => OnFieldDebugChanged(nameof(calculatorModel.CurrentAge), e))"
                                                       @onblur="@(e => OnFieldDebugBlur(nameof(calculatorModel.CurrentAge), e))" />
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label">Retirement</label>
                                                <input type="number" class="form-control"
                                                       @bind="calculatorModel.RetirementAge"
                                                       @oninput="@(e => OnFieldDebugChanged(nameof(calculatorModel.RetirementAge), e))"
                                                       @onblur="@(e => OnFieldDebugBlur(nameof(calculatorModel.RetirementAge), e))" />
                                            </div>
                                        </div>
                                        <small class="form-text">Years: @calculatorModel.Years</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Investment Settings</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="incomeType" class="form-label">Investment Income Type</label>
                                        <select id="incomeType" class="form-select" @bind="calculatorModel.TaxableIncomeType">
                                            @foreach (var value in Enum.GetValues(typeof(IncomeType)))
                                            {
                                                <option value="@value">@GetIncomeTypeDescription((IncomeType)value)</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="taxBracket" class="form-label">Tax Bracket</label>
                                        <select id="taxBracket" class="form-select" @bind="calculatorModel.TaxBracket">
                                            @foreach (var value in Enum.GetValues(typeof(TaxBracket)))
                                            {
                                                <option value="@value">@GetTaxBracketDescription((TaxBracket)value)</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-3">
                            <div class="card-header">
                                <h5 class="mb-0">Advanced Account Settings</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="useTaxAdvantaged" @bind="calculatorModel.UseTaxAdvantaged" />
                                            <label class="form-check-label" for="useTaxAdvantaged">
                                                Use Tax-Advantaged Accounts
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="annualTaxDeferredContribution" class="form-label">Annual Tax-Deferred Contribution</label>
                                        <FormattedInputNumber id="annualTaxDeferredContribution" class="form-control"
                                               @bind-value="calculatorModel.AnnualTaxDeferredContribution" />
                                        <small class="form-text">401k, Traditional IRA, etc.</small>
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="annualTaxableContribution" class="form-label">Annual Taxable Contribution</label>
                                        <FormattedInputNumber id="annualTaxableContribution" class="form-control"
                                               @bind-value="calculatorModel.AnnualTaxableContribution" />
                                        <small class="form-text">Brokerage, savings, etc.</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center mb-3">
                            <div class="form-check me-auto">
                                <input class="form-check-input" type="checkbox" id="autoCalculate" @bind="autoCalculate" />
                                <label class="form-check-label" for="autoCalculate">
                                    Auto-calculate
                                </label>
                            </div>
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@autoCalculate">
                                <i class="bi bi-calculator"></i> Calculate
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            @if (results != null)
            {
                <div class="card">
                    <div class="card-header">
                        <h4>Results</h4>
                    </div>
                    <div class="card-body">
                        <p>Final Balance: $@results.FinalAmount.ToString("N0")</p>
                        <p>Total Contributions: $@results.TotalContributions.ToString("N0")</p>
                        <p>Total Growth: $@results.TotalInterestEarned.ToString("N0")</p>
                        <ExportButton Results="results" YearlyBreakdown="yearlyBreakdown" Model="calculatorModel" Text="Export to Excel" CssClass="btn btn-success mt-2" />
                    </div>
                </div>
            }

            @* Breakdown Section: How Your Money Grows *@
            @if (results != null)
            {
                <div class="card mt-3">
                    <div class="card-header" style="cursor: pointer;" @onclick="ToggleSavingsBreakdown">
                        <strong>
                            <i class="bi bi-@(isSavingsBreakdownExpanded ? "chevron-down" : "chevron-right")"></i>
                            ?? How Your Money Grows
                        </strong>
                    </div>
                    @if (isSavingsBreakdownExpanded)
                    {
                        <div class="card-body">
                            You'll contribute <strong>@results.TotalContributions.ToString("C")</strong> over @calculatorModel.Years years, and compound interest will add <strong>@results.TotalInterestEarned.ToString("C")</strong> more!
                            <br /><br />
                            <div>
                                <strong>Account Breakdown:</strong><br />
                                <ul class="mb-0">
                                    <li>Traditional (401k/IRA): <strong>@results.TaxDeferredBalance.ToString("C")</strong></li>
                                    <li>Roth accounts: <strong>@results.RothBalance.ToString("C")</strong></li>
                                    <li>Post Tax accounts: <strong>@results.TaxableBalance.ToString("C")</strong></li>
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            }

            @* Results Section *@
            @if (results != null)
            {
                <div class="card">
                    <div class="card-header @(isDarkTheme ? "" : "bg-success text-white")">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3 class="card-title mb-0">
                                <i class="bi bi-graph-up"></i> Results
                            </h3>
                            <ExportButton Results="results" YearlyBreakdown="yearlyBreakdown" Model="calculatorModel" Text="Export to Excel" CssClass="btn btn-success mt-2" />
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-primary">@results.FinalAmount.ToString("C")</h4>
                                        <p class="mb-0">Final Amount</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-success">@results.TotalInterestEarned.ToString("C")</h4>
                                        <p class="mb-0">Interest Earned</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-info">@results.TotalContributions.ToString("C")</h4>
                                        <p class="mb-0">Total Contributions</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-warning">@calculatorModel.AnnualGrowthRate.ToString("F1")%</h4>
                                        <p class="mb-0">Annual Growth Rate</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="progress mb-3" style="height: 30px;">
                            <div class="progress-bar bg-info" role="progressbar" style="width: @(results.FinalAmount > 0 ? results.TotalContributions / results.FinalAmount * 100 : 0)%">
                                Your Savings
                            </div>
                            <div class="progress-bar bg-success" role="progressbar" style="width: @(results.FinalAmount > 0 ? results.TotalInterestEarned / results.FinalAmount * 100 : 0)%">
                                Growth from Interest
                            </div>
                        </div>
                        @* Income Type Breakdown Progress Bar *@
                        <div class="mt-3 mb-0">
                            <strong>Income Type Breakdown:</strong>
                            <div class="progress mt-1 mb-2" style="height: 20px;">
                                <div class="progress-bar bg-success" role="progressbar" style="width: @(results.TaxableInterestEarned > 0 ? results.QualifiedDividendIncome / results.TaxableInterestEarned * 100 : 0)%" title="Qualified Dividends: @results.QualifiedDividendIncome.ToString("C")">
                                    Qualified
                                </div>
                                <div class="progress-bar bg-info" role="progressbar" style="width: @(results.TaxableInterestEarned > 0 ? results.LongTermCapitalGains / results.TaxableInterestEarned * 100 : 0)%" title="Long-Term Capital Gains: @results.LongTermCapitalGains.ToString("C")">
                                    LTCG
                                </div>
                                <div class="progress-bar bg-warning" role="progressbar" style="width: @(results.TaxableInterestEarned > 0 ? results.NonQualifiedIncome / results.TaxableInterestEarned * 100 : 0)%" title="Non-Qualified Income: @results.NonQualifiedIncome.ToString("C")">
                                    Interest
                                </div>
                                <div class="progress-bar bg-danger" role="progressbar" style="width: @(results.TaxableInterestEarned > 0 ? results.ShortTermCapitalGains / results.TaxableInterestEarned * 100 : 0)%" title="Short-Term Capital Gains: @results.ShortTermCapitalGains.ToString("C")">
                                    STCG
                                </div>
                            </div>
                            <small>Effective tax rate on Post Tax investments: <strong>@results.EffectiveTaxRate.ToString("F1")%</strong></small>
                        </div>
                        @* Milestone Achievements *@
                        <div class="mt-3">
                            <strong>Milestone:</strong>
                            <span>@GetMilestone(results.FinalAmount)</span>
                        </div>
                    </div>
                </div>
            }

            @* Plan Summary Section *@
            @if (results != null)
            {
                <div class="card mb-3">
                    <div class="card-header" style="cursor: pointer;" @onclick="TogglePlanSummary">
                        <h5 class="mb-0">
                            <i class="bi bi-@(isPlanSummaryExpanded ? "chevron-down" : "chevron-right")"></i>
                            Your Retirement Plan Summary
                        </h5>
                    </div>
                    @if (isPlanSummaryExpanded)
                    {
                        <div class="card-body">
                            <ul class="list-unstyled mb-0">
                                <li><strong>Current Age:</strong> @calculatorModel.CurrentAge years old</li>
                                <li><strong>Target Retirement Age:</strong> @calculatorModel.RetirementAge years old</li>
                                <li><strong>Years to Save:</strong> @calculatorModel.Years years</li>
                                <li><strong>Initial Post Tax Amount:</strong> @calculatorModel.InitialTaxableAmount.ToString("C")</li>
                                <li><strong>Initial Traditional Amount:</strong> @calculatorModel.InitialTraditionalAmount.ToString("C")</li>
                                <li><strong>Initial Roth Amount:</strong> @calculatorModel.InitialRothAmount.ToString("C")</li>
                                <li><strong>Total Initial Amount:</strong> @(calculatorModel.InitialTaxableAmount + calculatorModel.InitialTraditionalAmount + calculatorModel.InitialRothAmount).ToString("C")</li>
                                <li><strong>Monthly Post Tax Contribution:</strong> @calculatorModel.MonthlyTaxableContribution.ToString("C")</li>
                                <li><strong>Monthly Traditional Contribution:</strong> @calculatorModel.MonthlyTraditionalContribution.ToString("C")</li>
                                <li><strong>Monthly Roth Contribution:</strong> @calculatorModel.MonthlyRothContribution.ToString("C")</li>
                                <li><strong>Total Monthly Contribution:</strong> @(calculatorModel.MonthlyTaxableContribution + calculatorModel.MonthlyTraditionalContribution + calculatorModel.MonthlyRothContribution).ToString("C")</li>
                                <li><strong>Investment Income Type:</strong> @GetIncomeTypeDescription(calculatorModel.TaxableIncomeType)</li>
                                <li><strong>Tax Bracket:</strong> @GetTaxBracketDescription(calculatorModel.TaxBracket)</li>
                                <li><strong>Total Taxes Paid:</strong> @results.TotalTaxesPaid.ToString("C")</li>
                                <li><strong>Expected Growth Rate:</strong> @calculatorModel.AnnualGrowthRate% annually</li>
                                <li><strong>Compounding:</strong> Monthly</li>
                            </ul>
                        </div>
                    }
                </div>
            }

            @* Year-by-Year Table with Tax Rate Column *@
            @if (yearlyBreakdown.Any())
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-graph-up-arrow"></i> Your Age-Based Retirement Journey
                            @if (calculatorModel.Years > 10)
                            {
                                <small class="text-muted ms-2">Click age ranges to see yearly details</small>
                            }
                        </h5>
                    </div>
                    <div class="card-body" style="max-height: 700px; overflow-y: auto;">
                        @if (calculatorModel.Years > 10)
                        {
                            @foreach (var interval in CreateIntervalSummaries(yearlyBreakdown))
                            {
                                var isExpanded = expandedIntervals.Contains(interval.StartYear);
                                <div class="interval-group mb-3">
                                    <div class="interval-summary p-3 border rounded @(isExpanded ? "border-primary" : "")" style="cursor: pointer; transition: all 0.2s ease;" @onclick="() => ToggleInterval(interval.StartYear)">
                                        <div class="row align-items-center">
                                            <div class="col-md-3">
                                                <h6 class="mb-1">
                                                    <i class="bi bi-@(isExpanded ? "chevron-down" : "chevron-right")"></i>
                                                    Ages @interval.StartAge-@interval.EndAge
                                                </h6>
                                                @if (!string.IsNullOrEmpty(interval.MilestoneAchieved))
                                                {
                                                    <small class="text-success fw-bold">@interval.MilestoneAchieved</small>
                                                }
                                            </div>
                                            <div class="col-md-3">
                                                <strong>@interval.FinalBalance.ToString("C")</strong>
                                                <br /><small class="text-muted">Final Balance</small>
                                            </div>
                                            <div class="col-md-3">
                                                <span class="text-success">+@interval.TotalGrowth.ToString("C")</span>
                                                <br /><small class="text-muted">Interest Earned</small>
                                            </div>
                                            <div class="col-md-3">
                                                <span class="text-info">@interval.TotalContributions.ToString("C")</span>
                                                <br /><small class="text-muted">You Contributed</small>
                                            </div>
                                        </div>
                                    </div>
                                    @if (isExpanded)
                                    {
                                        <div class="yearly-details mt-2 ms-3 border-start border-primary ps-3">
                                            <div class="table-responsive">
                                                <table class="table table-sm">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th>Year/Age</th>
                                                            <th>Balance</th>
                                                            <th>Interest</th>
                                                            <th>Contributions</th>
                                                            <th>Taxable</th>
                                                            <th>Traditional</th>
                                                            <th>Roth</th>
                                                            <th>Taxes</th>
                                                            <th>Tax Rates</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var year in interval.YearlyDetails)
                                                        {
                                                            <tr>
                                                                <td>Year @year.Year (@(calculatorModel.CurrentAge + year.Year))</td>
                                                                <td>@year.Balance.ToString("C")</td>
                                                                <td class="text-success">@year.InterestEarned.ToString("C")</td>
                                                                <td class="text-info">@year.ContributionsThisYear.ToString("C")</td>
                                                                <td>@year.TaxableBalance.ToString("C")</td>
                                                                <td>@year.TaxDeferredBalance.ToString("C")</td>
                                                                <td>@year.RothBalance.ToString("C")</td>
                                                                <td class="text-danger">@year.TaxesPaid.ToString("C")</td>
                                                                <td>
                                                                    <span title="Applied to: @GetTaxBreakdownTooltip(year, calculatorModel.TaxableIncomeType)">@GetTaxRatesDisplay(calculatorModel.TaxBracket)</span>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                    <thead>
                                        <tr>
                                            <th>Year/Age</th>
                                            <th>Balance</th>
                                            <th>Interest</th>
                                            <th>Contributions</th>
                                            <th>Taxable</th>
                                            <th>Traditional</th>
                                            <th>Roth</th>
                                            <th>Taxes Paid</th>
                                            <th>Tax Rates</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var year in yearlyBreakdown)
                                        {
                                            <tr>
                                                <td>Year @year.Year (@(calculatorModel.CurrentAge + year.Year))</td>
                                                <td>@year.Balance.ToString("C")</td>
                                                <td>@year.InterestEarned.ToString("C")</td>
                                                <td>@year.ContributionsThisYear.ToString("C")</td>
                                                <td>@year.TaxableBalance.ToString("C")</td>
                                                <td>@year.TaxDeferredBalance.ToString("C")</td>
                                                <td>@year.RothBalance.ToString("C")</td>
                                                <td class="text-danger">@year.TaxesPaid.ToString("C")</td>
                                                <td>
                                                    <span title="Applied to: @GetTaxBreakdownTooltip(year, calculatorModel.TaxableIncomeType)">
                                                        @GetTaxRatesDisplay(calculatorModel.TaxBracket)
                                                    </span>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private async Task ClearLocalStorage()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", LocalStorageKey);
        calculatorModel = new SavingsCalculatorModel();
        dataLoaded = false;
        loadError = "Data cleared";
        StateHasChanged();
    }

    private async Task OnInputChanged()
    {
        if (autoCalculate)
        {
            debounceTimer?.Stop();
            debounceTimer?.Start();
        }
        await SaveModelAsync();
    }

    private async Task OnFieldChanged(EditContext context)
    {
        await SaveModelAsync();
    }

    private async Task SaveModelAsync()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(calculatorModel);
            if (useLocalStorage)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, json);
                loadError = $"Saved to localStorage: {LocalStorageKey}";
            }
            else
            {
                var client = HttpClientFactory.CreateClient();
                var apiUrl = "https://localhost:7330/api/FinPlan/save";
                var payload = new {
                    UserGuid = userGuid,
                    CalculatorType = LocalStorageKey,
                    Data = json
                };
                var response = await client.PostAsJsonAsync(apiUrl, payload);
                if (response.IsSuccessStatusCode)
                {
                    loadError = $"Saved to API: {apiUrl}";
                }
                else
                {
                    var errorMsg = await response.Content.ReadAsStringAsync();
                    loadError = $"API save failed: {response.StatusCode} - {errorMsg}";
                }
            }
        }
        catch (Exception ex)
        {
            loadError = $"Save error: {ex.Message}";
        }
    }

    private async Task CalculateAsync()
    {
        var calculator = new SavingsCalculationEngine();
        results = calculator.Calculate(calculatorModel);
        yearlyBreakdown = calculator.GetYearlyBreakdown(calculatorModel);
        StateHasChanged();
    }
    private void Calculate() => CalculateAsync();

    private void AddDebugEntry(string field, string eventType, object? value)
    {
        DebugEntries.Add($"[{DateTime.Now:HH:mm:ss}] {field} {eventType}: {value}");
        StateHasChanged();
    }

    private async void OnFieldDebugChanged(string field, ChangeEventArgs e)
    {
        AddDebugEntry(field, "Changed", e.Value);
        await SaveModelAsync();
    }

    private async void OnFieldDebugBlur(string field, FocusEventArgs e)
    {
        var value = typeof(SavingsCalculatorModel).GetProperty(field)?.GetValue(calculatorModel);
        AddDebugEntry(field, "Blur", value);
        await SaveModelAsync();
    }

    private string GetIncomeTypeDescription(IncomeType incomeType) => incomeType switch
    {
        IncomeType.MixedInvestment => "Mixed (Balanced portfolio)",
        IncomeType.MostlyDividends => "Mostly Dividends (Dividend-focused)",
        IncomeType.MostlyLongTermGains => "Mostly Long-Term Gains (Buy and hold)",
        IncomeType.MostlyInterest => "Mostly Interest/Short-Term (Fixed income/active)",
        _ => "Mixed Investment"
    };
    private string GetTaxBracketDescription(TaxBracket bracket) => bracket switch
    {
        TaxBracket.Low => "Low (10-12% ordinary, 0% long-term)",
        TaxBracket.Medium => "Medium (22-24% ordinary, 15% long-term)",
        TaxBracket.High => "High (32-35% ordinary, 20% long-term)",
        _ => "Medium Tax Bracket"
    };

    private string GetTaxRatesDisplay(TaxBracket bracket)
    {
        return bracket switch
        {
            TaxBracket.Low => "12% / 0% (Ord/LT)",
            TaxBracket.Medium => "24% / 15% (Ord/LT)",
            TaxBracket.High => "35% / 20% (Ord/LT)",
            _ => "24% / 15% (Ord/LT)"
        };
    }
    private string GetTaxBreakdownTooltip(YearlyBreakdown year, IncomeType incomeType)
    {
        var sb = new System.Text.StringBuilder();
        decimal totalInterest = year.NonQualifiedIncome + year.QualifiedDividends + year.LongTermGains + year.ShortTermGains;
        if (totalInterest > 0)
        {
            decimal ordinaryIncome = year.NonQualifiedIncome + year.ShortTermGains;
            decimal ordinaryPercent = Math.Round((ordinaryIncome / totalInterest) * 100);
            sb.AppendLine($"Ordinary Income (Interest & ST Gains): {ordinaryIncome:C} ({ordinaryPercent}%)");
            decimal ltRateIncome = year.QualifiedDividends + year.LongTermGains;
            decimal ltPercent = Math.Round((ltRateIncome / totalInterest) * 100);
            sb.AppendLine($"Long-Term Rate Income (Dividends & LT Gains): {ltRateIncome:C} ({ltPercent}%)");
        }
        return sb.ToString();
    }
    private string GetMilestone(decimal balance)
    {
        if (balance >= 1000000) return "?? Millionaire!";
        if (balance >= 500000) return "?? Half Million!";
        if (balance >= 250000) return "?? Quarter Million!";
        if (balance >= 100000) return "?? First $100K!";
        if (balance >= 50000) return "?? $50K Milestone!";
        return "";
    }
    private void TogglePlanSummary()
    {
        isPlanSummaryExpanded = !isPlanSummaryExpanded;
        StateHasChanged();
    }

    // Fix: Add ToggleSavingsBreakdown method to match SavingsPlanner.razor
    private void ToggleSavingsBreakdown()
    {
        isSavingsBreakdownExpanded = !isSavingsBreakdownExpanded;
        StateHasChanged();
    }
}

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Retirement Timeline</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4 mb-3">
                <label for="currentAge" class="form-label">Current Age</label>
                <input type="number" id="currentAge" class="form-control"
                       @bind="calculatorModel.CurrentAge"
                       @oninput="@(e => OnFieldDebugChanged(nameof(calculatorModel.CurrentAge), e))"
                       @onblur="@(e => OnFieldDebugBlur(nameof(calculatorModel.CurrentAge), e))" />
            </div>
            <div class="col-md-4 mb-3">
                <label for="retirementAge" class="form-label">Retirement Age</label>
                <input type="number" id="retirementAge" class="form-control"
                       @bind="calculatorModel.RetirementAge"
                       @oninput="@(e => OnFieldDebugChanged(nameof(calculatorModel.RetirementAge), e))"
                       @onblur="@(e => OnFieldDebugBlur(nameof(calculatorModel.RetirementAge), e))" />
            </div>
            <div class="col-md-4 mb-3">
                <label for="yearsUntilRetirement" class="form-label">Years Until Retirement</label>
                <input type="text" id="yearsUntilRetirement" class="form-control bg-light" value="@calculatorModel.Years" readonly />
            </div>
        </div>
    </div>
</div>

@* Interval Summaries for Long-Term Plans *@
@if (yearlyBreakdown.Any() && calculatorModel.Years > 10)
{
    @foreach (var interval in CreateIntervalSummaries(yearlyBreakdown))
    {
        var isExpanded = expandedIntervals.Contains(interval.StartYear);
        <div class="interval-group mb-3">
            <div class="interval-summary p-3 border rounded @(isExpanded ? "border-primary" : "")" style="cursor: pointer; transition: all 0.2s ease;" @onclick="() => ToggleInterval(interval.StartYear)">
                <div class="row align-items-center">
                    <div class="col-md-3">
                        <h6 class="mb-1">
                            <i class="bi bi-@(isExpanded ? "chevron-down" : "chevron-right")"></i>
                            Ages @interval.StartAge-@interval.EndAge
                        </h6>
                        @if (!string.IsNullOrEmpty(interval.MilestoneAchieved))
                        {
                            <small class="text-success fw-bold">@interval.MilestoneAchieved</small>
                        }
                    </div>
                    <div class="col-md-3">
                        <strong>@interval.FinalBalance.ToString("C")</strong>
                        <br /><small class="text-muted">Final Balance</small>
                    </div>
                    <div class="col-md-3">
                        <span class="text-success">+@interval.TotalGrowth.ToString("C")</span>
                        <br /><small class="text-muted">Interest Earned</small>
                    </div>
                    <div class="col-md-3">
                        <span class="text-info">@interval.TotalContributions.ToString("C")</span>
                        <br /><small class="text-muted">You Contributed</small>
                    </div>
                </div>
            </div>
            @if (isExpanded)
            {
                <div class="yearly-details mt-2 ms-3 border-start border-primary ps-3">
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead class="table-light">
                                <tr>
                                    <th>Year/Age</th>
                                    <th>Balance</th>
                                    <th>Interest</th>
                                    <th>Contributions</th>
                                    <th>Taxable</th>
                                    <th>Traditional</th>
                                    <th>Roth</th>
                                    <th>Taxes</th>
                                    <th>Tax Rates</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var year in interval.YearlyDetails)
                                {
                                    <tr>
                                        <td>Year @year.Year (@(calculatorModel.CurrentAge + year.Year))</td>
                                        <td>@year.Balance.ToString("C")</td>
                                        <td class="text-success">@year.InterestEarned.ToString("C")</td>
                                        <td class="text-info">@year.ContributionsThisYear.ToString("C")</td>
                                        <td>@year.TaxableBalance.ToString("C")</td>
                                        <td>@year.TaxDeferredBalance.ToString("C")</td>
                                        <td>@year.RothBalance.ToString("C")</td>
                                        <td class="text-danger">@year.TaxesPaid.ToString("C")</td>
                                        <td>
                                            <span title="Applied to: @GetTaxBreakdownTooltip(year, calculatorModel.TaxableIncomeType)">@GetTaxRatesDisplay(calculatorModel.TaxBracket)</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
}
@code {
    private HashSet<int> expandedIntervals = new();
    private List<IntervalSummary> CreateIntervalSummaries(List<YearlyBreakdown> breakdown)
    {
        int startingAge = calculatorModel.CurrentAge;
        return breakdown
            .Select((y, index) => new { Year = y, Age = calculatorModel.CurrentAge + index + 1 })
            .GroupBy(item => ((item.Age - 1) / 5) * 5 + 5)
            .Select(g => new IntervalSummary
            {
                StartYear = g.First().Year.Year,
                EndYear = g.Last().Year.Year,
                StartAge = g.Key - 5,
                EndAge = Math.Min(g.Key, calculatorModel.RetirementAge),
                FinalBalance = g.Last().Year.Balance,
                TotalGrowth = g.Sum(item => item.Year.InterestEarned),
                TotalContributions = g.Sum(item => item.Year.ContributionsThisYear),
                YearlyDetails = g.Select(item => item.Year).ToList(),
                MilestoneAchieved = GetMilestone(g.Last().Year.Balance)
            })
            .ToList();
    }
    private void ToggleInterval(int startYear)
    {
        if (expandedIntervals.Contains(startYear))
            expandedIntervals.Remove(startYear);
        else
            expandedIntervals.Add(startYear);
        StateHasChanged();
    }
}