@namespace FinPlan.Web.Components.Pages.QuickRetirementComponents

<div class="refinement-section">
    <h3>ðŸŽ¯ Get More Accurate Results</h3>
    <p class="refinement-intro">
        Answer 3 more questions to refine your retirement projection. We'll use these along with what you already told us.
    </p>

    <div class="refinement-form">
        <div class="form-group">
            <label for="retirement-age">What age do you want to retire?</label>
            <div class="input-wrapper">
                <input type="number" 
                       id="retirement-age" 
                       @bind="_retirementAge" 
                       min="55" 
                       max="80" 
                       class="form-control" />
                <span class="input-suffix">years old</span>
            </div>
            <small class="help-text impact-text">ðŸ’¡ Each extra year working adds ~$100K to your nest egg</small>
        </div>

        <div class="form-group">
            <label for="actual-income">What's your monthly income (before taxes)?</label>
            <div class="input-wrapper">
                <span class="input-prefix">$</span>
                <input type="number" 
                       id="actual-income" 
                       @bind="_monthlyIncome" 
                       min="0" 
                       step="100"
                       class="form-control with-prefix"
                       placeholder="Enter your actual income" />
            </div>
            <small class="help-text impact-text">ðŸ’¡ We estimated ~@FormatCurrency(EstimatedIncome) - your actual helps calculate Social Security accurately</small>
        </div>

        <div class="form-group">
            <label for="actual-expenses">How much do you spend per month?</label>
            <div class="input-wrapper">
                <span class="input-prefix">$</span>
                <input type="number" 
                       id="actual-expenses" 
                       @bind="_monthlyExpenses" 
                       min="0" 
                       step="100"
                       class="form-control with-prefix"
                       placeholder="Enter your spending" />
            </div>
            <small class="help-text impact-text">ðŸ’¡ We estimated ~@FormatCurrency(EstimatedExpenses) - knowing your actual spending shows if savings will be enough</small>
        </div>

        <div class="refinement-actions">
            <button class="btn btn-primary btn-large" @onclick="HandleRecalculate" disabled="@(!IsValid)">
                Recalculate with Better Data â†’
            </button>
            <button class="btn btn-link" @onclick="OnCancel">
                Skip this, keep my results
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public RetirementInput CurrentInput { get; set; } = default!;
    
    [Parameter]
    public decimal EstimatedIncome { get; set; }
    
    [Parameter]
    public decimal EstimatedExpenses { get; set; }
    
    [Parameter]
    public EventCallback<RetirementInput> OnRecalculate { get; set; }
    
    [Parameter]
    public EventCallback OnCancel { get; set; }
    
    private int _retirementAge = 65;
    private decimal? _monthlyIncome;
    private decimal? _monthlyExpenses;
    
    private bool IsValid => _retirementAge >= 55 && _retirementAge <= 80;
    
    protected override void OnParametersSet()
    {
        // Pre-fill retirement age if already provided, otherwise default to 65
        _retirementAge = CurrentInput.DesiredRetirementAge ?? 65;
        // Leave income and expenses empty - user needs to actively provide these
        _monthlyIncome = CurrentInput.ActualMonthlyIncome;
        _monthlyExpenses = CurrentInput.ActualMonthlyExpenses;
    }
    
    private async Task HandleRecalculate()
    {
        // Update the input with refined values - ADDITIVE approach
        var refinedInput = new RetirementInput
        {
            // Keep original basic inputs
            CurrentAge = CurrentInput.CurrentAge,
            CurrentSavings = CurrentInput.CurrentSavings,
            MonthlySavings = CurrentInput.MonthlySavings,
            HasPartner = CurrentInput.HasPartner,
            
            // Add new refined inputs
            DesiredRetirementAge = _retirementAge,
            ActualMonthlyIncome = _monthlyIncome.HasValue && _monthlyIncome.Value > 0 ? _monthlyIncome : null,
            ActualMonthlyExpenses = _monthlyExpenses.HasValue && _monthlyExpenses.Value > 0 ? _monthlyExpenses : null
        };
        
        await OnRecalculate.InvokeAsync(refinedInput);
    }
    
    private string FormatCurrency(decimal amount)
    {
        if (amount >= 1000)
        {
            return $"${amount:N0}";
        }
        else
        {
            return $"${amount:N0}";
        }
    }
}

