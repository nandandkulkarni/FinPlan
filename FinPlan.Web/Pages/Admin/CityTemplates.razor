@page "/admin/city-templates"
@using FinPlan.Shared.Models.LivingCosts
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <h2>City Cost of Living Templates</h2>
            <p class="text-muted">Manage city templates and demographic profiles</p>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowCreateCityModal">
                <i class="bi bi-plus-circle"></i> Add New City
            </button>
        </div>
    </div>

    @if (model.IsLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (model.Cities == null || !model.Cities.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No city templates found. Click "Add New City" to create your first template.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>City</th>
                        <th>Country</th>
                        <th>Currency</th>
                        <th>COL Index</th>
                        <th>Profiles</th>
                        <th>Updated</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in model.Cities)
                    {
                        <tr>
                            <td><strong>@city.CityName</strong></td>
                            <td>@city.Country</td>
                            <td>@city.Currency</td>
                            <td>@city.CostOfLivingIndex.ToString("N2")</td>
                            <td>
                                <button class="btn btn-sm btn-link" @onclick="() => LoadProfiles(city.CityId)">
                                    @GetProfileCount(city.CityId) profile(s)
                                </button>
                            </td>
                            <td>@city.UpdatedAt.ToLocalTime().ToString("MM/dd/yyyy")</td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" @onclick="() => EditCity(city)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-success" @onclick="() => ManageProfiles(city)">
                                        <i class="bi bi-people"></i> Profiles
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteCity(city)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <!-- Selected City Profiles Section -->
    @if (model.SelectedCityForProfiles != null)
    {
        <div class="card mt-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    Demographic Profiles for @model.SelectedCityForProfiles.CityName
                    <button class="btn btn-sm btn-light float-end" @onclick="() => ShowCreateProfileModal(model.SelectedCityForProfiles.CityId)">
                        <i class="bi bi-plus-circle"></i> Add Profile
                    </button>
                </h5>
            </div>
            <div class="card-body">
                @if (model.CurrentProfiles == null || !model.CurrentProfiles.Any())
                {
                    <p class="text-muted">No profiles defined for this city yet.</p>
                }
                else
                {
                    <div class="row g-3">
                        @foreach (var profile in model.CurrentProfiles)
                        {
                            <div class="col-md-6">
                                <div class="card border-secondary">
                                    <div class="card-body">
                                        <h6 class="card-title">@profile.ProfileName</h6>
                                        <p class="card-text small mb-2">
                                            <strong>Age:</strong> @profile.AgeMin - @profile.AgeMax<br />
                                            <strong>Marital Status:</strong> @profile.MaritalStatus<br />
                                            <strong>Children:</strong> @profile.ChildrenCount
                                            @if (profile.ChildrenAges?.Any() == true)
                                            {
                                                <text>(ages: @string.Join(", ", profile.ChildrenAges))</text>
                                            }
                                            <br />
                                            <strong>Expenses:</strong> @(profile.SampleExpenses?.Count ?? 0) items
                                        </p>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => EditProfile(profile)">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeleteProfile(profile)">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Create/Edit City Modal -->
@if (model.ShowCityModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(model.EditingCity?.CityId != null ? "Edit City" : "Create New City")</h5>
                    <button type="button" class="btn-close" @onclick="CloseCityModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">City ID <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" @bind="model.EditingCity!.CityId"
                               disabled="@(model.IsEditMode)" placeholder="e.g., nyc-usa" />
                        <small class="text-muted">Unique identifier (lowercase, hyphens)</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">City Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" @bind="model.EditingCity!.CityName"
                               placeholder="e.g., New York City" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Country <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" @bind="model.EditingCity!.Country"
                               placeholder="e.g., United States" />
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Currency <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" @bind="model.EditingCity!.Currency"
                                   placeholder="e.g., USD" maxlength="10" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Cost of Living Index <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" @bind="model.EditingCity!.CostOfLivingIndex"
                                   step="0.01" placeholder="e.g., 100.00" />
                            <small class="text-muted">100 = baseline</small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Created By</label>
                        <input type="text" class="form-control" @bind="model.EditingCity!.CreatedBy"
                               placeholder="Your name/email" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCityModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveCity">
                        <i class="bi bi-save"></i> Save City
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Create/Edit Profile Modal -->
@if (model.ShowProfileModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(model.EditingProfile?.ProfileId != null && model.IsEditMode ? "Edit Profile" : "Create New Profile")</h5>
                    <button type="button" class="btn-close" @onclick="CloseProfileModal"></button>
                </div>
                <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                    <div class="mb-3">
                        <label class="form-label">Profile ID <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" @bind="model.EditingProfile!.ProfileId"
                               disabled="@(model.IsEditMode)" placeholder="e.g., nyc-young-single" />
                        <small class="text-muted">Unique identifier (lowercase, hyphens)</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Profile Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" @bind="model.EditingProfile!.ProfileName"
                               placeholder="e.g., New York City" />
                    </div>
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Min Age <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" @bind="model.EditingProfile!.AgeMin" />
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Max Age <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" @bind="model.EditingProfile!.AgeMax" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Marital Status <span class="text-danger">*</span></label>
                            <select class="form-select" @bind="model.EditingProfile!.MaritalStatus">
                                @foreach (MaritalStatus status in Enum.GetValues(typeof(MaritalStatus)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Children Count</label>
                        <input type="number" class="form-control" @bind="model.EditingProfile!.ChildrenCount" min="0" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Children Ages (comma-separated)</label>
                        <input type="text" class="form-control" @bind="model.ChildrenAgesInput"
                               placeholder="e.g., 5, 8, 12" />
                        <small class="text-muted">Enter ages separated by commas</small>
                    </div>

                    <hr />

                    <h6>Sample Expenses</h6>
                    <p class="text-muted small">Define typical monthly expenses for this demographic profile.</p>

                    @if (model.EditingProfile?.SampleExpenses != null)
                    {
                        <div class="d-flex justify-content-end align-items-left mt-2">
                            <div class="fw-bold">Total (monthly):</div>
                            <div class="ms-3 h5 mb-0">@GetExpensesMonthlyTotal(model.EditingProfile).ToString("C")</div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Category</th>
                                        <th>Subcategory</th>
                                        <th>Amount</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var expense in model.EditingProfile.SampleExpenses.OrderBy(e => (e.Category ?? string.Empty).ToLowerInvariant())
                                                                .ThenBy(e => (e.Subcategory ?? string.Empty).ToLowerInvariant())
                                                                .ToList())
                                    {
                                        <tr>
                                            @if (model.EditingExpense != null && model.OriginalExpense == expense)
                                            {
                                                <!-- Edit mode for this expense -->
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="model.EditingExpense.Category" />
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm"
                                                           @bind="model.EditingExpense.Subcategory" />
                                                </td>
                                                <td>
                                                    <input type="number" class="form-control form-control-sm"
                                                           @bind="model.EditingExpense.CurrentValue"
                                                           step="0.01" />
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-success me-1"
                                                            @onclick="SaveExpenseEdit">
                                                        <i class="bi bi-check"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-secondary"
                                                            @onclick="CancelExpenseEdit">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </td>
                                            }
                                            else
                                            {
                                                <!-- Display mode -->
                                                <td>@expense.Category</td>
                                                <td>@expense.Subcategory</td>
                                                <td>@expense.CurrentValue.ToString("C")</td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary me-1"
                                                            @onclick="() => StartEditExpense(expense)">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick="() => RemoveExpense(expense)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    <button class="btn btn-sm btn-outline-primary" @onclick="ShowAddExpenseForm">
                        <i class="bi bi-plus-circle"></i> Add Expense
                    </button>

                    @if (model.EditingProfile?.SampleExpenses?.Any() == true)
                    {
                        <button class="btn btn-sm btn-outline-info ms-2" @onclick="TestJsonSerialization">
                            <i class="bi bi-code"></i> Test JSON
                        </button>
                    }

                    @if (model.ShowAddExpenseForm)
                    {
                        <div class="card mt-3">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-2">
                                        <input type="text" class="form-control" @bind="model.NewExpense!.Category"
                                               placeholder="Category" />
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <input type="text" class="form-control" @bind="model.NewExpense!.Subcategory"
                                               placeholder="Subcategory" />
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <input type="number" class="form-control" @bind="model.NewExpense!.CurrentValue"
                                               step="0.01" placeholder="Monthly Amount" />
                                    </div>
                                </div>
                                <div class="mt-2">
                                    <button class="btn btn-sm btn-success" @onclick="AddExpense">
                                        <i class="bi bi-check"></i> Add
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelAddExpense">
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseProfileModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveProfile">
                        <i class="bi bi-save"></i> Save Profile
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private CityTemplatesModel model = new();

    private class CityTemplatesModel
    {
        public List<CityTemplate>? Cities { get; set; }
        public List<DemographicProfile>? CurrentProfiles { get; set; }
        public Dictionary<string, int> ProfileCounts { get; set; } = new();
        public CityTemplate? SelectedCityForProfiles { get; set; }

        public bool IsLoading { get; set; } = false;
        public bool ShowCityModal { get; set; } = false;
        public bool ShowProfileModal { get; set; } = false;
        public bool IsEditMode { get; set; } = false;
        public bool ShowAddExpenseForm { get; set; } = false;

        public CityTemplate? EditingCity { get; set; }
        public DemographicProfile? EditingProfile { get; set; }
        public CostItem? NewExpense { get; set; }
        public CostItem? EditingExpense { get; set; } // For inline editing
        public CostItem? OriginalExpense { get; set; } // Reference to original item being edited
        public string ChildrenAgesInput { get; set; } = "";
    }

    private decimal ConvertToMonthlyAmount(CostItem item)
    {
        if (item == null) return 0m;
        var amount = item.CurrentValue;
        decimal perMonth = item.Frequency switch
        {
            Frequency.Monthly => amount,
            Frequency.Yearly => amount / 12m,
            Frequency.Quarterly => amount / 3m,
            Frequency.BiWeekly => amount * 26m / 12m,
            Frequency.Weekly => amount * 52m / 12m,
            _ => amount
        };
        return Math.Round(perMonth, 2);
    }

    private decimal GetExpensesMonthlyTotal(DemographicProfile? profile)
    {
        if (profile?.SampleExpenses == null || !profile.SampleExpenses.Any()) return 0m;
        decimal total = 0m;
        foreach (var e in profile.SampleExpenses)
        {
            total += ConvertToMonthlyAmount(e);
        }
        return Math.Round(total, 2);
    }

    private HttpClient CreateHttpClient()
    {
        var client = HttpClientFactory.CreateClient();
        var baseUrl = GetApiBaseUrl();
        client.BaseAddress = new Uri(baseUrl);
        return client;
    }

    private string GetApiBaseUrl()
    {
#if DEBUG
        return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "https://api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCities();
    }

    private async Task LoadCities()
    {
        model.IsLoading = true;
        try
        {
            using var client = CreateHttpClient();
            model.Cities = await client.GetFromJsonAsync<List<CityTemplate>>("api/citytemplate");

            // Load profile counts for each city
            if (model.Cities != null)
            {
                foreach (var city in model.Cities)
                {
                    await LoadProfileCount(city.CityId);
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading cities: {ex.Message}");
        }
        finally
        {
            model.IsLoading = false;
        }
    }

    private async Task LoadProfileCount(string cityId)
    {
        try
        {
            using var client = CreateHttpClient();
            var profiles = await client.GetFromJsonAsync<List<DemographicProfile>>($"api/citytemplate/{cityId}/profiles");
            model.ProfileCounts[cityId] = profiles?.Count ?? 0;
        }
        catch
        {
            model.ProfileCounts[cityId] = 0;
        }
    }

    private int GetProfileCount(string cityId)
    {
        return model.ProfileCounts.TryGetValue(cityId, out int count) ? count : 0;
    }

    private async Task LoadProfiles(string cityId)
    {
        try
        {
            using var client = CreateHttpClient();
            model.CurrentProfiles = await client.GetFromJsonAsync<List<DemographicProfile>>($"api/citytemplate/{cityId}/profiles");
            model.SelectedCityForProfiles = model.Cities?.FirstOrDefault(c => c.CityId == cityId);

            // Deserialize JSON data to working lists for each loaded profile
            if (model.CurrentProfiles != null)
            {
                foreach (var profile in model.CurrentProfiles)
                {
                    profile.DeserializeFromDatabase();
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading profiles: {ex.Message}");
        }
    }

    private async Task ManageProfiles(CityTemplate city)
    {
        await LoadProfiles(city.CityId);
    }

    // City CRUD operations
    private void ShowCreateCityModal()
    {
        model.EditingCity = new CityTemplate
        {
            CityId = "",
            CityName = "",
            Country = "",
            Currency = "",
            CostOfLivingIndex = 100,
            CreatedBy = ""
        };
        model.IsEditMode = false;
        model.ShowCityModal = true;
    }

    private void EditCity(CityTemplate city)
    {
        model.EditingCity = new CityTemplate
        {
            CityId = city.CityId,
            CityName = city.CityName,
            Country = city.Country,
            Currency = city.Currency,
            CostOfLivingIndex = city.CostOfLivingIndex,
            CreatedBy = city.CreatedBy,
            CreatedAt = city.CreatedAt,
            UpdatedAt = city.UpdatedAt
        };
        model.IsEditMode = true;
        model.ShowCityModal = true;
    }

    private void CloseCityModal()
    {
        model.ShowCityModal = false;
        model.EditingCity = null;
    }

    private async Task SaveCity()
    {
        if (model.EditingCity == null) return;

        try
        {
            using var client = CreateHttpClient();
            if (model.IsEditMode)
            {
                var response = await client.PutAsJsonAsync($"api/citytemplate/{model.EditingCity.CityId}", model.EditingCity);
                response.EnsureSuccessStatusCode();
            }
            else
            {
                var response = await client.PostAsJsonAsync("api/citytemplate", model.EditingCity);
                response.EnsureSuccessStatusCode();
            }

            await LoadCities();
            CloseCityModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving city: {ex.Message}");
        }
    }

    private async Task DeleteCity(CityTemplate city)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete '{city.CityName}'? This will also delete all associated profiles.");

        if (!confirmed) return;

        try
        {
            using var client = CreateHttpClient();
            var response = await client.DeleteAsync($"api/citytemplate/{city.CityId}");
            response.EnsureSuccessStatusCode();
            await LoadCities();

            if (model.SelectedCityForProfiles?.CityId == city.CityId)
            {
                model.SelectedCityForProfiles = null;
                model.CurrentProfiles = null;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting city: {ex.Message}");
        }
    }

    // Profile CRUD operations
    private void ShowCreateProfileModal(string cityId)
    {
        model.EditingProfile = new DemographicProfile
        {
            ProfileId = "",
            CityId = cityId,
            ProfileName = "",
            AgeMin = 25,
            AgeMax = 35,
            MaritalStatus = MaritalStatus.Single,
            ChildrenCount = 0,
            ChildrenAges = new List<int>(),
            SampleExpenses = new List<CostItem>()
        };

        model.ChildrenAgesInput = "";
        model.IsEditMode = false;
        model.ShowProfileModal = true;
    }

    private void EditProfile(DemographicProfile profile)
    {
        model.EditingProfile = new DemographicProfile
        {
            ProfileId = profile.ProfileId,
            CityId = profile.CityId,
            ProfileName = profile.ProfileName,
            AgeMin = profile.AgeMin,
            AgeMax = profile.AgeMax,
            MaritalStatus = profile.MaritalStatus,
            ChildrenCount = profile.ChildrenCount,
            CreatedAt = profile.CreatedAt,
            UpdatedAt = profile.UpdatedAt,
            // Copy the JSON fields for database operations
            ChildrenAgesJSON = profile.ChildrenAgesJSON,
            SampleExpensesJSON = profile.SampleExpensesJSON
        };

        // Deserialize JSON to working lists
        model.EditingProfile.DeserializeFromDatabase();

        model.ChildrenAgesInput = model.EditingProfile.ChildrenAges.Any()
            ? string.Join(", ", model.EditingProfile.ChildrenAges)
            : "";
        model.IsEditMode = true;
        model.ShowProfileModal = true;
    }

    private void CloseProfileModal()
    {
        model.ShowProfileModal = false;
        model.EditingProfile = null;
        model.ShowAddExpenseForm = false;
        model.NewExpense = null;
        model.EditingExpense = null; // Clear expense editing state
        model.OriginalExpense = null;
    }

    private async Task SaveProfile()
    {
        if (model.EditingProfile == null) return;

        try
        {
            // Parse children ages from input
            if (!string.IsNullOrWhiteSpace(model.ChildrenAgesInput))
            {
                model.EditingProfile.ChildrenAges = model.ChildrenAgesInput
                    .Split(',')
                    .Select(s => s.Trim())
                    .Where(s => int.TryParse(s, out _))
                    .Select(int.Parse)
                    .ToList();
            }
            else
            {
                model.EditingProfile.ChildrenAges = new List<int>();
            }

            // Debug: Log what we're about to save
            Console.WriteLine($"Saving profile with {model.EditingProfile.SampleExpenses.Count} expenses");
            foreach (var expense in model.EditingProfile.SampleExpenses)
            {
                Console.WriteLine($"Expense: {expense.Category} - {expense.Subcategory} - {expense.CurrentValue:C}");
            }

            // Convert lists to JSON for database storage
            model.EditingProfile.SerializeForDatabase();

            // Debug: Check if JSON was created
            Console.WriteLine($"ChildrenAgesJSON: {model.EditingProfile.ChildrenAgesJSON ?? "NULL"}");
            Console.WriteLine($"SampleExpensesJSON: {model.EditingProfile.SampleExpensesJSON ?? "NULL"}");

            using var client = CreateHttpClient();
            if (model.IsEditMode)
            {
                var response = await client.PutAsJsonAsync($"api/citytemplate/profile/{model.EditingProfile.ProfileId}", model.EditingProfile);
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    throw new Exception($"Failed to update profile: {response.StatusCode} - {errorContent}");
                }
            }
            else
            {
                var response = await client.PostAsJsonAsync($"api/citytemplate/{model.EditingProfile.CityId}/profiles", model.EditingProfile);
                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    throw new Exception($"Failed to create profile: {response.StatusCode} - {errorContent}");
                }
            }

            await LoadProfiles(model.EditingProfile.CityId);
            
            //CloseProfileModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SaveProfile: {ex}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving profile: {ex.Message}");
        }
    }

    private async Task DeleteProfile(DemographicProfile profile)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete the profile '{profile.ProfileName}'?");

        if (!confirmed) return;

        try
        {
            using var client = CreateHttpClient();
            var response = await client.DeleteAsync($"api/citytemplate/profile/{profile.ProfileId}");
            response.EnsureSuccessStatusCode();
            await LoadProfiles(profile.CityId);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting profile: {ex.Message}");
        }
    }

    // Expense management
    private void ShowAddExpenseForm()
    {
        model.NewExpense = new CostItem
        {
            Category = "",
            Subcategory = "",
            CurrentValue = 0,
            Frequency = Frequency.Monthly,
            AdjustOption = RetirementAdjustOption.Same,
            PerItemInflationPercent = null,
            PerItemInflationSource = InflationSource.UseGlobal,
            CustomPercentage = 100m,
            ManualRetirementValue = null,
            IncludeInRetirement = true,
            RetirementExclusionReason = null
        };
        model.ShowAddExpenseForm = true;
    }

    private void AddExpense()
    {
        if (model.NewExpense != null && model.EditingProfile?.SampleExpenses != null)
        {
            Console.WriteLine($"Adding expense: {model.NewExpense.Category} - {model.NewExpense.Subcategory} - {model.NewExpense.CurrentValue:C}");

            // Create a properly initialized CostItem
            var expenseToAdd = new CostItem
            {
                Category = model.NewExpense.Category ?? "",
                Subcategory = model.NewExpense.Subcategory ?? "",
                CurrentValue = model.NewExpense.CurrentValue,
                Frequency = Frequency.Monthly,
                AdjustOption = RetirementAdjustOption.Same,
                PerItemInflationPercent = null,
                PerItemInflationSource = InflationSource.UseGlobal,
                CustomPercentage = 100m,
                ManualRetirementValue = null,
                IncludeInRetirement = true,
                RetirementExclusionReason = null
            };

            // Simply add to the list - no JSON serialization needed during edit
            model.EditingProfile.SampleExpenses.Add(expenseToAdd);
            Console.WriteLine($"Total expenses after adding: {model.EditingProfile.SampleExpenses.Count}");

            model.ShowAddExpenseForm = false;
            model.NewExpense = null;

            StateHasChanged(); // Force UI update
        }
        else
        {
            Console.WriteLine($"Cannot add expense - NewExpense: {model.NewExpense != null}, SampleExpenses: {model.EditingProfile?.SampleExpenses != null}");
        }
    }

    private void CancelAddExpense()
    {
        model.ShowAddExpenseForm = false;
        model.NewExpense = null;
    }

    private void RemoveExpense(CostItem expense)
    {
        if (model.EditingProfile?.SampleExpenses != null)
        {
            Console.WriteLine($"Removing expense: {expense.Category} - {expense.Subcategory}");

            // Simply remove from the list - no JSON serialization needed during edit
            var removed = model.EditingProfile.SampleExpenses.Remove(expense);
            Console.WriteLine($"Remove operation result: {removed}");
            Console.WriteLine($"Count after removal: {model.EditingProfile.SampleExpenses.Count}");

            if (removed)
            {
                StateHasChanged(); // Force UI update
            }
        }
    }

    private async Task TestJsonSerialization()
    {
        if (model.EditingProfile?.SampleExpenses == null) return;

        try
        {
            Console.WriteLine("=== JSON Serialization Test (New Approach) ===");
            Console.WriteLine($"Current expenses count: {model.EditingProfile.SampleExpenses.Count}");

            // Show current expenses in the working list
            for (int i = 0; i < model.EditingProfile.SampleExpenses.Count; i++)
            {
                var expense = model.EditingProfile.SampleExpenses[i];
                Console.WriteLine($"  [{i}] {expense.Category} - {expense.Subcategory} - {expense.CurrentValue:C}");
            }

            // Test serialization (what would happen on save)
            model.EditingProfile.SerializeForDatabase();
            Console.WriteLine($"Serialized JSON: {model.EditingProfile.SampleExpensesJSON ?? "NULL"}");

            // Test deserialization
            if (!string.IsNullOrEmpty(model.EditingProfile.SampleExpensesJSON))
            {
                var testProfile = new DemographicProfile
                {
                    SampleExpensesJSON = model.EditingProfile.SampleExpensesJSON
                };
                testProfile.DeserializeFromDatabase();

                Console.WriteLine($"Deserialized expenses count: {testProfile.SampleExpenses.Count}");
                for (int i = 0; i < testProfile.SampleExpenses.Count; i++)
                {
                    var expense = testProfile.SampleExpenses[i];
                    Console.WriteLine($"  Deserialized [{i}] {expense.Category} - {expense.Subcategory} - {expense.CurrentValue:C}");
                }
            }

            var message = $"JSON test completed!\n" +
                         $"Working list expenses: {model.EditingProfile.SampleExpenses.Count}\n" +
                         $"JSON serialization: {(string.IsNullOrEmpty(model.EditingProfile.SampleExpensesJSON) ? "NULL/Empty" : "Success")}\n" +
                         $"Check browser console for detailed logs.";

            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JSON serialization test error: {ex}");
            await JSRuntime.InvokeVoidAsync("alert", $"JSON test failed: {ex.Message}");
        }
    }

    // Expense editing methods
    private void StartEditExpense(CostItem expense)
    {
        // Create a copy for editing
        model.EditingExpense = new CostItem
        {
            Category = expense.Category,
            Subcategory = expense.Subcategory,
            CurrentValue = expense.CurrentValue,
            Frequency = expense.Frequency,
            AdjustOption = expense.AdjustOption,
            PerItemInflationPercent = expense.PerItemInflationPercent,
            PerItemInflationSource = expense.PerItemInflationSource,
            CustomPercentage = expense.CustomPercentage,
            ManualRetirementValue = expense.ManualRetirementValue,
            IncludeInRetirement = expense.IncludeInRetirement,
            RetirementExclusionReason = expense.RetirementExclusionReason
        };

        // Store reference to original for updating
        model.OriginalExpense = expense;

        Console.WriteLine($"Started editing expense: {expense.Category} - {expense.Subcategory}");
        StateHasChanged();
    }

    private void SaveExpenseEdit()
    {
        if (model.EditingExpense != null && model.OriginalExpense != null)
        {
            Console.WriteLine($"Saving edited expense: {model.EditingExpense.Category} - {model.EditingExpense.Subcategory}");

            // Update the original expense with edited values
            model.OriginalExpense.Category = model.EditingExpense.Category ?? "";
            model.OriginalExpense.Subcategory = model.EditingExpense.Subcategory ?? "";
            model.OriginalExpense.CurrentValue = model.EditingExpense.CurrentValue;

            // Clear editing state
            model.EditingExpense = null;
            model.OriginalExpense = null;

            Console.WriteLine("Expense edit saved successfully");
            StateHasChanged();
        }
    }

    private void CancelExpenseEdit()
    {
        Console.WriteLine("Cancelled expense edit");
        model.EditingExpense = null;
        model.OriginalExpense = null;
        StateHasChanged();
    }
}
