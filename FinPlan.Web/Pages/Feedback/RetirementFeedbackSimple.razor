@page "/retirement-feedback-simple"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Text.Json
@using System.Net.Http.Json
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject FinPlan.Web.Services.UserGuidService UserGuidService
@inject IConfiguration Configuration

<PageTitle>Retirement Feedback (Simple)</PageTitle>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">

                @if (questions is not null && questions.Count > 0)
                {
                    @foreach(var question in questions)
                    {
                        <div class="mb-2">
                            <span class="badge bg-secondary me-2">@question.QuestionText</span>
                            @if (question.Options?.Count > 0)
                            {
                                @foreach (var opt in question.Options)
                                {
                                    <button type="button" class="btn btn-outline-secondary btn-sm me-1" @onclick="() => OnMcqSelectedAsync(question.QuestionText, opt)">@opt</button>
                                }
                            }
                        </div>
                    }
                }

                <div class="card-body">
                    <h3 class="mb-3">Retirement Drawdown Feedback</h3>
                    <p class="text-muted">Please answer the question below. Your answers are not personally identifiable.</p>

                    <h5 class="mt-4">Multiple Choice (example)</h5>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">@mcqQuestion1.QuestionText</label>
                        <div class="mt-2">
                            <div class="btn-group" role="group" aria-label="MCQ options">
                                <button type="button" class="btn btn-outline-secondary" @onclick="() => OnMcqSelectedAsync(mcqQuestion1.QuestionText, mcAnaswer1)">@mcAnaswer1</button>
                            </div>
                        </div>
                    </div>

                    <h5 class="mt-4">Open-Ended</h5>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">@essayQuestion</label>
                        <textarea class="form-control" rows="4" @bind="essayAnswer" @oninput="OnEssayInputAsync"></textarea>
                    </div>

                    <div class="mt-4 text-end">
                        <button class="btn btn-primary" @onclick="SubmitAsync">Submit</button>
                    </div>

                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert alert-success mt-3">@statusMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // question constants used by handlers
    private SurveyQuestion mcqQuestion1 = new SurveyQuestion("How easy was it to use the Retirement Drawdown Planner?", new List<string> { "Very Easy", "Easy", "Neutral", "Difficult", "Very Difficult" });
    private const string essayQuestion = "Please describe anything you found confusing or suggestions for improvement:";
    private const string mcAnaswer1 = "Very Easy";

    private string essayAnswer = string.Empty;
    private string selectedMcqAnswer = string.Empty;
    private string statusMessage = string.Empty;

    // Store answers uniquely by question text
    private readonly Dictionary<string, string> answers = new();

    private List<SurveyQuestion> questions = new List<SurveyQuestion>()
    {
       new SurveyQuestion("How easy was it to use the Retirement Drawdown Planner?", new List<string> { "Very Easy", "Easy", "Neutral", "Difficult", "Very Difficult" }),
       new SurveyQuestion("Please describe anything you found confusing or suggestions for improvement:"),
       new SurveyQuestion("How likely are you to recommend our service to a friend or colleague?", new List<string> { "Very Likely", "Likely", "Neutral", "Unlikely", "Very Unlikely" })
    };

    private string userGuid = string.Empty;
    private readonly string surveyType = "RetirementDrawdown";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
        }
        catch
        {
            userGuid = Guid.NewGuid().ToString();
        }
    }

    private void CloseDetailsModal()
    {
        // Logic to close the modal can be implemented here
    }

    // oninput handler for essay - async so we can call async storage/print
    private async Task OnEssayInputAsync(ChangeEventArgs e)
    {
        essayAnswer = e.Value?.ToString() ?? string.Empty;
        await OnEssayChangedAsync(essayQuestion, essayAnswer);
    }

    // store MCQ answer (ensures no duplicate questions - dictionary key enforces uniqueness),
    // then convert current answers to JSON and print to browser console and save via API
    private async Task OnMcqSelectedAsync(string questionText, string chosenAnswer)
    {
        if (string.IsNullOrEmpty(questionText)) return;

        answers[questionText] = chosenAnswer; // add or replace
        selectedMcqAnswer = chosenAnswer;
        statusMessage = $"Recorded: '{questionText}' → '{chosenAnswer}'";

        await PrintAnswersJsonAsync();
        await SaveAnswersToApiAsync();
        StateHasChanged();
    }

    // store essay answer and print JSON and save
    private async Task OnEssayChangedAsync(string questionText, string currentAnswer)
    {
        if (string.IsNullOrEmpty(questionText)) return;

        answers[questionText] = currentAnswer;
        statusMessage = $"Essay updated for: '{questionText}'";

        await PrintAnswersJsonAsync();
        await SaveAnswersToApiAsync();
        StateHasChanged();
    }

    // Convert answers dictionary to JSON and print to browser console
    private async Task PrintAnswersJsonAsync()
    {
        try
        {
            // create an array of { question, answer } objects for nicer JSON
            var payload = answers.Select(kvp => new { Question = kvp.Key, Answer = kvp.Value }).ToArray();
            var json = JsonSerializer.Serialize(payload, new JsonSerializerOptions { WriteIndented = true });

            // print to browser console
            await JSRuntime.InvokeVoidAsync("console.log", json);

            // also write to server console (useful during server-side debugging)
            Console.WriteLine(json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error serializing answers: {ex}");
        }
    }

    private async Task SaveAnswersToApiAsync()
    {
        var apiBase = GetApiBaseUrl();

        try
        {
            var client = HttpClientFactory.CreateClient("Api");
            var req = new
            {
                UserGuid = userGuid,
                SurveyType = surveyType,
                SurveyJson = answers
            };

            await client.PostAsJsonAsync(apiBase + "/api/survey/save", req);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving survey: {ex}");
        }
    }

    private async Task SubmitAsync()
    {
        // Final submission logic can be implemented here.
        // For now show a confirmation message and save
        statusMessage = $"Submitted MCQ: '{selectedMcqAnswer}' and Essay length: {essayAnswer?.Length ?? 0}";
        await PrintAnswersJsonAsync();
        await SaveAnswersToApiAsync();
    }

    public class SurveyQuestion
    {
        public string QuestionText { get; set; }
        public List<string> Options { get; set; } // For MCQs
        public bool IsEssay { get; set; } // True if essay question
        public SurveyQuestion(string questionText, List<string> options = null)
        {
            QuestionText = questionText;
            Options = options ?? new List<string>();
            IsEssay = options == null;
        }
    }

      private string GetApiBaseUrl()
    {
#if DEBUG
                        return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

}