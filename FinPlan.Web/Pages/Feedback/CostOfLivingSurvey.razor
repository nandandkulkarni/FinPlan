@page "/survey-future-cost-of-living"
@using FinPlan.Web.Components.Models
@using FinPlan.Web.Components.Survey
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using FinPlan.Web.Services
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject FinPlan.Web.Services.UserGuidService UserGuidService
@inject IConfiguration Configuration

<div class="alert alert-info" style="margin-bottom:18px; border-radius:10px; font-size:1.05rem;">
    <strong>Thank you for trying the Cost of Living Planne Planner</strong><br />
    We truly appreciate you taking the time to share your feedback. There are many questions below, but please feel free to answer only those you wish�every response helps us improve. No personal information is collected
</div>

<SurveyForm Questions="@questions" Title="Cost of Living Planner - Survey" SurveyType="CostOfLivingPlanner"/>

@code {
    private List<SurveyQuestion> questions = new()
    {
        new SurveyQuestion("How easy was it to find the Cost of Living Planner on the site?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How clear were the instructions for using the planner?", new List<string>{"Very Clear","Clear","Neutral","Unclear","Very Unclear"}),
        new SurveyQuestion("How easy was it to find advanced mode?", new List<string>{"Very Clear","Clear","Neutral","Unclear","Very Unclear"}),
        new SurveyQuestion("How easy was it to find advanced mode?", new List<string>{"Very Clear","Clear","Neutral","Unclear","Very Unclear"}),
        new SurveyQuestion("How would you rate the visual design of the planner?", new List<string>{"Excellent","Good","Average","Poor","Very Poor"}),
        new SurveyQuestion("How easy was it to add a new category?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How easy was it to add a new item within a category?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How easy was it to edit an existing item?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How easy was it to delete a category or item?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How clear was the meaning of �Current Value�?", new List<string>{"Very Clear","Clear","Neutral","Unclear","Very Unclear"}),
        new SurveyQuestion("How clear was the meaning of �Retirement Value�?", new List<string>{"Very Clear","Clear","Neutral","Unclear","Very Unclear"}),
        new SurveyQuestion("How useful did you find the �Retirement Adjustment� options?", new List<string>{"Very Useful","Useful","Neutral","Not Useful","Did Not Use"}),
        new SurveyQuestion("How easy was it to understand the �Inflation Rate� setting?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        // new SurveyQuestion("How easy was it to switch between different plans/cities?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How easy was it to understand the frequency options (Monthly, Quarterly, Yearly)?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How useful did you find the �Include in Retirement� checkbox?", new List<string>{"Very Useful","Useful","Neutral","Not Useful","Did Not Use"}),
        new SurveyQuestion("How easy was it to collapse or expand categories?", new List<string>{"Very Easy","Easy","Neutral","Difficult","Very Difficult"}),
        new SurveyQuestion("How useful or clear did you find the overall totals or summary calculations?", new List<string>{"Very Useful","Useful","Neutral","Not Useful","Did Not Use"}),
        new SurveyQuestion("How would you rate the speed/performance of the planner?", new List<string>{"Excellent","Good","Average","Poor","Very Poor"}),
        new SurveyQuestion("How likely are you to recommend this planner to others?", new List<string>{"Very Likely","Likely","Neutral","Unlikely","Very Unlikely"}),
        new SurveyQuestion("Overall, how satisfied are you with the Cost of Living Planner?", new List<string>{"Very Satisfied","Satisfied","Neutral","Dissatisfied","Very Dissatisfied"}),

        // Essay questions
        new SurveyQuestion("What did you like most about the Cost of Living Planner?"),
        new SurveyQuestion("What did you find confusing or difficult to use?"),
        new SurveyQuestion("What features would you like to see added or improved?"),
        new SurveyQuestion("Did you encounter any bugs or errors? Please describe."),
        new SurveyQuestion("Any other comments or suggestions?")
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
                var apiBaseUrl = Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
                var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
                var route = Navigation.ToBaseRelativePath(Navigation.Uri);
                string? ua = null;
                try { ua = await JSRuntime.InvokeAsync<string>("fpBrowserInfo.getUserAgent"); } catch { }
                var dto = new { Page = "Survey-CostOfLiving", Route = route, UserGuid = userGuid, UserAgent = ua };
                var json = System.Text.Json.JsonSerializer.Serialize(dto);
                using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
                await client.PostAsync($"{apiBaseUrl}/api/Tracking/pageview", content);
            }
            catch { }
        }
    }
}
