@namespace FinPlan.Web.Components.Pages

@page "/savings-wealth-building"

@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Models.Spending
@using FinPlan.Shared.Services
@using FinPlan.Web.Services
@using Microsoft.JSInterop
@using FinPlan.Web.Pages.Savings.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using FinPlan.Web.Components.Shared


@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject DebugMessageService DebugService
@inject UserGuidService UserGuidService
@inject NavigationManager Navigation
@inject FinPlan.Web.Services.ApiUrlProvider ApiUrlProvider


<PageTitle>Savings & Wealth Building</PageTitle>


<SavingsInputWizard Model="@SavingsModel"
                    RetirementModel="@RetirementModel"
                    Visible="@showWizard"
                    VisibleChanged="@(v => showWizard = v)"
                    OnFinished="HandleWizardFinished"
                    OnSave="SaveAsync"
                    ActiveTab=activeTab
                    InitialStep="@wizardOpenStep" />

<SetupSavingsSampleData Visible="@showSampleDataModal"
                        OnClose="@(() => showSampleDataModal = false)"
                        OnSampleDataSelected="HandleSampleDataSelected" />

<!-- Intro Modal - Moved outside blurred wrapper -->
@if (showIntroModal)
{
    <div class="modal-backdrop fade show" style="z-index: 1040;"></div>
    <div class="modal d-block" style="z-index: 1050;">
        <div class="modal-dialog modal-dialog-centered modal-lg modal-fullscreen-sm-down">
            <div class="modal-content" style="border-top: 4px solid #FFD600;">
                <div class="d-block d-md-none"><br><br /></div>

                <div class="modal-header bg-light">
                    <h5 class="modal-title">
                        <i class="bi bi-piggy-bank-fill text-warning me-2"></i>Welcome to Savings Planning!
                    </h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseIntroModal"></button>
                </div>

                <div class="modal-body" style="background-color: #fffef7;">
                    <div class="text-center mb-4">
                        <div style="font-size: 3rem; margin-bottom: 12px;">🎯</div>
                        <p class="text-muted mb-0">
                            Let's create your personalized retirement savings plan. We'll walk you through the setup in just a few quick steps.
                        </p>
                    </div>

                    <!-- Action Buttons -->
                    <div class="d-flex gap-3 justify-content-center mb-3 flex-wrap">
                        <button class="btn btn-primary btn-lg px-4" @onclick="() => { OpenWizard(1); CloseIntroModal(); }">
                            <i class="bi bi-play-circle me-2"></i>Start Planning
                        </button>
                        <button class="btn btn-outline-primary btn-lg px-4"
                                @onclick="() => { showSampleDataModal = true; CloseIntroModal(); }">
                            <i class="bi bi-clipboard-data me-2"></i>Try Sample Data
                        </button>
                    </div>

                    <!-- Don't Show Again -->
                    <style>
                        /* Highlighted checkbox block for intro modal */

                    </style>

                    <div class="intro-dont-show" role="region" aria-label="Intro preference">
                        <div class="form-check d-flex align-items-start mb-0">
                            <input class="form-check-input me-3" type="checkbox"
                                   id="dontShowIntroAgainCheck" @onchange="OnDontShowIntroChanged" />
                        </div>

                        <label class="form-check-label mb-0" for="dontShowIntroAgainCheck" style="max-width:720px;">
                            <div class="label-main">
                                <i class="bi bi-eye-slash-fill text-warning me-2" aria-hidden="true"></i>
                                Don't show this welcome screen again
                            </div>
                            <div class="label-sub">
                                Hide this welcome screen on future visits. You can re-enable it later in settings.
                            </div>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Main content - hide on mobile, blur on desktop when modal is open -->
<div class="@(showIntroModal ? "intro-modal-active" : "")">
    <div class="container-wire">
        <div class="page-header">
            <h3>Savings & Wealth Building</h3>
        </div>


        <div class="top-area">
            <div class="container-fluid">
                <div class="row g-3">
                    <div class="col-12 col-md-2">
                        <!-- Ad Placement: Left Sidebar -->
                        <div class="mb-3">
                            <AdUnit Slot="2499101058"
                                    Style="display:inline-block; width:160px; height:600px; margin: 0 auto;"
                                    Format="vertical"
                                    Responsive="false"
                                    PlaceholderText="Advertisement"></AdUnit>
                        </div>
                    </div>

                    <div class="col-12 col-md-8">
                        <!-- Tab Navigation -->
                        <ul class="nav nav-tabs">
                            <li class="nav-item d-flex align-items-center me-1 @(activeTab == "your" ? "tab-item-active" : "")" role="presentation">
                                <button class="nav-link @(activeTab == "your" ? "tab-active-custom" : "")" role="tab" aria-selected="@(activeTab == "your" ? "true" : "false")" tabindex="0" @onclick="YourTabClick">
                                    Your  Savings
                                </button>
                            </li>
                            <li class="nav-item d-flex align-items-center me-1 @(activeTab == "partner" ? "tab-item-active" : "")" role="presentation">
                                <button class="nav-link @(activeTab == "partner" ? "tab-active-custom" : "")" role="tab" aria-selected="@(activeTab == "partner" ? "true" : "false")" tabindex="0" @onclick="PartnerTabClick">
                                    Partner  Savings
                                </button>
                            </li>
                        </ul>
                        <!-- Yellow border section panel that touches the tabs -->
                        <div class="section-panel" style="margin-top: -1px; border-top-left-radius: 0; border-top-right-radius: 0;">

                            @if (results != null && !SavingsModel.IsModelEmpty())
                            {
                                <div class="summary-cards-row">
                                    <div class="summary-card savings-card savings-card-teal">
                                        <span class="bi bi-piggy-bank"></span>
                                        <div class="card-label">Final Savings</div>
                                        <div class="card-value">@results.FinalAmount.ToString("C0")</div>
                                    </div>
                                    <div class="summary-card savings-card savings-card-yellow">
                                        <span class="bi bi-arrow-up-circle"></span>
                                        <div class="card-label">Total Contributions</div>
                                        <div class="card-value">@results.TotalContributions.ToString("C0")</div>
                                    </div>
                                    <div class="summary-card savings-card savings-card-purple">
                                        <span class="bi bi-graph-up"></span>
                                        <div class="card-label">Total Growth</div>
                                        <div class="card-value">@results.TotalInterestEarned.ToString("C0")</div>
                                    </div>
                                    <div class="summary-card savings-card savings-card-red">
                                        <span class="bi bi-receipt"></span>
                                        <div class="card-label">Taxes Paid</div>
                                        <div class="card-value">@results.TotalTaxesPaid.ToString("C0")</div>
                                    </div>
                                </div>

                                <!-- Simple Progress Indicator for General Public -->
                                @if (results != null && results.FinalAmount > 0)
                                {
                                    <div class="alert" style="margin: 16px 0; padding: 12px; border-radius: 8px;
                                                                        @(GetSavingsProgressMessage().isGood ? "background-color: #d4edda; border-color: #c3e6cb; color: #155724;" : "background-color: #f8d7da; border-color: #f5c6cb; color: #721c24;")">
                                        <div style="display: flex; align-items: center, flex-direction: row; gap: 8px;">
                                            <i class="bi @(GetSavingsProgressMessage().isGood ? "bi-check-circle" : "bi-exclamation-triangle")" style="font-size: 1.2rem;"></i>
                                            <div>
                                                <strong>@GetSavingsProgressMessage().title</strong>
                                                <div style="font-size: 0.9rem; margin-top: 4px;">@GetSavingsProgressMessage().message</div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }

                            <!-- Enhanced header with large mode toggle - Same as Cost of Living -->
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; position: relative; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 12px; padding: 1rem 1.5rem;">
                                <div style="flex: 1;"></div>
                                <h5>
                                    Savings & Wealth Building - Inputs
                                </h5>
                                <div style="display: flex; gap: 16px; flex: 1; justify-content: flex-end; align-items: center;">
                                    <button class="btn btn-primary" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="() => OpenWizard(1)">
                                        <i class="bi bi-gear me-2"></i>
                                        Update Plan
                                    </button>
                                    <button class="btn btn-outline-danger" style="padding: 8px 16px; font-size: 0.9rem;" @onclick="ClearDataAsync" title="Clear saved plan data for current calculator">
                                        <i class="bi bi-trash me-1"></i>
                                        Clear Plan Data
                                    </button>
                                </div>
                            </div>

                            <SavingsPlanSections Model="@SavingsModel"
                                                 ShowAdvancedSections="@showAdvancedSetup"
                                                 OnOpenWizard="@HandleOpenWizard" />


                        </div>
                    </div>

                    <!-- Right column-->
                    <div class="col-12 col-md-2">
                        <!-- Ad Placement: Right Sidebar Top -->
                        <div class="mb-3">
                            <AdUnit Slot="2576204242"
                                    Style="display:inline-block; width:160px; height:600px; margin: 0 auto;"
                                    Format="vertical"
                                    Responsive="false"
                                    PlaceholderText="Advertisement"></AdUnit>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="grid-panel panel mt-3">
            <div class="grid-header">
                <div style="font-weight:800; font-size:1rem;">Yearly Projection</div>

                @if (showToolTipMethodology)
                {
                    <div class="info-tooltip" style="max-width: 400px;">
                        <strong>Calculation Methodology:</strong>
                        <br>• Contributions added monthly at month beginning
                        <br>• Annual growth applied to average account balance
                        <br>• Taxes calculated on taxable account growth only
                        <br>• No consideration of market volatility or timing
                        <br>• Tax rates held constant throughout projection period
                        <br>• No inflation adjustments to contribution amounts

                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipMethodology = false" title="Close">
                            <span class="bi bi-x-lg"></span>
                        </span>
                    </div>
                }
            </div>

            @if (SavingsModel.IsModelEmpty())
            {
                <div style="text-align: center; padding: 60px 20px; color: #6c757d;">
                    <div style="font-size: 2.5rem; margin-bottom: 16px;">📊</div>
                    <h5 style="color: #495057; margin-bottom: 12px;">No Projection Available</h5>
                    <p style="margin-bottom: 20px;">Complete your savings plan setup to see projections.</p>
                    <button class="btn btn-primary" @onclick="() => OpenWizard(1)">Get Started</button>
                </div>
            }
            else if (HasProjection)
            {

                <SavingsSummaryGrid Model="@SavingsModel" Rows="@yearlyBreakdown" StartCalendarYear="@DateTime.Now.Year" />

                <SavingsYearlyGrid Model="@SavingsModel" Rows="@yearlyBreakdown" />


            }
        </div>

        <div class="mt-3 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
            <div style="display: flex; align-items: flex-start; gap: 8px;">
                <div style="color: #856404; margin-top: 2px;">
                    <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
                </div>
                <div>
                    <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">Important Disclaimers & Assumptions</div>
                    <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                        <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational purposes only. Results are projections based on your inputs and simplified assumptions.</p>

                        <p style="margin-bottom: 8px;"><strong>Key Assumptions:</strong> Calculations assume steady annual growth, constant tax rates, monthly contributions at month start, and no market volatility, emergencies, or changing life circumstances.</p>

                        <p style="margin-bottom: 8px;"><strong>Limitations:</strong> This calculator does not include state taxes, inflation effects on contributions, changing tax laws, market crashes, or personal financial emergencies. It does not model withdrawals or distributions before retirement, required minimum distributions (RMDs), early withdrawal penalties, or inflation on contributions. Results assume no market volatility, job loss, or other unexpected events.</p>

                        <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial advisors who can provide personalized advice for your complete financial situation and account for factors not modeled here.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Close intro-modal-active wrapper -->
@code {
    private bool showWizard = false;
    private int wizardOpenStep = 1;
    private bool showSampleDataModal = false;
    private bool showRightDebug = false;

    public SavingsCalculatorModel SavingsModel { get; set; } = new();
    public CalendarSpendingModel RetirementModel { get; set; } = new();
    private SavingsResults? results;
    private List<YearlyBreakdown> yearlyBreakdown = new();
    private string userGuid = string.Empty;
    private const string calculatorTypeYours = "savings_yours";
    private const string calculatorTypePartners = "savings_partners";
    private string calculatorType = calculatorTypeYours;
    private bool showIntroModal = true; // Show by default unless user has opted out
    private bool dontShowIntroAgain = false;

    // Tooltip visibility flags
    private bool showToolTipCurrentAge = false;
    private bool showToolTipRetirementAge = false;
    private bool showToolTipYearsUntilRetirement = false;

    private bool showToolTipTaxableBalance = false;
    private bool showToolTipTraditionalBalance = false;
    private bool showToolTipRothBalance = false;

    private bool showToolTipTaxableContribution = false;
    private bool showToolTipTraditionalContribution = false;
    private bool showToolTipRothContribution = false;

    private bool showToolTipTaxableGrowth = false;
    private bool showToolTipTraditionalGrowth = false;
    private bool showToolTipRothGrowth = false;

    private bool showToolTipIncomeType = false;
    private bool showToolTipTaxBracket = false;
    private bool showToolTipMethodology = false;

    // UX Enhancement toggles
    private bool showSimpleView = true;
    private bool showAdvancedSetup = true;

    private bool showSurvey = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
                // Track page view once per first render
                _ = TrackPageViewAsync();

                await LoadAsync();
                // New: seed savings ages from retirement backend when savings ages are empty
                await ApplyRetirementAgesIfEmptyAsync();

                Calculate();

                await HandleIntroModal();

                // New: update survey visibility (desktop: always show; mobile handling removed because localStorage eliminated)
                await UpdateSurveyVisibilityAsync();

                StateHasChanged();
            }
            catch (Exception ex)
            {
                DebugService.AddMessage($"Init error: {ex.Message}");
            }
        }
    }

    // Try to read ages persisted by the savings/retirement wizards and apply when model ages are empty (best-effort)



    private async Task ApplyRetirementAgesIfEmptyAsync()
    {
        try
        {
            if (SavingsModel == null) SavingsModel = new SavingsCalculatorModel();

            // // If savings already has ages, nothing to do
            // var savingsHasAges =
            //     (SavingsModel.CurrentAge > 0 && SavingsModel.RetirementAge > 0);

            // if (savingsHasAges)
            //     return;

            // load retirement model from backend
            var apiBaseUrl = this.ApiUrlProvider.GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var userGuidLocal = await UserGuidService.GetOrCreateUserGuidAsync();

            try
            {
                var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuidLocal}&calculatorType=retirement_planner";
                RetirementModel = await client.GetFromJsonAsync<CalendarSpendingModel>(url) ?? new();
            }
            catch
            {
                RetirementModel = new();
            }

            if (RetirementModel == null) return;

            var changed = false;

            // If current calculator is "your" or activeTab is "your" => map from retirement's "You" fields.
            if (calculatorType == calculatorTypeYours || string.Equals(activeTab, "your", StringComparison.OrdinalIgnoreCase))
            {
                if (SavingsModel.CurrentAge <= 0 && RetirementModel.CurrentAgeYou > 0)
                {
                    SavingsModel.CurrentAge = RetirementModel.CurrentAgeYou;
                    changed = true;
                }

                if (SavingsModel.RetirementAge <= 0 && RetirementModel.RetirementAgeYou > 0)
                {
                    SavingsModel.RetirementAge = RetirementModel.RetirementAgeYou;
                    changed = true;
                }
            }
            else // partner savings calculator -> use partner fields
            {
                if (SavingsModel.CurrentAge <= 0 && RetirementModel.CurrentAgePartner > 0)
                {
                    SavingsModel.CurrentAge = RetirementModel.CurrentAgePartner;
                    changed = true;
                }

                if (SavingsModel.RetirementAge <= 0 && RetirementModel.RetirementAgePartner > 0)
                {
                    SavingsModel.RetirementAge = RetirementModel.RetirementAgePartner;
                    changed = true;
                }
            }

            if (changed)
            {
                // Persist the seeded savings model to backend so savings becomes canonical
                await SaveAsync();

                // Recalculate and update UI
                Calculate();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Seed from retirement failed: {ex.Message}");
        }
    }
    private async Task TrackPageViewAsync()
    {
        try
        {
            var apiBaseUrl = this.ApiUrlProvider.GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var route = Navigation.ToBaseRelativePath(Navigation.Uri);

            // Get UA via JS (server-side requests may not include the browser UA reliably)
            string? ua = null;
            try { ua = await JSRuntime.InvokeAsync<string>("eval", "navigator.userAgent"); } catch { }

            var dto = new { Page = "Savings", Route = route, UserGuid = userGuid, UserAgent = ua };
            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            await client.PostAsync($"{apiBaseUrl}/api/Tracking/pageview", content);
        }
        catch { }
    }

    private async Task UpdateSurveyVisibilityAsync()
    {
        try
        {
            // Detect mobile via matchMedia (<= 767px)
            var isMobile = await JSRuntime.InvokeAsync<bool>("eval", "window.matchMedia && window.matchMedia('(max-width: 767px)').matches");

            if (!isMobile)
            {
                // Desktop -> always show
                showSurvey = true;
                return;
            }

            // Mobile -> show only after ~5 page loads (per device/localStorage)
            string key = calculatorType == calculatorTypeYours
                ? "finplan-your-savings-mobile-loads"
                : "finplan-partner-savings-mobile-loads";

            var raw = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
            int count = 0;
            if (!string.IsNullOrEmpty(raw) && int.TryParse(raw, out var parsed)) count = parsed;

            count++;
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, count.ToString());

            showSurvey = count >= 5;
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Survey visibility check failed: {ex.Message}");
            // fallback: hide on error to avoid surprising mobile UX
            showSurvey = false;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task HandleIntroModal()
    {
        // Check for showIntro query parameter
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var showIntroParam = query["showIntro"];

        if (!string.IsNullOrEmpty(showIntroParam) && showIntroParam.Equals("false", StringComparison.OrdinalIgnoreCase))
        {
            // Query parameter explicitly says to hide intro
            showIntroModal = false;
            return;
        }

        showIntroModal = false;

        if (!SavingsModel.HasRealData)
        {
            // Check localStorage for intro modal preference
            string key = calculatorType == calculatorTypeYours
                ? "finplan-your-savings-wealth-building-hide-intro"
                : "finplan-partner-savings-wealth-building-hide-intro";
            var hideIntro = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
            if (!string.IsNullOrEmpty(hideIntro) && hideIntro.Equals("true", StringComparison.OrdinalIgnoreCase))
            {
                showIntroModal = false;
            }
            else
            {
                showIntroModal = true;
            }
        }
    }

    private async Task OnDontShowIntroChanged(ChangeEventArgs e)
    {
        bool checkedState = e?.Value is bool b && b;
        string key = calculatorType == calculatorTypeYours
            ? "finplan-your-savings-wealth-building-hide-intro"
            : "finplan-partner-savings-wealth-building-hide-intro";

        if (checkedState)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, "true");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
    }

    // Add these new methods
    private void CloseIntroModal()
    {
        showIntroModal = false;
        StateHasChanged();
    }

    private void Calculate()
    {
        try
        {
            var calculator = new SavingsCalculationEngine();
            results = calculator.Calculate(SavingsModel);
            yearlyBreakdown = calculator.GetYearlyBreakdown(SavingsModel);
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Calc error: {ex.Message}");
        }
    }

    private async Task LoadAsync()
    {
        try
        {
            var apiBaseUrl = this.ApiUrlProvider.GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calculatorType}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var loadedModel = System.Text.Json.JsonSerializer.Deserialize<SavingsCalculatorModel>(json,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (loadedModel != null)
                {
                    SavingsModel = loadedModel;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                //Does not exist, create an empty one
                SavingsModel = new SavingsCalculatorModel();
            }
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Load error: {ex.Message}");
        }
    }

    private bool HasProjection => yearlyBreakdown?.Any() == true;


    private async Task SaveAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(userGuid))
            {
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            }

            SavingsModel.LastUpdateDate = DateTime.UtcNow;
            var saveRequest = new PersistSavingsRequest
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = SavingsModel
            };
            var json = System.Text.Json.JsonSerializer.Serialize(saveRequest);
            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync($"{this.ApiUrlProvider.GetApiBaseUrl()}/api/FinPlan/save", content);
            if (!response.IsSuccessStatusCode)
            {
                DebugService.AddMessage($"Save failed: {response.StatusCode}");
            }

            // Always recalc so the grid becomes visible immediately after changes
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Save error: {ex.Message}");
        }
    }
    private async Task HandleWizardFinished()
    {
        try
        {
            await SaveAsync();
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Wizard finish error: {ex.Message}");
        }
    }
    private async Task HandleWizardFinished1((int AgeYou, int AgePartner) ages)
    {
        try
        {
            if (ages.AgeYou > 0) SavingsModel.RetirementAge = ages.AgeYou;
            await SaveAsync();
            Calculate();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            DebugService.AddMessage($"Wizard finish error: {ex.Message}");
        }
    }

    private async Task HandleSampleDataSelected(SavingsCalculatorModel sampleModel)
    {
        SavingsModel = sampleModel;
        await SaveAsync();
        Calculate();
        StateHasChanged();
    }

    private void OpenWizard(int step)
    {
        wizardOpenStep = step;
        showWizard = true;
    }

    private void ToggleRightDebug()
    {
        showRightDebug = !showRightDebug;
        StateHasChanged();
    }

    private string FormatMoneySafe(decimal? v) => v.HasValue ? v.Value.ToString("C0") : "-";


    private string FormatMoney(decimal? value) => value?.ToString("C0") ?? "-";


    string activeTab = "your";

    private async Task YourTabClick()
    {
        calculatorType = calculatorTypeYours;
        SetActiveTab("your");
        await LoadAsync();
        Calculate();
        await HandleIntroModal();
        StateHasChanged();
    }

    private async Task PartnerTabClick()
    {
        calculatorType = calculatorTypePartners;
        SetActiveTab("partner");
        await LoadAsync();
        Calculate();
        await HandleIntroModal();
        StateHasChanged();
    }
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }
    private bool IsMonthlyContributionsSectionComplete()
    {
        return SavingsModel.MonthlyTaxableContribution > 0 ||
               SavingsModel.MonthlyTraditionalContribution > 0 ||
               SavingsModel.MonthlyRothContribution > 0;
    }
    private bool IsMilestonesSectionComplete()
    {
        return SavingsModel.CurrentAge > 0 && SavingsModel.RetirementAge > 0;
    }
    private bool IsStartingBalancesSectionComplete()
    {
        return SavingsModel.InitialTaxableAmount > 0 ||
               SavingsModel.InitialTraditionalAmount > 0 ||
               SavingsModel.InitialRothAmount > 0;
    }


    private bool showToolTipTableHeaderTaxableYearBegin = false;
    private bool showToolTipTableHeaderTaxableContribution = false;
    private bool showToolTipTableHeaderTaxableGrowth = false;
    private bool showToolTipTableHeaderTaxableTaxPaid = false;
    private bool showToolTipTableHeaderTaxableYearEnd = false;

    private bool showToolTipTableHeaderTraditionalYearBegin = false;
    private bool showToolTipTableHeaderTraditionalContribution = false;
    private bool showToolTipTableHeaderTraditionalGrowth = false;
    private bool showToolTipTableHeaderTraditionalYearEnd = false;

    private bool showToolTipTableHeaderRothYearBegin = false;
    private bool showToolTipTableHeaderRothContribution = false;
    private bool showToolTipTableHeaderRothGrowth = false;
    private bool showToolTipTableHeaderRothYearEnd = false;

    private bool showToolTipTableHeaderTotalContributions = false;
    private bool showToolTipTableHeaderTotalGrowth = false;
    private bool showToolTipTableHeaderTotalYearEnd = false;

    private bool showToolTipTableHeaderTaxableCategory = false;
    private bool showToolTipTableHeaderTraditionalCategory = false;
    private bool showToolTipTableHeaderRothCategory = false;

    private bool showToolTipTableHeaderYear = false;
    private bool showToolTipTableHeaderAge = false;
    private bool showToolTipTableHeaderTotalsCategory = false;

    //     private string GetApiBaseUrl()
    //     {
    // #if DEBUG
    //             return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
    // #else
    //         return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
    // #endif
    //     }
    // Add this method to your @code section
    // Add this method to your @code section
    private async Task ClearDataAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Starting clear operation");
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Calculator type = {calculatorType}");

            // Confirm with user before deleting
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to clear all saved data for {(calculatorType == calculatorTypeYours ? "Your" : "Partners")} savings plan? This action cannot be undone.");

            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: User confirmation = {confirm}");

            if (!confirm)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: User cancelled operation");
                return;
            }

            if (string.IsNullOrWhiteSpace(userGuid))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Getting user GUID");
                userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            }

            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Using user GUID = {userGuid}");

            var apiBaseUrl = this.ApiUrlProvider.GetApiBaseUrl();
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: API base URL = {apiBaseUrl}");

            // Create request body for POST instead of query parameters for DELETE
            var deleteRequest = new
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType
            };

            var json = System.Text.Json.JsonSerializer.Serialize(deleteRequest);
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Request payload = {json}");

            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var endpoint = $"{apiBaseUrl}/api/FinPlan/remove";
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Making POST request to {endpoint}");

            // Use POST to delete endpoint instead of DELETE with query parameters
            var response = await client.PostAsync(endpoint, content);

            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Response status = {response.StatusCode}");
            await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Response success = {response.IsSuccessStatusCode}");

            if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Clear operation succeeded");
                DebugService.AddMessage("Plan data cleared successfully.");

                // Remove the intro modal hide localStorage key
                string key = calculatorType == calculatorTypeYours
                    ? "finplan-your-savings-wealth-building-hide-intro"
                    : "finplan-partner-savings-wealth-building-hide-intro";

                await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Removing localStorage key = {key}");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);

                // Reset the model to empty so IsModelEmpty() returns true on reload
                await JSRuntime.InvokeVoidAsync("console.log", "ClearDataAsync: Resetting calculator model to empty state");
                SavingsModel = new SavingsCalculatorModel();

                // Reload the page to reflect the cleared state
                await JSRuntime.InvokeVoidAsync("console.log", $"ClearDataAsync: Reloading page to {Navigation.Uri}");
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Failed to clear data - Status: {response.StatusCode}");
                DebugService.AddMessage($"Failed to clear data: {response.StatusCode}");

                // Log response content for debugging
                var responseContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Response content = {responseContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Exception occurred - {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", $"ClearDataAsync: Stack trace = {ex.StackTrace}");
            DebugService.AddMessage($"Error clearing data: {ex.Message}");
        }
    }


    // UX Enhancement Methods
    private void ToggleSimpleView(ChangeEventArgs e)
    {
        showSimpleView = e.Value?.ToString()?.ToLower() == "true";
        StateHasChanged();
    }

    private void ToggleAdvancedSetup(ChangeEventArgs e)
    {
        showAdvancedSetup = e.Value?.ToString()?.ToLower() == "true";
        StateHasChanged();
    }
    private void HandleOpenWizard(int step)
    {
        OpenWizard(step);
    }
    private (string title, string message, bool isGood) GetSavingsProgressMessage()
    {
        if (results == null || SavingsModel == null) return ("", "", true);

        var monthlyContributions = SavingsModel.MonthlyTaxableContribution +
                                  SavingsModel.MonthlyTraditionalContribution +
                                  SavingsModel.MonthlyRothContribution;
        var annualContributions = monthlyContributions * 12;
        var yearsToRetirement = SavingsModel.RetirementAge - SavingsModel.CurrentAge;
        var finalSavings = results.FinalAmount;

        // Simple rule of thumb: 10-15% of income saved, or $1M+ by retirement
        if (finalSavings >= 1_000_000)
        {
            return ("Great job! 🎉", $"You're projected to have {finalSavings:C0} by retirement. You're on track for a comfortable retirement!", true);
        }
        else if (finalSavings >= 500_000)
        {
            return ("Good progress! 👍", $"You're projected to have {finalSavings:C0} by retirement. Consider increasing contributions if possible.", true);
        }
        else if (annualContributions < 10_000)
        {
            return ("Consider saving more 💡", $"You're currently saving {annualContributions:C0}/year. Financial experts suggest saving 10-15% of income for retirement.", false);
        }
        else
        {
            return ("Keep it up! 💪", $"You're saving {annualContributions:C0}/year. Your projected {finalSavings:C0} is a good start - consider increasing when possible.", true);
        }
    }
}