@using FinPlan.Shared.Models.Savings
@using Microsoft.AspNetCore.Components
@using System.Reflection
@using Microsoft.AspNetCore.Components.Web

<style>
    .wizard-step-bubble {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        background: #6D5DFC; /* accent color used elsewhere */
        color: #fff;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(109,93,252,0.18);
    }
       /* In RetirementInputWizard.razor, find the step badge styling */
    .wizard-step-badge {
        /* Other properties remain the same */
        background: var(--brand-yellow); /* Change from var(--accent) or the hardcoded #6D5DFC to var(--brand-yellow) */
        color: #111;
        /* Other properties remain the same */

    }


    .wizard-header-row {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .wizard-step-text {
        color: var(--muted);
        font-size: 0.9rem;
    }

    /* Added tooltip styles */
    .info-icon {
        font-size: 0.85rem;
        color: #1F6FEB;
        cursor: pointer;
        margin-left: 0.25rem;
        transition: transform 0.2s ease, color 0.2s ease;
    }

        .info-icon:hover {
            transform: scale(1.1);
            color: #0E62DA;
        }

    .info-tooltip {
        background-color: #EBF5FF;
        border: 1px solid #BEDAFF;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        margin-top: 0.25rem;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        position: relative;
        line-height: 1.4;
    }
    /* Account Cards */
    .account-card {
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s, box-shadow 0.2s;
        height: 100%;
    }

        .account-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        }

        .account-card.taxable {
            border-top: 4px solid #4299E1; /* Blue */
        }

        .account-card.traditional {
            border-top: 4px solid #48BB78; /* Green */
        }

        .account-card.roth {
            border-top: 4px solid #805AD5; /* Purple */
        }

    .account-header {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
    }

        .account-header i {
            font-size: 1.25rem;
            margin-right: 0.5rem;
        }

        .account-header .card-title {
            margin-bottom: 0;
            font-weight: 600;
            font-size: 1.1rem;
            flex-grow: 1;
        }

    .currency-input {
        font-variant-numeric: tabular-nums;
        font-weight: 500;
    }

    .account-footer {
        margin-top: 0.5rem;
        font-size: 0.85rem;
    }

    .total-balance-panel {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        border-left: 4px solid #FFD600;
    }

    .total-amount {
        font-size: 1.5rem;
        font-weight: 700;
        font-variant-numeric: tabular-nums;
        color: #2D3748;
    }

    .growth-preview {
        background: #f8f9fa;
        padding: 10px 12px;
        border-radius: 6px;
        font-size: 0.85rem;
        margin-top: 0.5rem;
    }

    .presets-container {
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 8px;
        display: flex;
        align-items: center;
        flex-wrap: wrap;
    }

    .income-type-selector, .tax-bracket-selector {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .income-type-option, .tax-bracket-option {
        padding: 0.75rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        margin: 0;
        transition: all 0.2s ease;
    }

        .income-type-option:hover, .tax-bracket-option:hover {
            background-color: #f8f9fa;
        }

        .income-type-option.selected, .tax-bracket-option.selected {
            background-color: rgba(66, 153, 225, 0.1);
            border-color: rgba(66, 153, 225, 0.3);
        }

        .tax-bracket-option.selected {
            background-color: rgba(72, 187, 120, 0.1);
            border-color: rgba(72, 187, 120, 0.3);
        }

    @@media (max-width: 767px) {
        .income-type-option, .tax-bracket-option {
            min-height: 44px;
        }
    }
</style>

@if (Visible && Model != null)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1055;">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="wizard-header-row">
                        <span class="step-badge">@wizardStep</span>
                        <div>
                            <h5 class="modal-title" style="margin:0;">Savings Plan Inputs</h5>
                            <div class="wizard-step-text">Step @wizardStep of 5</div>
                        </div>
                    </div>
                    <button type="button" class="btn-close" aria-label="Save & Close" @onclick="CloseClicked"></button>
                </div>
                <div class="modal-body" style="min-height:360px; max-height:520px; overflow:auto;">
                    @if (wizardStep == 5)
                    {
                        <div class="row mb-4">
                            <div class="col-md-6 mb-3">
                                <div class="card account-card taxable h-100">
                                    <div class="card-body">
                                        <div class="account-header">
                                            <i class="bi bi-wallet2"></i>
                                            <h6 class="card-title">Taxable Income Type</h6>
                                        </div>
                                        <div class="income-type-selector mt-2" role="radiogroup" aria-label="Taxable income type">
                                            @foreach (var name in Enum.GetNames(typeof(FinPlan.Shared.Enums.IncomeType)))
                                            {
                                                var type = Enum.Parse<FinPlan.Shared.Enums.IncomeType>(name);
                                                var isSelected = (Model.TaxableIncomeType == type) || (Model.TaxableIncomeType == 0 && name == nameof(FinPlan.Shared.Enums.IncomeType.MixedInvestment));
                                                <label class="form-check income-type-option @(isSelected ? "selected" : "")">
                                                    <input class="form-check-input" type="radio" name="incomeTypeRadio" value="@name" checked="@isSelected" disabled />
                                                    <span class="form-check-label">
                                                        <strong>@FormatIncomeTypeName(name)</strong>
                                                        <div class="small text-muted">@GetIncomeTypeDescription(name)</div>
                                                    </span>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card account-card taxable h-100">
                                    <div class="card-body">
                                        <div class="account-header">
                                            <i class="bi bi-graph-up"></i>
                                            <h6 class="card-title">Capital Gains Realization</h6>
                                        </div>
                                        <div class="income-type-selector mt-2" role="radiogroup" aria-label="Capital gains realization">
                                            <label class="form-check income-type-option selected">
                                                <input class="form-check-input" type="radio" name="cgRealizationRadio" checked disabled />
                                                <span class="form-check-label">
                                                    <strong>Realize 25% per year</strong>
                                                    <div class="small text-muted">Tax dividends each year; tax 25% of LT/ST gains annually</div>
                                                </span>
                                            </label>
                                            <label class="form-check income-type-option">
                                                <input class="form-check-input" type="radio" name="cgRealizationRadio" disabled />
                                                <span class="form-check-label">
                                                    <strong>Other options</strong>
                                                    <div class="small text-muted">Coming soon</div>
                                                </span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" aria-label="Save & Close" @onclick="CloseClicked">Save & Close</button>
                    <button type="button" class="btn btn-primary" @onclick="PrevwizardStep" disabled="@(wizardStep == 1)">Previous</button>
                    <button type="button" class="btn btn-primary" @onclick="NextOrSubmit">@(wizardStep == 5 ? "Save & Finish" : "Save & Next")</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public SavingsCalculatorModel? Model { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback<(int AgeYou, int AgePartner)> OnFinished { get; set; }

    [Parameter]
    public int InitialStep { get; set; } = 1;

    private int wizardStep = 1;
    private bool _wasVisible = false;
    private int _lastInitialStep = 1;

    protected override void OnParametersSet()
    {
        // Ensure defaults
        if (Model != null)
        {
            if (Model.TaxableIncomeType == 0) Model.TaxableIncomeType = FinPlan.Shared.Enums.IncomeType.MixedInvestment;
            if (Model.CapitalGainsRealizationRate <= 0m || Model.CapitalGainsRealizationRate > 1m) Model.CapitalGainsRealizationRate = 0.25m;
        }

        if (Visible)
        {
            if (!_wasVisible)
            {
                if (InitialStep >= 1 && InitialStep <= 5) wizardStep = InitialStep;
                _lastInitialStep = InitialStep;
            }
            else if (InitialStep != _lastInitialStep)
            {
                if (InitialStep >= 1 && InitialStep <= 5) wizardStep = InitialStep;
                _lastInitialStep = InitialStep;
            }
        }

        _wasVisible = Visible;
    }

    private async Task PrevwizardStep()
    {
        if (wizardStep > 1)
        {
            await InvokeOnSave();
            wizardStep--;
            StateHasChanged();
        }
    }

    private async Task NextOrSubmit()
    {
        if (wizardStep < 5)
        {
            await InvokeOnSave();
            wizardStep++;
            StateHasChanged();
            return;
        }

        await InvokeOnSave();

        if (OnFinished.HasDelegate && Model != null)
        {
            await OnFinished.InvokeAsync((Model.CurrentAge, Model.CurrentAge));
        }

        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private async Task CloseClicked()
    {
        await InvokeOnSave();
        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private async Task InvokeOnSave()
    {
        try
        {
            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync();
            }
        }
        catch { }
    }

    private string FormatIncomeTypeName(string name)
    {
        return System.Text.RegularExpressions.Regex.Replace(name, "([a-z])([A-Z])", "$1 $2");
    }

    private string GetIncomeTypeDescription(string name)
    {
        return name switch
        {
            "MixedInvestment" => "Balanced mix of dividends, interest, and capital gains",
            "MostlyDividends" => "Primarily qualified dividends (preferential tax rates)",
            "MostlyLongTermGains" => "Primarily long-term capital gains (preferential tax rates)",
            "MostlyInterest" => "Primarily interest income (taxed as ordinary income)",
            _ => string.Empty
        };
    }
}