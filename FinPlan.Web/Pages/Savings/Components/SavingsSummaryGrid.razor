@using FinPlan.Shared.Models.Savings
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JSRuntime

<style>
    .ssg-row { border: 1px solid #e9ecef; border-radius: 12px; padding: 12px; }
    .ssg-chip { flex: 1 1 0%; min-width: 160px; border-radius: 8px; padding: 8px 10px; text-align: center; background: transparent; }
    .ssg-chip h6 { margin: 0 0 2px 0; font-size: 0.82rem; font-weight: 700; color: #556; }
    .ssg-val { margin: 0; font-weight: 700; font-size: 1.02rem; color: #111; }

    .ssg-duo { display: grid; grid-template-columns: auto auto; column-gap: 10px; row-gap: 2px; align-items: baseline; justify-content: center; }
    .ssg-duo small { color: #6b7280; font-weight: 600; font-size: 0.75rem; }
    .ssg-duo .v { font-weight: 700; }

    .ssg-tint-1 { background: #F8FAFC; }
    .ssg-tint-2 { background: #FFF7E6; }
    .ssg-tint-3 { background: #ECFDF5; }
    .ssg-tint-4 { background: #EEF2FF; }

    .ssg-positive { color: #0f766e; }
    .ssg-negative { color: #b91c1c; }

    /* Desktop/Mobile containers to keep views isolated */
    .ssg-desktop { display: block; }
    .ssg-mobile { display: none; }

    /* Table styles for desktop view */
    .ssg-table { width: 100%; border-collapse: collapse; }
    .ssg-table th, .ssg-table td { padding: 10px 12px; text-align: left; border-bottom: 1px solid #e9ecef; vertical-align: middle; }
    .ssg-table thead th { font-weight: 700; color: #556; font-size: 0.9rem; }
    .ssg-table tbody tr { transition: background 0.15s ease; }
    .ssg-table tbody tr:hover { box-shadow: 0 1px 4px rgba(0,0,0,0.04); }

    /* Mobile specific card styles */
    .ssg-mobile-card { border: 1px solid #e9ecef; border-radius: 12px; padding: 12px; display: flex; flex-direction: column; gap: 8px; }
    .ssg-mobile-top { display:flex; justify-content:space-between; align-items:center; gap:8px; }
    .ssg-mobile-years { font-weight:700; color:#334; font-size:0.95rem; }
    .ssg-mobile-balance { font-weight:800; font-size:1.05rem; }
    .ssg-mobile-row { display:flex; justify-content:space-between; gap:12px; }
    .ssg-mobile-label { color:#6b7280; font-size:0.78rem; font-weight:600; }
    .ssg-mobile-val { font-weight:700; }
    .ssg-mobile-actions { display:flex; justify-content:flex-end; }
    .ssg-toggle-btn { background:transparent; border:0; color:#0b5; font-weight:700; padding:6px 8px; border-radius:6px; cursor:pointer; }
    .ssg-toggle-btn:focus { outline:2px solid rgba(0,123,255,0.25); }
    .ssg-chevron { transition: transform 0.2s ease; display:inline-block; }
    .ssg-chevron.rotated { transform: rotate(180deg); }

    @@media (max-width: 767.98px) {
        .ssg-row { padding: 10px; gap: 2px !important; }
        .ssg-chip { width: 100%; min-width: 0; flex: 0 0 auto; text-align: left; padding: 6px 8px; }
        .ssg-val { font-size: 1rem; }
        .ssg-duo { grid-template-columns: 1fr 1fr; justify-content: start; row-gap: 1px; column-gap: 8px; }

        /* Show mobile view, hide desktop view */
        .ssg-desktop { display: none; }
        .ssg-mobile { display: block; }
    }
</style>

@if (Rows != null && Rows.Count > 0)
{
    var summaries = BuildFiveYearSummaries();
    if (summaries.Count > 0)
    {
        <div class="panel mb-2" style="padding:12px;">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-2 gap-1">
                <h6 class="mb-0">Five-Year Savings Summary</h6>
                <small class="text-muted">Quick overview before the detailed grid</small>
            </div>

            <!-- Desktop view (semantic table, isolated) -->
            <div class="ssg-desktop">
                @{ var idx = 0; }
                <table class="ssg-table">
                    <thead>
                        <tr>
                            <th scope="col">Years</th>
                            <th scope="col">Contributions</th>
                            <th scope="col">Growth</th>
                            <th scope="col">Taxes Paid</th>
                            <th scope="col" style="text-align:right">End Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var s in summaries)
                        {
                            var tint = GetRowTintClass(idx++);
                            <tr class="@tint">
                                <td>@s.StartYear – @s.EndYear</td>
                                <td>@s.TotalContributions.ToString("C0")</td>
                                <td>@s.TotalGrowth.ToString("C0")</td>
                                <td>@s.TotalTaxes.ToString("C0")</td>
                                <td style="text-align:right" class="@(s.EndingBalance >= 0 ? "ssg-positive" : "ssg-negative")">@s.EndingBalance.ToString("C0")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Mobile view (separate markup, easy to change independently) -->
            <div class="d-flex flex-column gap-2 ssg-mobile">
                @{ var mIdx = 0; }
                @foreach (var s in summaries)
                {
                    var tint = GetRowTintClass(mIdx);
                    <div class="ssg-mobile-card @tint" style="--idx:@mIdx;">
                        <div class="ssg-mobile-top">
                            <div class="ssg-mobile-years">@s.StartYear – @s.EndYear</div>
                            <div class="ssg-mobile-balance @(s.EndingBalance >= 0 ? "ssg-positive" : "ssg-negative")">@s.EndingBalance.ToString("C0")</div>
                        </div>
                        <div class="ssg-mobile-row">
                            <div>
                                <div class="ssg-mobile-label">Contr</div>
                                <div class="ssg-mobile-val">@s.TotalContributions.ToString("C0")</div>
                            </div>
                            <div>
                                <div class="ssg-mobile-label">Grow</div>
                                <div class="ssg-mobile-val">@s.TotalGrowth.ToString("C0")</div>
                            </div>
                        </div>
                        <div class="ssg-mobile-row">
                            <div>
                                <div class="ssg-mobile-label">Taxes Paid</div>
                                <div class="ssg-mobile-val">@s.TotalTaxes.ToString("C0")</div>
                            </div>
                            <div class="ssg-mobile-actions">
                                <button class="ssg-toggle-btn" @onclick="() => ToggleDetails(mIdx)" aria-expanded="@(IsExpanded(mIdx) ? "true" : "false")" aria-controls="details-@mIdx">
                                    Details <span class="ssg-chevron @(IsExpanded(mIdx) ? "rotated" : "")">▾</span>
                                </button>
                            </div>
                        </div>

                        @if (IsExpanded(mIdx))
                        {
                            <div id="details-@mIdx" class="mt-2" style="border-top:1px dashed rgba(0,0,0,0.04); padding-top:8px;">
                                <div class="ssg-mobile-row">
                                    <div>
                                        <div class="ssg-mobile-label">Breakdown</div>
                                        <div class="ssg-mobile-val">Contrib: @s.TotalContributions.ToString("C0")</div>
                                    </div>
                                    <div>
                                        <div class="ssg-mobile-label">Growth</div>
                                        <div class="ssg-mobile-val">@s.TotalGrowth.ToString("C0")</div>
                                    </div>
                                </div>
                                <div class="ssg-mobile-row mt-2">
                                    <div>
                                        <div class="ssg-mobile-label">Taxes</div>
                                        <div class="ssg-mobile-val">@s.TotalTaxes.ToString("C0")</div>
                                    </div>
                                    <div>
                                        <div class="ssg-mobile-label">End Balance</div>
                                        <div class="ssg-mobile-val">@s.EndingBalance.ToString("C0")</div>
                                    </div>
                                </div>
                            </div>
                        }
                        @{ mIdx++; }
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    [Parameter] public SavingsCalculatorModel Model { get; set; } = default!;
    [Parameter] public IReadOnlyList<YearlyBreakdown> Rows { get; set; } = Array.Empty<YearlyBreakdown>();
    // Calendar year that corresponds to Rows[0] (default: current year)
    [Parameter] public int StartCalendarYear { get; set; } = @DateTime.Now.Year;

    // Track expanded items for mobile view (by index)
    private HashSet<int> _expanded = new();
    private void ToggleDetails(int idx)
    {
        if (_expanded.Contains(idx)) _expanded.Remove(idx);
        else _expanded.Add(idx);
    }
    private bool IsExpanded(int idx) => _expanded.Contains(idx);

    private sealed record FiveYearSummary(
        int StartYear,
        int EndYear,
        decimal TotalContributions,
        decimal TotalGrowth,
        decimal TotalTaxes,
        decimal EndingBalance);

    private List<FiveYearSummary> BuildFiveYearSummaries()
    {
        var rows = Rows?.OrderBy(r => r.Year).ToList() ?? new List<YearlyBreakdown>();
        var result = new List<FiveYearSummary>();
        if (rows.Count == 0) return result;

        int baseYear = StartCalendarYear;

        // First block: if baseYear is a multiple of 5 -> 1 year; else up to next multiple of 5
        int firstBlockLen;
        if (baseYear % 5 == 0)
        {
            firstBlockLen = 1; // e.g., 2025 -> 2025-2025
        }
        else
        {
            int nextBoundary = RoundUpToMultipleOf5(baseYear); // e.g., 2023 -> 2025
            firstBlockLen = Math.Max(1, nextBoundary - baseYear); // e.g., 2023 -> 2 years (2023-2024)
        }

        int idx = 0;
        int currentYear = baseYear;
        bool isFirst = true;
        while (idx < rows.Count)
        {
            int desiredLen = isFirst ? firstBlockLen : 5;
            int take = Math.Min(desiredLen, rows.Count - idx);
            var block = rows.Skip(idx).Take(take).ToList();

            decimal Sum(Func<YearlyBreakdown, decimal> sel) => block.Sum(sel);

            var totalContr = Sum(r => r.TotalContributions);
            var totalGrowth = Sum(r => r.TotalGrowth);
            var totalTaxes = Sum(r => r.TaxesPaid);
            var endBalance = block.Last().TotalEOYBalance;

            int startY = currentYear;
            int endY = currentYear + take - 1;

            result.Add(new FiveYearSummary(
                StartYear: startY,
                EndYear: endY,
                TotalContributions: totalContr,
                TotalGrowth: totalGrowth,
                TotalTaxes: totalTaxes,
                EndingBalance: endBalance
            ));

            idx += take;
            currentYear += take;
            isFirst = false;
        }

        return result;
    }

    private static int RoundUpToMultipleOf5(int year)
    {
        int remainder = year % 5;
        return remainder == 0 ? year : year + (5 - remainder);
    }

    private static string GetRowTintClass(int index)
        => (index % 4) switch { 0 => "ssg-tint-1", 1 => "ssg-tint-2", 2 => "ssg-tint-3", _ => "ssg-tint-4" };
}