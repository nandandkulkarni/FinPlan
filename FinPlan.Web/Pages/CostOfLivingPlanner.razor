    // Stub for View Details modal to resolve CS0103 error
    private void OpenViewModal(int idx)
    {
        // TODO: Implement details modal logic
    }
                    <div class="mb-3">
                        <label for="modalAdjustOption" class="form-label">Retirement Adjust</label>
                        <select id="modalAdjustOption" class="form-select" @bind="modalAdjustOption">
                            <option value="Same">Same</option>
                            <option value="CustomPercentage">Custom %</option>
                            <option value="Manual">Manual</option>
                            <option value="AdjustForInflation">Adjust for Inflation</option>
                        </select>
                    </div>
                    @if (modalAdjustOption == "CustomPercentage")
                    {
                        <div class="mb-3">
                            <label for="modalCustomPercentage" class="form-label">Custom %</label>
                            <input id="modalCustomPercentage" class="form-control" type="number" step="1" min="0" @bind="modalCustomPercentage" />
                        </div>
                    }
                    @if (modalAdjustOption == "Manual")
                    {
                        <div class="mb-3">
                            <label for="modalManualRetirementValue" class="form-label">Manual Retirement Value</label>
                            <input id="modalManualRetirementValue" class="form-control" type="number" step="0.01" @bind="modalManualRetirementValue" />
                        </div>
                    }
                    @if (modalAdjustOption == "AdjustForInflation")
                    {
                        <div class="mb-3">
                            <label for="modalInflationSource" class="form-label">Inflation Source</label>
                            <select id="modalInflationSource" class="form-select" @bind="modalPerItemInflationSource">
                                <option value="UseGlobal">Global</option>
                                <option value="Custom">Custom</option>
                            </select>
                        </div>
                        @if (modalPerItemInflationSource == "Custom")
                        {
                            <div class="mb-3">
                                <label for="modalPerItemInflationPercent" class="form-label">Custom Inflation %</label>
                                <input id="modalPerItemInflationPercent" class="form-control" type="number" step="0.1" min="0" @bind="modalPerItemInflationPercent" />
                            </div>
                        }
                    }
                    <div class="mb-3 form-check">
                        <input class="form-check-input" type="checkbox" id="modalIncludeInRetirement" @bind="modalIncludeInRetirement" />
                        <label class="form-check-label" for="modalIncludeInRetirement">Include in Retirement</label>
                    </div>
                    <div class="mb-3">
                        <label for="modalCurrentValue" class="form-label">Current Value</label>
                        <input id="modalCurrentValue" class="form-control" type="number" step="0.01" @bind="modalCurrentValue" placeholder="Enter amount" />
                    </div>
@* Edit Item Modal *@
@if (showEditModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.25); z-index:2000;" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Item</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="modalSubcategory" class="form-label">Subcategory</label>
                        <input id="modalSubcategory" class="form-control" @bind="modalSubcategory" placeholder="Enter subcategory" />
                    </div>
                    <div class="mb-3">
                        <label for="modalFrequency" class="form-label">Frequency</label>
                        <select id="modalFrequency" class="form-select" @bind="modalFrequency">
                            <option value="Monthly">Monthly</option>
                            <option value="Quarterly">Quarterly</option>
                            <option value="Yearly">Yearly</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="modalCurrentValue" class="form-label">Current Value</label>
                        <input id="modalCurrentValue" class="form-control" type="number" step="0.01" @bind="modalCurrentValue" placeholder="Enter amount" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveEditModal">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="z-index:1999;"></div>
}
@page "/living-cost"
@using FinPlan.Shared.Models.LivingCosts
@using FinPlan.Web.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using FinPlan.Web.Services
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject FinPlan.Web.Services.UserGuidService UserGuidService
<style>
    .tab-active-custom {
        background-color: #FFD600 !important; /* Bright yellow */
        color: #222 !important; /* Black text */
        font-weight: 600;
        border: 1px solid #FFD600 !important;
        border-bottom: none !important;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s, color 0.2s;
    }

    /* non-active tabs: stronger outline on top and sides to separate from content */
    .nav-tabs .nav-item {
        margin-right: 6px; /* small gap between tabs */
    }

    /* Make non-active entire tab (li) light blue and include text + buttons */
    .nav-tabs .nav-item:not(.tab-item-active) {
        background: #e7f4ff; /* very light blue */
        border-radius: 8px 8px 0 0;
        padding: 3px 6px;
    }

    /* ensure link and action buttons inside non-active li use blue styling */
    .nav-tabs .nav-item:not(.tab-item-active) .nav-link,
    .nav-tabs .nav-item:not(.tab-item-active) .tab-action-btn {
        background: transparent;
        color: #0b5ed7; /* bootstrap primary blue */
        border-color: transparent;
    }

    .nav-tabs .nav-item:not(.tab-item-active) .tab-action-btn.btn-soft-danger {
        /* danger button on blue background: subtle red outline */
        background-color: rgba(220,53,69,0.06);
        color: #b02a37;
        border: 1px solid rgba(176,42,55,0.08);
    }

    .nav-tabs .nav-link:not(.tab-active-custom) {
        background: #fff;
        border: 1px solid rgba(0,0,0,0.16);
        border-bottom: 1px solid rgba(0,0,0,0.10);
        border-radius: 8px 8px 0 0;
        color: rgba(0,0,0,0.8);
        padding-top: .35rem;
        padding-bottom: .35rem;
        margin-bottom: -1px; /* keep tabs flush with content */
        box-shadow: 0 1px 3px rgba(0,0,0,0.04);
        z-index: 1;
        transition: background 0.12s, color 0.12s, box-shadow 0.12s;
    }

    .nav-tabs .nav-link:not(.tab-active-custom):hover {
        background: #f8f9fa;
        color: rgba(0,0,0,0.95);
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
    }

    /* active li highlight should wrap both label and action buttons */
    .tab-item-active {
        background: #FFD600;
        border-radius: 8px 8px 0 0;
        padding: 4px 6px;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

    .tab-item-active .nav-link {
        background: transparent !important;
        border: none !important;
        color: #222 !important;
        font-weight: 600;
        padding: 0.18rem 0.4rem;
    }

    /* smaller action buttons inside tabs */
    .tab-action-btn {
        padding: 0.12rem 0.28rem;
        font-size: 0.72rem;
        line-height: 1;
        border-radius: 5px;
    }

    .tab-action-btn .bi { font-size: 0.95rem; }

    /* softer danger button (light tint + muted text) */
    .btn-soft-danger {
        background-color: rgba(220, 53, 69, 0.08);
        color: #b02a37;
        border: 1px solid rgba(176, 42, 55, 0.10);
        padding: 0.14rem 0.28rem;
    }

        .btn-soft-danger:hover,
        .btn-soft-danger:focus {
            background-color: rgba(220, 53, 69, 0.12);
            color: #8a1f2a;
            text-decoration: none;
        }

    /* completely subtle text-only control */
    .btn-subtle {
        background: transparent;
        border: none;
        color: rgba(176, 42, 55, 0.85);
        padding: 0.08rem 0.18rem;
        opacity: 0.9;
    }

        .btn-subtle:hover,
        .btn-subtle:focus {
            opacity: 1;
            color: #b02a37;
            text-decoration: none;
        }

    /* small icon sizing / subtle opacity */
    .icon-muted {
        font-size: 0.95rem;
        opacity: 0.85;
    }

    /* add-category area: keep everything on a single line; allow horizontal scroll on very small viewports */
    .add-category-bar {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        padding: 10px;
        border-radius: 6px;
        display: flex;
        gap: 8px;
        align-items: center;
        margin-bottom: 12px;
        flex-wrap: nowrap; /* force single line */
        overflow-x: auto; /* allow scrolling when viewport is too narrow */
        -webkit-overflow-scrolling: touch;
    }

    /* input group: prefer to stretch but never wrap */
    .add-category-input {
        min-width: 420px; /* comfortable width to keep button on same line */
        max-width: 1200px;
        flex: 0 0 auto; /* don't shrink below min-width */
        display: flex;
        gap: 8px;
        align-items: center;
    }

    /* make the inner input flexible within the group */
    .add-category-input > .form-control {
        flex: 1 1 auto;
        min-width: 260px;
    }

    /* Keep other controls from shrinking too small */
    .add-category-bar .form-select,
    .add-category-bar .btn {
        flex: 0 0 auto;
    }

    /* Retirement Adjust column: keep select and manual input on one line */
    .retirement-adjust {
        display: flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap; /* prevent inner wrapping */
    }

    .retirement-adjust .form-select {
        flex: 0 0 160px; /* fixed width for select */
    }

    .retirement-adjust .input-group {
        flex: 0 0 160px; /* fixed width for manual input when shown */
    }

    /* On very small screens allow the cell to scroll horizontally rather than wrap */
    @@media (max-width: 650px) {
        .retirement-adjust { min-width: 320px; }
    }

    /* loading overlay styles */
    .blazor-loading-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255,255,255,0.7);
        z-index: 99999;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .blazor-loading-content {
        text-align: center;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 16px rgba(0,0,0,0.12);
        padding: 20px 28px;
        min-width: 200px;
    }

    .blazor-loading-content .spinner-border {
        width: 2.25rem;
        height: 2.25rem;
    }

    /* table scroll container: keep top controls outside and make table body scrollable */
    .table-container {
        max-height: calc(100vh - 360px); /* leave room for headers/top controls */
        overflow-y: auto;
        position: relative;
        border: 1px solid transparent; /* keeps layout stable */
    }

    /* make thead rows sticky so column headers stay visible while scrolling */
    .table-container thead th {
        position: sticky;
        z-index: 3;
        background: #fff; /* ensure header covers scrolled rows */
    }

    /* if there are two header rows, offset the second under the first */
    .table-container thead tr:nth-child(1) th { top: 0; }
    .table-container thead tr:nth-child(2) th { top: 38px; z-index:2; background: #f8f9fa; }

    /* ensure table layout doesn't collapse when scrolling */
    .table-container table { margin-bottom: 0; }

</style>

<!-- Summary Dashboard -->
<div class="card mb-3 shadow-sm" style="max-width:600px;">
    <div class="card-body d-flex flex-column flex-md-row align-items-md-center justify-content-between">
        <div>
            <div class="fw-bold">Total Current: <span class="text-primary">@FormatCurrency(TotalCurrent)</span></div>
            <div class="fw-bold">Retirement: <span class="text-success">@FormatCurrency(TotalRetirement)</span></div>
        </div>
        <div class="mt-2 mt-md-0">
            @if (TotalRetirement <= TotalCurrent * 1.1m)
            {
                <span class="badge bg-success fs-6">You’re on track!</span>
            }
            else
            {
                <span class="badge bg-warning text-dark fs-6">Review your plan</span>
            }
        </div>
    </div>
</div>


<!-- Stepper / Progress Bar -->
<nav aria-label="Progress" class="mb-3">
    <ol class="stepper d-flex flex-row list-unstyled justify-content-between align-items-center" style="max-width:600px; margin:0 auto;">
        <li class="stepper-step text-center flex-fill">
            <div class="stepper-circle bg-primary text-white">1</div>
            <div class="small">Categories</div>
        </li>
        <li class="stepper-line flex-fill"></li>
        <li class="stepper-step text-center flex-fill">
            <div class="stepper-circle bg-primary text-white">2</div>
            <div class="small">Values</div>
        </li>
        <li class="stepper-line flex-fill"></li>
        <li class="stepper-step text-center flex-fill">
            <div class="stepper-circle bg-primary text-white">3</div>
            <div class="small">Adjust</div>
        </li>
        <li class="stepper-line flex-fill"></li>
        <li class="stepper-step text-center flex-fill">
            <div class="stepper-circle bg-primary text-white">4</div>
            <div class="small">Review</div>
        </li>
    </ol>
</nav>

<style>
    .stepper-step { min-width: 80px; }
    .stepper-circle {
        width: 32px; height: 32px; border-radius: 50%;
        display: flex; align-items: center; justify-content: center;
        font-weight: bold; font-size: 1.1rem; margin: 0 auto 4px auto;
    }
    .stepper-line {
        height: 4px; background: #e0e0e0; margin: 0 0.5rem; border-radius: 2px;
    }
</style>

<h3>Cost of Living Planner</h3>
<p class="text-muted">Enter your current breakdown of costs. Expand a category to view or edit its details. Totals update automatically.</p>

<!-- Save status indicator -->
<div class="d-flex align-items-center mb-2">
    @if (isSaving || (autosaveTimer != null && autosaveTimer.Enabled))
    {
        <div class="spinner-border spinner-border-sm text-primary me-2" role="status" aria-hidden="true"></div>
        <span class="small text-muted">Saving…</span>
    }
    else if (!string.IsNullOrEmpty(lastSaveMessage))
    {
        <span class="small text-success">@lastSaveMessage</span>
    }
    else if (!string.IsNullOrEmpty(saveErrorMessage))
    {
        <span class="small text-danger">Save error: @saveErrorMessage</span>
    }
</div>

<!-- Tab Navigation -->
<ul class="nav nav-tabs mb-3" role="tablist">
    @foreach (var t in Tabs)
    {
        // add active class on li so highlight can wrap both label and actions
        <li class="nav-item d-flex align-items-center me-1 @(activeTab == t ? "tab-item-active" : "")" role="presentation">
            <button class="nav-link @(activeTab == t ? "tab-active-custom" : "")" role="tab" aria-selected="@(activeTab == t ? "true" : "false")" tabindex="0" @onkeydown="(KeyboardEventArgs e) => HandleTabKey(e, t)" @onclick="() => OnTabClick(t)">
                @GetTabLabel(t)
            </button>

            <!-- Edit / header input and delete controls placed outside the tab button but inside the li so highlight wraps them -->
            @if (IsEditing(t))
            {
                <div class="d-flex align-items-center ms-2">
                    <input class="form-control form-control-sm" style="width:160px;" @bind="TabHeaders[t]" @onkeydown="(KeyboardEventArgs e) => HandleHeaderKey(e, t)" />
                    <button class="btn tab-action-btn btn-primary ms-2" @onclick="() => SaveTabHeader(t)" disabled="@isSaving">Save</button>
                    <button class="btn tab-action-btn btn-secondary ms-1" @onclick="() => CancelEdit(t)" disabled="@isSaving">Cancel</button>
                </div>
            }
            else
            {
                <div class="d-flex align-items-center ms-2">
                    <button class="btn tab-action-btn btn-link p-0" title="Edit tab header" @onclick="() => ToggleEdit(t)" disabled="@isSaving">
                        <span class="bi bi-pencil-square"></span>
                    </button>
                    <button class="btn tab-action-btn btn-soft-danger ms-2" title="Delete tab" @onclick="() => ConfirmDeleteTab(t)" disabled="@isSaving">
                        <span class="bi bi-trash-fill"></span>
                    </button>
                </div>
            }
        </li>
    }
    <li class="nav-item">
        <button type="button" class="nav-link btn btn-sm btn-outline-primary ms-2" title="Add new tab" @onclick="AddNewTab" disabled="@(isAddingTab || isSaving)">+
        </button>
    </li>
</ul>   
<EditForm Model="this">

    <div class="text-start">
        <label class="mb-1 small">Years to retirement / Inflation</label>
        <div class="d-flex mb-1">
               <InputNumber class="form-control form-control-sm me-2" style="width:80px;" @bind-Value="YearsToRetirement" @onblur="() => ScheduleAutosave()" @onkeydown="(KeyboardEventArgs e) => HandleNumericKey(e)" />
               <InputNumber class="form-control form-control-sm" style="width:90px;" @bind-Value="InflationRate" @onblur="() => ScheduleAutosave()" @onkeydown="(KeyboardEventArgs e) => HandleNumericKey(e)" />
        </div>
    </div>

    <!-- Add category / quick add controls -->
    <div class="add-category-bar">
        <div class="d-flex align-items-center add-category-input">
            <input class="form-control form-control-sm" placeholder="New category name" @bind="NewCategoryName" @onkeydown="HandleAddCategoryKey" />
            <button class="btn btn-primary btn-sm ms-2" type="button" @onclick="AddCategory" disabled="@isSaving">Add Category</button>
        </div>

        <div class="text-muted small ms-2">or</div>

        <div class="d-flex align-items-center">
            <label class="small me-2 mb-0">Add item to:</label>
            <InputSelect TValue="string" class="form-select form-select-sm" style="width:220px;" @bind-Value="SelectedAddCategory">
                @foreach (var c in Categories)
                {
                    <option value="@c">@c</option>
                }
                <option value="@NewCategorySentinel">-- New category --</option>
            </InputSelect>
            <button class="btn btn-success btn-sm ms-2" @onclick="AddRow" disabled="@isSaving">Add item</button>
        </div>
    </div>

    <div class="accordion" id="costCategoryAccordion">
        @{
            var groups = Items.GroupBy(i => i.Category ?? string.Empty).OrderBy(g => g.Key ?? string.Empty);
            int catIdx = 0;
        }
        @foreach (var group in groups)
        {
            var groupKey = group.Key ?? string.Empty;
            var groupCurrentTotal = group.Sum(i => i.CurrentValue);
            var groupRetirementTotal = group.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate));
            var expanded = !IsCollapsed(groupKey);
            var collapseId = $"catCollapse_{catIdx}";
            <div class="card mb-2">
                <div class="card-header d-flex align-items-center justify-content-between" style="cursor:pointer;" @onclick="() => ToggleCollapse(groupKey)">
                    <div>
                        <span class="me-2">@groupKey</span>
                        <span class="badge bg-secondary">Current: @FormatCurrency(groupCurrentTotal)</span>
                        <span class="badge bg-primary ms-2">Retirement: @FormatCurrency(groupRetirementTotal)</span>
                    </div>
                    <div>
                        <button class="btn btn-success btn-sm me-2" title="Add item" @onclick:stopPropagation="true" @onclick="() => AddItemToCategory(groupKey)">+</button>
                        <button class="btn btn-sm btn-soft-danger" title="Remove category" aria-label="Remove category" @onclick:stopPropagation="true" @onclick="() => RemoveCategory(groupKey)" disabled="@isSaving">
                            <span class="bi bi-trash-fill icon-muted" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
                <div class="collapse @(expanded ? "show" : "")" id="@collapseId">
                    <div class="card-body p-2">
                        <table class="table table-sm mb-0">
                            <thead>
                                <tr>
                                    <th style="width:40px;">&nbsp;</th>
                                    <th style="width:120px;">Frequency<br/>Units</th>
                                    <th style="width:140px;">Subcategory</th>
                                    <th style="width:140px;">$Per Unit</th>
                                    <th style="width:140px;">$Per Month</th>
                                    <th style="width:320px;">Retirement Adjust</th>
                                    <th style="width:160px;">Inflation</th>
                                    <th style="width:60px;">Incl.</th>
                                    <th style="width:180px;">Retirement Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in group.OrderBy(i => i.Subcategory ?? string.Empty))
                                {
                                    var idx = Items.IndexOf(item);
                                    <tr>
                                        <td style="width:40px; vertical-align:middle;">
                                            <div class="d-flex flex-column gap-1">
                                                <button class="btn btn-sm btn-subtle" title="Edit item" aria-label="Edit item" @onclick="() => OpenEditModal(idx)" disabled="@isSaving">
                                                    <span class="bi bi-pencil"></span>
                                                </button>
                                                <button class="btn btn-sm btn-subtle" title="Remove item" aria-label="Remove item" @onclick="() => RemoveItem(idx)" disabled="@isSaving">
                                                    <span class="icon-muted">−</span>
                                                </button>
                                            </div>
                                        </td>
                                        <td style="width:120px; vertical-align:top;">
                                            <InputSelect class="form-select form-select-sm" @bind-Value="item.Frequency" @onchange="() => ScheduleAutosave()">
                                                @foreach (var f in Enum.GetValues(typeof(FinPlan.Shared.Models.LivingCosts.Frequency)).Cast<FinPlan.Shared.Models.LivingCosts.Frequency>())
                                                {
                                                    <option value="@f">@f.ToString()</option>
                                                }
                                            </InputSelect>
                                        </td>
                                        <td>
                                            <div>
                                                <input class="form-control form-control-sm" @bind="item.Subcategory" placeholder="Subcategory" @onblur="ScheduleAutosave" />
                                            </div>
                                        </td>
                                        <td style="width:140px;">
                                            <FormattedNumber class="form-control form-control-sm" @bind-Value="item.CurrentValue" Decimals="0" @onblur="ScheduleAutosave" />
                                        </td>
                                        <td style="width:140px; vertical-align:top; text-align:right;">
                                            <div class="fw-bold">@FormatCurrency(item.GetMonthlyEquivalent())</div>
                                        </td>
                                        <td style="width:320px;">
                                            <div class="retirement-adjust">
                                            <select class="form-select form-select-sm" @bind="item.AdjustOption" @onblur="ScheduleAutosave">
                                                @foreach (var opt in Enum.GetValues(typeof(RetirementAdjustOption)))
                                                {
                                                    if (opt.ToString() == "Remove") continue; // hide Remove from UI
                                                    <option value="@opt">@opt</option>
                                                }
                                            </select>

                                            @if (item.AdjustOption == RetirementAdjustOption.CustomPercentage)
                                            {
                                                <div class="input-group input-group-sm">
                                                    <input class="form-control" type="number" step="1" min="0" @bind="item.CustomPercentage" @onblur="ScheduleAutosave" />
                                                    <span class="input-group-text">%</span>
                                                </div>
                                            }

                                            @if (item.AdjustOption == RetirementAdjustOption.Manual)
                                            {
                                                <div class="input-group input-group-sm" style="width:180px;">
                                                    <FormattedNullableNumber class="form-control text-success" @bind-Value="item.ManualRetirementValue" Decimals="0" @onblur="ScheduleAutosave" />
                                                    <span class="input-group-text">@System.Globalization.CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol</span>
                                                </div>
                                            }
                                            </div>
                                        </td>
                                        <td style="width:160px; vertical-align:middle;">
                                            @if (item.AdjustOption == RetirementAdjustOption.AdjustForInflation)
                                            {
                                                <div class="d-flex gap-2 align-items-center">
                                                    <select class="form-select form-select-sm" style="width:170px;" @bind="item.PerItemInflationSource" @onblur="ScheduleAutosave">
                                                        <option value="@InflationSource.UseGlobal">Global (@FormatDecimal(InflationRate)%)</option>
                                                        <option value="@InflationSource.Custom">Custom</option>
                                                    </select>
                                                    @if (item.PerItemInflationSource == InflationSource.Custom)
                                                    {
                                                        <div class="input-group input-group-sm" style="width:120px;">
                                                            <input class="form-control text-danger" type="number" step="0.1" min="0" @bind="item.PerItemInflationPercent" @onblur="ScheduleAutosave" />
                                                            <span class="input-group-text">%</span>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </td>
                                        <td style="width:60px; vertical-align:middle; text-align:center;">
                                            <input class="form-check-input" type="checkbox" @bind="item.IncludeInRetirement" id="inc_@idx" @oninput="ScheduleAutosave" />
                                        </td>
                                        <td style="width:180px; vertical-align:middle;">
                                            <div class="fw-bold">@FormatCurrency(item.GetRetirementValue(YearsToRetirement, InflationRate))</div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            catIdx++;
        }
    </div>
</EditForm>

@* Loading overlay shown while initial API calls are in progress *@
@if (isLoading)
{
    <div class="blazor-loading-modal">
        <div class="blazor-loading-content">
            <div class="spinner-border text-primary" role="status"></div>
            <div class="mt-2 fw-bold">Loading...</div>
        </div>
    </div>
}

@* Undo toast for recent removals *@
@if (showUndoToast)
{
    <div style="position:fixed; right:16px; bottom:16px; z-index:1060;">
        <div class="card shadow-sm" style="min-width:220px;">
            <div class="card-body p-2 d-flex align-items-center justify-content-between">
                <div class="small text-truncate me-2">Item removed</div>
                <div>
                    <button class="btn btn-sm btn-link" @onclick="UndoRemove">Undo</button>
                </div>
            </div>
        </div>
    </div>
}

@* Timeout / retry modal *@
@if (showTimeoutModal)
{
    <div class="modal-backdrop fade show" style="z-index:1040"></div>
    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
        <div class="modal-dialog modal-sm" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Request timed out</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="DismissTimeoutModal"></button>
                </div>
                <div class="modal-body">
                    <p class="small">@timeoutMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary btn-sm" @onclick="DismissTimeoutModal">Dismiss</button>
                    <button class="btn btn-primary btn-sm" @onclick="RetryOperation">Retry</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Edit Item Modal state
    private bool showEditModal = false;
    private int editItemIndex = -1;
    private string modalSubcategory = string.Empty;
    private string modalFrequency = "Monthly";
    private decimal modalCurrentValue = 0m;
    private string modalAdjustOption = "Same";
    private decimal modalCustomPercentage = 0m;
    private decimal? modalManualRetirementValue = null;
    private string modalPerItemInflationSource = "UseGlobal";
    private decimal modalPerItemInflationPercent = 0m;
    private bool modalIncludeInRetirement = true;

    private void OpenEditModal(int idx)
    {
        if (idx >= 0 && idx < Items.Count)
        {
            editItemIndex = idx;
            var item = Items[idx];
            modalSubcategory = item.Subcategory ?? string.Empty;
            modalFrequency = item.Frequency.ToString();
            modalCurrentValue = item.CurrentValue;
            modalAdjustOption = item.AdjustOption.ToString();
            modalCustomPercentage = item.CustomPercentage;
            modalManualRetirementValue = item.ManualRetirementValue;
            modalPerItemInflationSource = item.PerItemInflationSource.ToString();
            modalPerItemInflationPercent = item.PerItemInflationPercent ?? 0;
            modalIncludeInRetirement = item.IncludeInRetirement;
            showEditModal = true;
        }
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editItemIndex = -1;
        modalSubcategory = string.Empty;
        modalFrequency = "Monthly";
        modalCurrentValue = 0m;
        modalAdjustOption = "Same";
        modalCustomPercentage = 0m;
        modalManualRetirementValue = null;
        modalPerItemInflationSource = "UseGlobal";
        modalPerItemInflationPercent = 0m;
        modalIncludeInRetirement = true;
    }

    private void SaveEditModal()
    {
        if (editItemIndex >= 0 && editItemIndex < Items.Count)
        {
            var item = Items[editItemIndex];
            item.Subcategory = modalSubcategory;
            if (Enum.TryParse<FinPlan.Shared.Models.LivingCosts.Frequency>(modalFrequency, out var freq))
                item.Frequency = freq;
            item.CurrentValue = modalCurrentValue;
            if (Enum.TryParse<RetirementAdjustOption>(modalAdjustOption, out var adj))
                item.AdjustOption = adj;
            item.CustomPercentage = modalCustomPercentage;
            item.ManualRetirementValue = modalManualRetirementValue;
            if (Enum.TryParse<InflationSource>(modalPerItemInflationSource, out var infl))
                item.PerItemInflationSource = infl;
            item.PerItemInflationPercent = modalPerItemInflationPercent;
            item.IncludeInRetirement = modalIncludeInRetirement;
            StateHasChanged();
            ScheduleAutosave();
        }
        CloseEditModal();
    }
    private List<CostItem> Items { get; set; } = new List<CostItem>(); // = StandardCostCategories.GetDefaults();

    private int YearsToRetirement { get; set; } = 20;
    private decimal InflationRate { get; set; } = 2.5m;

    private bool isLoading = false;

    // Saving state for UI
    private bool isSaving = false;
    private string lastSaveMessage = string.Empty;
    private string saveErrorMessage = string.Empty;

    // Only dynamic tabs; start with a single default plan (plan-a)
    private string activeTab = "plan-a"; // Track active tab for UI highlighting

    private List<string> dynamicTabs = new List<string>();
    // Always include the built-in "plan-a" tab first so UI shows a default tab when no dynamic tabs exist.
    private IEnumerable<string> Tabs
    {
        get
        {
            // Ensure TabHeaders has default for built-in tab
            if (!TabHeaders.ContainsKey("plan-a")) TabHeaders["plan-a"] = "Plan-A";

            // Return plan-a first, then any dynamic tabs (excluding duplicates)
            var result = new List<string> { "plan-a" };
            foreach (var t in dynamicTabs)
            {
                if (!string.Equals(t, "plan-a", StringComparison.OrdinalIgnoreCase) && !result.Contains(t)) result.Add(t);
            }
            return result;
        }
    }

    private Dictionary<string,string> TabHeaders = new Dictionary<string,string>();

    // Lightweight fpDebug helpers - non-blocking
    private void Log(string message)
    {
        try { _ = JSRuntime.InvokeVoidAsync("fpDebug.log", $"CostOfLiving: {message}"); } catch { }
    }
    private void LogError(string message)
    {
        try { _ = JSRuntime.InvokeVoidAsync("fpDebug.error", $"CostOfLiving ERROR: {message}"); } catch { }
    }

    private string GetTabLabel(string tab)
    {
        if (TabHeaders.ContainsKey(tab) && !string.IsNullOrWhiteSpace(TabHeaders[tab])) return TabHeaders[tab];
        // fallback: convert id to nicer label
        if (string.Equals(tab, "plan-a", StringComparison.OrdinalIgnoreCase)) return "Plan-A";
        return tab;
    }

    private HashSet<string> editingTabs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

    private bool IsEditing(string tab) => editingTabs.Contains(tab);
    private void ToggleEdit(string tab)
    {
        if (editingTabs.Contains(tab)) editingTabs.Remove(tab);
        else
        {
            if (!TabHeaders.ContainsKey(tab)) TabHeaders[tab] = GetTabLabel(tab);
            editingTabs.Add(tab);
        }
    }

    private void CancelEdit(string tab)
    {
        if (TabHeaders.ContainsKey(tab) == false)
            TabHeaders[tab] = GetTabLabel(tab);
        editingTabs.Remove(tab);
    }

    private void HandleHeaderKey(KeyboardEventArgs e, string tab)
    {
        if (e.Key == "Enter")
        {
            _ = SaveTabHeader(tab);
        }
        else if (e.Key == "Escape")
        {
            CancelEdit(tab);
        }
    }

    private void HandleTabKey(KeyboardEventArgs e, string tab)
    {
        if (e == null) return;

        if (e.Key == "ArrowLeft" || e.Key == "ArrowRight")
        {
            var list = Tabs.ToList();
            if (list.Count <= 1) return;
            var idx = list.IndexOf(tab);
            if (idx < 0) idx = 0;
            idx = e.Key == "ArrowLeft" ? (idx - 1 + list.Count) % list.Count : (idx + 1) % list.Count;
            var next = list[idx];
            // navigate visually and load data
            _ = OnTabClick(next);
        }
        else if (e.Key == "Enter" || e.Key == " ")
        {
            _ = OnTabClick(tab);
        }
    }

    private string MapTabToCalculatorType(string tab)
    {
        // All tabs map to CostOfLiving-{tabId}
        return $"CostOfLiving-{tab}";
    }

    private async Task SaveTabHeader(string tab)
    {
        Log($"SaveTabHeader start: {tab}");
        // Load existing data so we don't overwrite items when updating header
        try
        {
            var calcType = MapTabToCalculatorType(tab);
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var loadUrl = $"{apiBaseUrl}/api/CostOfLiving/load?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calcType)}";
            CostOfLivingData? data = null;

            try
            {
                var resp = await client.GetAsync(loadUrl);
                Log($"SaveTabHeader: load call returned {(int)resp.StatusCode}");
                if (resp.IsSuccessStatusCode)
                {
                    var j = await resp.Content.ReadAsStringAsync();
                    data = System.Text.Json.JsonSerializer.Deserialize<CostOfLivingData>(j, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
            }
            catch (Exception exLoad)
            {
                LogError($"SaveTabHeader load error: {exLoad.Message}");
            }

            if (data == null)
            {
                // No existing saved data - use defaults
                data = new CostOfLivingData
                {
                    Items = StandardCostCategories.GetDefaults(),
                    YearsToRetirement = YearsToRetirement,
                    InflationRate = InflationRate,
                    CollapsedCategories = collapsed.ToList()
                };
            }

            data.Header = TabHeaders.ContainsKey(tab) ? TabHeaders[tab] : GetTabLabel(tab);

            var dto = new PersistCostOfLivingRequest
            {
                UserGuid = userGuid,
                CalculatorType = calcType,
                Data = data
            };

            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var saveUrl = $"{apiBaseUrl}/api/CostOfLiving/save";
            var saveResp = await client.PostAsync(saveUrl, content);
            Log($"SaveTabHeader: save returned {(int)saveResp.StatusCode}");
            if (saveResp.IsSuccessStatusCode)
            {
                editingTabs.Remove(tab);
                await LoadTabsAsync();
                StateHasChanged();
                Log($"SaveTabHeader success: {tab}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Save header failed: {saveResp.StatusCode}");
                LogError($"SaveTabHeader failed status: {saveResp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving header: {ex.Message}");
            LogError($"SaveTabHeader exception: {ex.Message}");
        }
    }

    private bool isAddingTab = false;

    private static string NumberToLetters(int number)
    {
        // Convert 1 -> A, 26 -> Z, 27 -> AA, etc.
        var sb = new System.Text.StringBuilder();
        while (number > 0)
        {
            number--; // 1-based
            int rem = number % 26;
            sb.Insert(0, (char)('A' + rem));
            number = number / 26;
        }
        return sb.ToString();
    }

    private async Task AddNewTab()
    {
        Log("AddNewTab start");
        if (isAddingTab) return; // guard re-entrancy
        isAddingTab = true;
        try
        {
            // determine header based on total tabs + 1 converted to letters
            // use Tabs (which includes built-in and existing dynamic tabs)
            int totalTabs = Tabs.Count();
            int candidateIndex = totalTabs + 1; // add 1 to the count

            // ensure TabHeaders has default Plan-A if not present
            if (!TabHeaders.ContainsKey("plan-a")) TabHeaders["plan-a"] = "Plan-A";

            var existingNames = new HashSet<string>(TabHeaders.Values, StringComparer.OrdinalIgnoreCase);

            string headerName;
            do
            {
                var letters = NumberToLetters(candidateIndex);
                headerName = $"Plan-{letters}";
                candidateIndex++;
            } while (existingNames.Contains(headerName));

            var newTab = $"tab-{DateTime.Now:yyMMddHHmmss}"; // keep id as before

            // prepare initial data using standard defaults and the new header
            var initialData = new CostOfLivingData
            {
                Header = headerName,
                Items = StandardCostCategories.GetDefaults(),
                YearsToRetirement = YearsToRetirement,
                InflationRate = InflationRate,
                CollapsedCategories = collapsed.ToList()
            };

            var dto = new PersistCostOfLivingRequest
            {
                UserGuid = userGuid,
                CalculatorType = $"CostOfLiving-{newTab}",
                Data = initialData
            };

            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var saveUrl = $"{apiBaseUrl}/api/CostOfLiving/save";
            var resp = await client.PostAsync(saveUrl, content);
            Log($"AddNewTab: save returned {(int)resp.StatusCode}");
            if (resp.IsSuccessStatusCode)
            {
                // reload canonical tabs and headers
                await LoadTabsAsync();

                // ensure local map
                TabHeaders[newTab] = headerName;

                // add to dynamicTabs if not present
                if (!dynamicTabs.Contains(newTab)) dynamicTabs.Add(newTab);

                // select new tab
                await OnTabClick(newTab);
                StateHasChanged();
                Log($"AddNewTab success: {newTab} / {headerName}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Create tab failed: {resp.StatusCode}");
                LogError($"AddNewTab failed status: {resp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error creating tab: {ex.Message}");
            LogError($"AddNewTab exception: {ex.Message}");
        }
        finally
        {
            isAddingTab = false;
        }
    }

    private async Task ConfirmDeleteTab(string tab)
    {
        try
        {
            var header = TabHeaders.ContainsKey(tab) ? TabHeaders[tab] : tab;
            var ok = await JSRuntime.InvokeAsync<bool>("confirm", $"Delete tab '{header}'? This will remove saved data.");
            if (ok) await DeleteTab(tab);
        }
        catch (Exception ex)
        {
            LogError($"ConfirmDeleteTab exception: {ex.Message}");
        }
    }

    private async Task DeleteTab(string tab)
    {
        Log($"DeleteTab start: {tab}");
        try
        {
            var calcType = MapTabToCalculatorType(tab);
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/CostOfLiving/tabs?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calcType)}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.DeleteAsync(url);
            Log($"DeleteTab: delete returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                // remove locally
                dynamicTabs.Remove(tab);
                if (TabHeaders.ContainsKey(tab)) TabHeaders.Remove(tab);

                // reload tabs
                await LoadTabsAsync();

                // if deleted tab was active, switch to first available
                if (activeTab == tab)
                {
                    activeTab = Tabs.FirstOrDefault() ?? "plan-a";
                    calculatorType = MapTabToCalculatorType(activeTab);
                    await LoadFromApi();
                }

                StateHasChanged();
                Log($"DeleteTab success: {tab}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Delete failed: {response.StatusCode}");
                LogError($"DeleteTab failed status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error deleting tab: {ex.Message}");
            LogError($"DeleteTab exception: {ex.Message}");
        }
    }

    private async Task LoadTabsAsync()
    {
        Log("LoadTabsAsync start");
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/CostOfLiving/tabs?userGuid={Uri.EscapeDataString(userGuid)}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            // reduce timeout for this non-critical call so UI can proceed if API is slow
            try { client.Timeout = TimeSpan.FromSeconds(10); } catch { }
            var response = await client.GetAsync(url);
            Log($"LoadTabsAsync: tabs call returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var list = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (list != null)
                {
                    dynamicTabs = list.Select(s => s.StartsWith("CostOfLiving-") ? s.Substring("CostOfLiving-".Length) : s).ToList();

                    // ensure headers dictionary has defaults for built-in tabs
                    if (!TabHeaders.ContainsKey("plan-a")) TabHeaders["plan-a"] = "Plan-A";

                    // load headers for each dynamic tab
                    foreach (var t in dynamicTabs)
                    {
                        var dataUrl = $"{apiBaseUrl}/api/CostOfLiving/load?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString($"CostOfLiving-{t}")}";
                        var resp = await client.GetAsync(dataUrl);
                        Log($"LoadTabsAsync: load header for {t} returned {(int)resp.StatusCode}");
                        if (resp.IsSuccessStatusCode)
                        {
                            var j = await resp.Content.ReadAsStringAsync();
                            try
                            {
                                var d = System.Text.Json.JsonSerializer.Deserialize<CostOfLivingData>(j, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                                if (d != null) TabHeaders[t] = d.Header ?? t;
                            }
                            catch (Exception ex)
                            {
                                TabHeaders[t] = t;
                                LogError($"LoadTabsAsync header parse failed for {t}: {ex.Message}");
                            }
                        }
                        else
                        {
                            TabHeaders[t] = t;
                        }
                    }

                    Log($"LoadTabsAsync success: {dynamicTabs.Count} tabs");
                }
            }
        }
        catch (OperationCanceledException oce)
        {
            // Timeout or cancellation - continue with defaults
            LogError($"LoadTabsAsync timeout/cancelled: {oce.Message}");
            dynamicTabs = new List<string>();
            if (!TabHeaders.ContainsKey("plan-a")) TabHeaders["plan-a"] = "Plan-A";
            // Show modal to allow retry
            ShowTimeout(OperationType.LoadTabs, "Loading tabs timed out. You can retry.");
        }
        catch (Exception ex)
        {
            LogError($"LoadTabsAsync exception: {ex.Message}");
            // ensure we have at least the default tab so UI remains usable
            dynamicTabs = new List<string>();
            if (!TabHeaders.ContainsKey("plan-a")) TabHeaders["plan-a"] = "Plan-A";
            ShowTimeout(OperationType.LoadTabs, $"Loading tabs failed: {ex.Message}");
        }
    }

    // when loading tab data, pick up header if present
    private async Task LoadFromApi()
    {
        Log($"LoadFromApi start: {calculatorType}");
        var apiBaseUrl = GetApiBaseUrl();
        var url = $"{apiBaseUrl}/api/CostOfLiving/load?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calculatorType)}";

        try
        {
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            // shorter timeout to avoid long blocking during initial render
            try { client.Timeout = TimeSpan.FromSeconds(12); } catch { }
            var response = await client.GetAsync(url);
            Log($"LoadFromApi: call returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                try
                {
                    var data = System.Text.Json.JsonSerializer.Deserialize<CostOfLivingData>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (data != null)
                    {
                        // restore top-level settings
                        YearsToRetirement = data.YearsToRetirement;
                        InflationRate = data.InflationRate;
                        collapsed = new HashSet<string>(data.CollapsedCategories ?? new List<string>());

                        Items = data.Items ?? new List<CostItem>();

                        // set header mapping for current activeTab
                        if (!string.IsNullOrWhiteSpace(activeTab))
                        {
                            TabHeaders[activeTab] = data.Header ?? GetTabLabel(activeTab);
                        }

                        StateHasChanged();
                        Log($"LoadFromApi success: items={Items.Count}");
                        return;
                    }
                }
                catch (Exception ex)
                {
                    LogError($"LoadFromApi parse error: {ex.Message}");
                }

                // Fallback: try deserialize into raw list of items
                var loaded = System.Text.Json.JsonSerializer.Deserialize<List<CostItem>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (loaded != null)
                {
                    Items = loaded;
                    StateHasChanged();
                    Log($"LoadFromApi fallback list loaded: items={Items.Count}");
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // no saved data, load defaults
                Items = StandardCostCategories.GetDefaults();
                StateHasChanged();
                Log("LoadFromApi: not found - using defaults");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Load failed: {response.StatusCode}");
                LogError($"LoadFromApi failed status: {response.StatusCode}");
            }
        }
        catch (OperationCanceledException oce)
        {
            LogError($"LoadFromApi timeout/cancelled: {oce.Message}");
            // fallback to defaults so UI remains usable
            Items = StandardCostCategories.GetDefaults();
            StateHasChanged();
            ShowTimeout(OperationType.LoadFromApi, "Loading calculator data timed out. You can retry.");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading: {ex.Message}");
            LogError($"LoadFromApi exception: {ex.Message}");
            ShowTimeout(OperationType.LoadFromApi, $"Loading data failed: {ex.Message}");
        }
    }

    private void UpdateGroupCategory(string oldCategory, string newCategory)
    {
        if (oldCategory == newCategory) return;

        foreach (var it in Items.Where(i => (i.Category ?? string.Empty) == (oldCategory ?? string.Empty)))
        {
            it.Category = newCategory;
        }
    }

    private HashSet<string> collapsed = new HashSet<string>();

    private void AddItemToCategory(string category)
    {
        Log($"AddItemToCategory: {category}");
        var cat = category ?? string.Empty;
        var newItem = new CostItem
        {
            Category = cat,
            Subcategory = "<new item - edit me>",
            CurrentValue = 0m,
            AdjustOption = RetirementAdjustOption.Same,
            IncludeInRetirement = true
        };

        // insert at end of that category's block (just add; rendering sorts by Subcategory)
    Items.Add(newItem);
    StateHasChanged();
    ScheduleAutosave();
    }

    private void ToggleCollapse(string category)
    {
        var key = category ?? string.Empty;
        if (collapsed.Contains(key)) collapsed.Remove(key);
        else collapsed.Add(key);
    }

    private bool IsCollapsed(string category)
    {
        return collapsed.Contains(category ?? string.Empty);
    }

    private decimal TotalCurrent => Math.Round(Items.Sum(i => i.CurrentValue), 2);

    private decimal TotalPerMonth => Math.Round(Items.Sum(i => i.GetMonthlyEquivalent()), 2);

    private decimal TotalRetirement => Math.Round(Items.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate)), 2);

    private static string FormatCurrency(decimal value)
    {
        return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C0}", value);
    }

    private string FormatDecimal(decimal value)
    {
        return value.ToString("0.0", System.Globalization.CultureInfo.CurrentCulture);
    }

    // Missing fields and helper methods restored
    private string NewCategorySentinel { get; } = "__new__";
    private string SelectedAddCategory { get; set; } = string.Empty;
    private string NewCategoryName { get; set; } = string.Empty;

    private List<string> Categories => Items.Select(i => i.Category ?? string.Empty).Distinct().OrderBy(c => c).ToList();

    private void RefreshCategories()
    {
        InvokeAsync(StateHasChanged);
    }

    private void AddCategory()
    {
        var newCat = (NewCategoryName ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(newCat)) return;
        if (Categories.Contains(newCat))
        {
            SelectedAddCategory = newCat;
            NewCategoryName = string.Empty;
            return;
        }

        var newItem = new CostItem
        {
            Category = newCat,
            Subcategory = "<new item - edit me>",
            CurrentValue = 0m,
            AdjustOption = RetirementAdjustOption.Same,
            IncludeInRetirement = true
        };

        Items.Add(newItem);
        RefreshCategories();
        SelectedAddCategory = newCat;
        NewCategoryName = string.Empty;
        StateHasChanged();
        ScheduleAutosave();
    }

    private void AddRow()
    {
        var category = SelectedAddCategory == NewCategorySentinel ? (string.IsNullOrWhiteSpace(NewCategoryName) ? "Uncategorized" : NewCategoryName) : SelectedAddCategory;
        var newItem = new CostItem { Category = category, Subcategory = "", CurrentValue = 0m };
        Items.Add(newItem);
        if (SelectedAddCategory == NewCategorySentinel && !string.IsNullOrWhiteSpace(NewCategoryName))
        {
            RefreshCategories();
            SelectedAddCategory = NewCategoryName;
            NewCategoryName = string.Empty;
        }
        ScheduleAutosave();
    }

    // remove with undo support
    private CostItem? lastRemovedItem = null;
    private int lastRemovedIndex = -1;
    private System.Timers.Timer? undoTimer;
    private bool showUndoToast = false;

    private void RemoveItem(int index)
    {
        if (index >= 0 && index < Items.Count)
        {
            lastRemovedIndex = index;
            lastRemovedItem = Items[index];
            Items.RemoveAt(index);

            showUndoToast = true;
            StateHasChanged();

            // start undo timer; if expires, finalize by saving
            if (undoTimer == null)
            {
                undoTimer = new System.Timers.Timer(5000);
                undoTimer.AutoReset = false;
                undoTimer.Elapsed += async (_, __) =>
                {
                    try
                    {
                        showUndoToast = false;
                        await InvokeAsync(async () => await SaveToApi());
                        lastRemovedItem = null;
                        lastRemovedIndex = -1;
                        StateHasChanged();
                    }
                    catch (Exception ex)
                    {
                        LogError($"undoTimer elapsed exception: {ex.Message}");
                    }
                };
            }
            else
            {
                undoTimer.Stop();
                undoTimer.Interval = 5000;
            }
            undoTimer.Start();
        }
    }

    private void UndoRemove()
    {
        if (lastRemovedItem != null)
        {
            var insertIndex = Math.Min(Math.Max(0, lastRemovedIndex), Items.Count);
            Items.Insert(insertIndex, lastRemovedItem);
            lastRemovedItem = null;
            lastRemovedIndex = -1;
            showUndoToast = false;
            if (undoTimer != null)
            {
                try { undoTimer.Stop(); undoTimer.Dispose(); } catch { }
                undoTimer = null;
            }
            ScheduleAutosave();
            StateHasChanged();
        }
    }

    private void RemoveCategory(string category)
    {
        if (string.IsNullOrEmpty(category)) return;
        Items.RemoveAll(i => (i.Category ?? string.Empty) == category);
        ScheduleAutosave();
    }

    // user & calculatorType fields and API helpers
    private string userGuid = Guid.NewGuid().ToString();
    private string calculatorType = "CostOfLiving_Your";

     private string GetApiBaseUrl()
    {
#if DEBUG
            return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

    private async Task SaveToApi()
    {
        Log("SaveToApi start");
        isSaving = true;
        saveErrorMessage = string.Empty;
        lastSaveMessage = string.Empty;
        InvokeAsync(StateHasChanged);

        var apiBaseUrl = GetApiBaseUrl();
        var url = $"{apiBaseUrl}/api/CostOfLiving/save";

        try
        {
            string headerToSave = string.Empty;
            const string prefix = "CostOfLiving-";
            if (!string.IsNullOrEmpty(calculatorType) && calculatorType.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
            {
                var tabId = calculatorType.Substring(prefix.Length);
                if (TabHeaders != null && TabHeaders.ContainsKey(tabId)) headerToSave = TabHeaders[tabId];
            }

            var dto = new PersistCostOfLivingRequest
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = new CostOfLivingData
                {
                    Header = headerToSave,
                    Items = Items.Select(i => new CostItem
                    {
                        Category = i.Category,
                        Subcategory = i.Subcategory,
                        CurrentValue = i.CurrentValue,
                        AdjustOption = i.AdjustOption,
                        PerItemInflationPercent = i.PerItemInflationPercent,
                        PerItemInflationSource = i.PerItemInflationSource,
                        CustomPercentage = i.CustomPercentage,
                        ManualRetirementValue = i.ManualRetirementValue,
                        IncludeInRetirement = i.IncludeInRetirement
                    }).ToList(),
                    CollapsedCategories = collapsed.ToList(),
                    YearsToRetirement = YearsToRetirement,
                    InflationRate = InflationRate
                }
            };

            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync(url, content);
            Log($"SaveToApi: save returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Saved Cost of Living");
                Log("SaveToApi success");
                lastSaveMessage = $"Saved {DateTime.Now:T}";
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Save failed: {response.StatusCode}");
                LogError($"SaveToApi failed status: {response.StatusCode}");
                saveErrorMessage = $"{response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving: {ex.Message}");
            LogError($"SaveToApi exception: {ex.Message}");
            saveErrorMessage = ex.Message;
        }
        finally
        {
            isSaving = false;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SelectedAddCategory = Categories.FirstOrDefault() ?? NewCategorySentinel;
        Log("OnInitialized");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Log("OnAfterRenderAsync firstRender start");
            // show loading indicator while we fetch user data and tabs
            isLoading = true;
            StateHasChanged();

            try
            {
                try
                {
                    userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
                    Log($"OnAfterRenderAsync got userGuid: {userGuid}");
                }
                catch (Exception exGet) { LogError($"UserGuidService.GetOrCreateUserGuidAsync failed: {exGet.Message}"); }

                await LoadTabsAsync();

                if (!Tabs.Contains(activeTab))
                {
                    // If there are no dynamic tabs returned, keep the existing activeTab (default "plan-a").
                    // Otherwise select the first available tab safely.
                    activeTab = Tabs.FirstOrDefault() ?? activeTab ?? "plan-a";
                }

                calculatorType = MapTabToCalculatorType(activeTab);

                await LoadFromApi();
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
                Log("OnAfterRenderAsync firstRender end");
            }
        }
    }

    private System.Timers.Timer? autosaveTimer;
    private readonly object autosaveLock = new object();
    private int autosaveDelayMs = 800; // debounce

    private void ScheduleAutosave()
    {
        Log("ScheduleAutosave called");
        lock (autosaveLock)
        {
            if (autosaveTimer == null)
            {
                autosaveTimer = new System.Timers.Timer(autosaveDelayMs);
                autosaveTimer.AutoReset = false;
                autosaveTimer.Elapsed += async (_, __) =>
                {
                    try
                    {
                        await InvokeAsync(async () => await SaveToApi());
                    }
                    catch (Exception ex)
                    {
                        LogError($"autosave timer handler exception: {ex.Message}");
                    }
                };
            }
            else
            {
                autosaveTimer.Stop();
                autosaveTimer.Interval = autosaveDelayMs;
            }

            autosaveTimer.Start();
        }
    }

    public void Dispose()
    {
        if (autosaveTimer != null)
        {
            try { autosaveTimer.Dispose(); } catch { }
            autosaveTimer = null;
        }

        if (undoTimer != null)
        {
            try { undoTimer.Dispose(); } catch { }
            undoTimer = null;
        }
    }

    private void HandleAddCategoryKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddCategory();
    }

    private void HandleNumericKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ScheduleAutosave();
        }
    }

    private async Task OnTabClick(string tab)
    {
        if (activeTab == tab) return;
        Log($"OnTabClick: switching to {tab}");
        activeTab = tab;
        calculatorType = MapTabToCalculatorType(tab);
        await LoadFromApi();
    }

    private enum OperationType { None, LoadTabs, LoadFromApi }
    private bool showTimeoutModal = false;
    private string timeoutMessage = string.Empty;
    private OperationType failedOperation = OperationType.None;

    private void ShowTimeout(OperationType op, string message)
    {
        failedOperation = op;
        timeoutMessage = message;
        showTimeoutModal = true;
        InvokeAsync(StateHasChanged);
    }

    private void DismissTimeoutModal()
    {
        showTimeoutModal = false;
        failedOperation = OperationType.None;
        timeoutMessage = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private async Task RetryOperation()
    {
        showTimeoutModal = false;
        var op = failedOperation;
        failedOperation = OperationType.None;
        timeoutMessage = string.Empty;
        // Refresh UI
        StateHasChanged();

        try
        {
            if (op == OperationType.LoadTabs)
            {
                Log("User triggered retry: LoadTabsAsync");
                await LoadTabsAsync();
                // if tabs loaded and activeTab missing, ensure selection
                if (!Tabs.Contains(activeTab)) activeTab = Tabs.FirstOrDefault() ?? "plan-a";
                calculatorType = MapTabToCalculatorType(activeTab);
                // After reloading tabs, try loading data for the active tab
                await LoadFromApi();
            }
            else if (op == OperationType.LoadFromApi)
            {
                Log("User triggered retry: LoadFromApi");
                await LoadFromApi();
            }
        }
        catch (Exception ex)
        {
            LogError($"RetryOperation failed: {ex.Message}");
            // Show modal again with updated message
            ShowTimeout(op, $"Retry failed: {ex.Message}");
        }
    }
}
