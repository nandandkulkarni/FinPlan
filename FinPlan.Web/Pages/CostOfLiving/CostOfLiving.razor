@page "/future-cost-of-living"
@using FinPlan.Shared.Models.LivingCosts
@using FinPlan.Web.Components
@using FinPlan.Web.Pages.CostOfLiving.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using FinPlan.Web.Services
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject FinPlan.Web.Services.UserGuidService UserGuidService

<style>
    /* ----------------------------
                                                                                                                       Tweakable values
                                                                                                                       - TAB_PANEL_TOP_OFFSET: how far the panel is pulled up under the tabs (negative pulls up)
                                                                                                                       - TAB_PANEL_PADDING_TOP: extra top padding inside the panel to avoid overlapping content
                                                                                                                       Adjust these values to fine tune the 'kiss' between tabs and panel.
                                                                                                                       ---------------------------- */
    /* Example: change --tab-panel-top-offset to -8px or -4px to tweak */
    /* CSS variables used below for convenience */
    :root {
        --tab-panel-top-offset: -6px; /* Tweak this to move the panel up/down (more negative => more overlap) */
        --tab-panel-padding-top: 26px; /* Tweak this to add internal spacing at top if panel overlaps tabs */
    }

     .survey-card {
        border-right: 8px solid #1F6FEB !important;
        border-top: 1px solid #e9ecef;
        border-bottom: 1px solid #e9ecef;
        border-left: 1px solid #e9ecef;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(31,111,235,0.08);
        background: #fff;
    }

    .survey-card-narrow {
        width: 75%;
        min-width: 180px;
        max-width: 320px;
        margin-left: 0;
        margin-right: auto;
        align-self: flex-start;
    }

    /* Compact Mode Toggle Styles */
    .form-switch .form-check-input {
        transition: all 0.2s ease;
    }
    
    .form-switch .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    .form-switch .form-check-input:focus {
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.2);
    }

    /* Large form switch for modal - 2x bigger */
    .form-check-modal-lg .form-check-input {
        width: 4rem;
        height: 2rem;
    }
    
    .form-check-modal-lg .form-check-label {
        font-size: 1rem;
        font-weight: 600;
        margin-left: 0.75rem;
    }
    
    .modal-mode-toggle {
        padding: 0.5rem 1rem;
        background: rgba(13, 110, 253, 0.05);
        border: 1px solid rgba(13, 110, 253, 0.1);
        border-radius: 8px;
    }


    /* Add missing empty-state styles */
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
    }


    .start-planning-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(1px);
        z-index: 20;
        pointer-events: none;
    }

        .start-planning-overlay .empty-state {
            background: rgba(255, 255, 255, 0.95);
            border: 2px solid #FFD600;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            margin: 20px;
            border-radius: 12px;
            padding: 40px;
            pointer-events: auto; /* Ensure the overlay content is clickable */
        }
    /* ensure tab row doesn't leave default bottom spacing */
    /* .nav, .nav-tabs, .nav.nav-tabs.mb-3 {
                                            margin-bottom: 0 !important; /* override bootstrap utility margin */
    padding-bottom: 0;
    position: relative; /* allow stacking with panel box */
    z-index: 100;
    }
    */

    /* Ensure navigation stays clickable */
    /* .nav, .nav-tabs, .nav.nav-tabs.mb-3 {
                                            margin-bottom: 0 !important;
                                            padding-bottom: 0;
                                            position: relative;
                                            z-index: 200; /* Higher than overlay */
    }

    */
    /* Ensure the top navigation stays above the overlay */
    .top-strip {
        position: relative;
        z-index: 1030; /* This matches your MainLayout z-index */
    }
    /* Blur and disable the tab navigation when overlay is active */
    .nav-tabs.overlay-blur {
        filter: blur(2px);
        transition: filter 0.3s ease;
        pointer-events: none; /* This makes the tabs non-clickable */
        opacity: 0.7; /* Optional: reduce opacity to make it more obvious they're disabled */
    }

    .section-card {
        /* darker border for stronger separation from the background */
        border: 1px solid rgba(16,24,36,0.12);
        padding: 10px;
        border-radius: 8px;
        display: flex;
        flex-direction: column;
        min-height: 92px;
        background: #fff;
    }

        .section-card .actions {
            margin-top: auto; /* push to bottom of the card */
            display: flex;
            justify-content: flex-end;
            gap: 8px;
        }

    .btn-edit {
        background: #1F6FEB; /* professional blue */
        color: #ffffff;
        border: 0;
        padding: 7px 12px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        /* Force left alignment inside the .actions flex container */
        margin-right: auto;
        align-self: center; /* keep vertical centering in the flex row */
    }


    /* Ensure left sidebar navigation stays clickable */
    .col-12.col-md-2 {
        position: relative;
        z-index: 150; /* Higher than overlay */
    }



    /* Panel that encloses everything below the tabs.
                                                                                                                       Use positioning (top) instead of negative margin to avoid layout gaps from surrounding elements.
                                                                                                                       Tweak the CSS variables above to adjust placement and padding. */
    .tab-panel-box {
        border: 2px solid #C79A00; /* dark yellow border */
        border-radius: 8px; /* matches tab corner feel */
        padding: var(--tab-panel-padding-top) 18px 20px 18px; /* top padding controlled by variable */
        margin-top: 0; /* reset margin approach */
        top: var(--tab-panel-top-offset); /* pull panel up under tabs - adjust variable above */
        position: relative; /* enable top offset */
        background: #ffffff; /* panel background; adjust for dark theme if needed */
        box-shadow: 0 4px 12px rgba(0,0,0,0.04);
        z-index: 10;
        /* ensure panel's top border isn't clipped by parent overflow */
        overflow: visible;
    }

    /* If using dark theme, slightly different background so border remains visible */
    .dark-theme .tab-panel-box {
        background: #171717;
    }

    /* Ensure active tab renders above the panel */
    .tab-item-active, .nav-link.tab-active-custom {
        position: relative;
        z-index: 30;
        margin-bottom: 0; /* prevent extra gap from tab element itself */
    }

    /* keep panel content visually aligned with rounded active tab */
    .tab-active-custom {
        background-color: #FFD600 !important;
        color: #222 !important;
        font-weight: 600;
        border: 1px solid #FFD600 !important;
        border-bottom: none !important;
        border-radius: 8px 8px 0 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        transition: background 0.2s, color 0.2s;
    }

    .tab-item-active {
        background: #FFD600;
        border-radius: 8px 8px 0 0;
        padding: 4px 6px;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

        .tab-item-active .nav-link {
            background: transparent !important;
            border: none !important;
            color: #222 !important;
            font-weight: 600;
            padding: 0.18rem 0.4rem;
        }

    .grid-yellow-bg {
        background: transparent; /* remove yellow fill */
        border-radius: 0.75rem;
        border: 1px solid rgba(255,214,0,0.18); /* keep border as requested */
        box-shadow: none; /* remove shadow */
        padding: 1rem;
    }

    /* Use Bootstrap grid for layout (2-8-2). Left and right column styling intentionally minimal so Bootstrap handles spacing. */
    /* Remove fixed sidebars; layout is now responsive using Bootstrap classes in the markup. */


    .container-fluid {
        padding-left: 16px;
        padding-right: 16px;
        box-sizing: border-box;
    }

    @@media (max-width: 992px) {
        .container-fluid {
            padding-left: 16px !important;
            padding-right: 16px !important;
        }
    }

    .sidebar-link-highlight {
        background: linear-gradient(90deg,#FFD600,#FFB800);
        color: #111 !important;
        font-weight: 700;
        padding: 10px 12px;
        border-radius: 8px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.12);
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
        transition: transform 0.12s ease, box-shadow 0.12s ease;
        border: 1px solid rgba(0,0,0,0.04);
    }

        /* Slight lift on hover/focus */
        .sidebar-link-highlight:hover,
        .sidebar-link-highlight:focus {
            transform: translateY(-2px);
            box-shadow: 0 12px 28px rgba(0,0,0,0.16);
            text-decoration: none;
        }

        /* Make icon slightly larger inside highlighted link */
        .sidebar-link-highlight .bi {
            font-size: 1.05rem;
        }

    /* Ensure it stacks nicely on small screens */
    @@media (max-width: 992px) {
        .sidebar-link-highlight {
            display: inline-flex;
            padding: 8px 10px;
            border-radius: 6px;
            box-shadow: none;
        }
    }

    .attention-wrapper {
        position: relative;
        padding-left: 44px; /* make room for the arrow */
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .attention-arrow {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        width: 20px;
        height: 20px;
        pointer-events: none;
        z-index: 5;
    }

        .attention-arrow svg {
            width: 100%;
            height: 100%;
            fill: #111;
            filter: drop-shadow(0 6px 12px rgba(0,0,0,0.12));
            animation: arrow-bob 1.6s ease-in-out infinite;
            transform-origin: center;
        }

    /* optional gentle pulse on the highlighted link */
    .sidebar-link-highlight.attention-wrapper {
        box-shadow: 0 8px 20px rgba(255, 182, 0, 0.10);
        transition: box-shadow 0.18s ease, transform 0.12s ease;
    }

    @@keyframes arrow-bob {
        0% {
            transform: translateY(-50%) translateX(0) rotate(0deg);
        }

        25% {
            transform: translateY(-58%) translateX(2px) rotate(-6deg);
        }

        50% {
            transform: translateY(-50%) translateX(0) rotate(0deg);
        }

        75% {
            transform: translateY(-54%) translateX(1px) rotate(6deg);
        }

        100% {
            transform: translateY(-50%) translateX(0) rotate(0deg);
        }
    }

    /* Grid typography tweaks: smaller, no bold to reduce visual weight */
    .card-body .table,
    .grid-yellow-bg .table,
    .table.table-sm {
        font-size: 0.88rem; /* slightly smaller than default */
    }

    .table thead th {
        font-size: 0.92rem;
        font-weight: 600; /* keep headers slightly emphasized but not overly bold */
    }

    .table tbody td,
    .table tbody th {
        font-weight: 400 !important; /* remove bold in grid body */
        color: #222;
    }

    /* Neutralize utility bold classes inside the grid so markup doesn't force heavy weight */
    .table .fw-bold,
    .table .fw-semibold,
    .table strong,
    .table b {
        font-weight: 400 !important;
    }

    /* Tighten spacing a little so reduced font doesn't create too much white space */
    .table td, .table th {
        padding: 0.45rem 0.5rem;
    }

    /* Simple Mode Styling */
    .simple-mode .complex-column { 
        display: none !important; 
    }
    
    .simple-mode .table { 
        font-size: 1rem; 
    }
    
    .simple-mode .card-header { 
        background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%);
        font-size: 1.1rem;
        border: none;
    }

    .simple-mode .card-header .small {
        font-size: 0.9rem !important;
    }

    /* Reduce tooltip overload in simple mode */
    .simple-mode .info-tooltip { 
        display: none; 
    }

    .simple-mode .bi-info-circle {
        display: none;
    }

    /* Keep essential info icons in simple mode */
    .simple-mode .essential-info {
        display: inline !important;
    }

    }
</style>

@* Replace the inline modal with the reusable component *@
@* Replace previous component invocation with explicit C# expressions so Blazor doesn't emit invalid attribute names *@
<EditAssumptionsModal Visible="@showAssumptionsModal"
                      YearsToRetirement="@YearsToRetirement"
                      InflationRate="@InflationRate"
                      OnSave="@(values => OnAssumptionsSaved(values))"
                      OnClose="@( () => CloseAssumptions() )" />




@* Add Item Modal (root level for correct binding) *@


@* Unified Item Modal (Add/Edit) *@

@* Unified Item Modal (Add/Edit) with info icons and inline tooltips *@

@* Unified Item Modal (Add/Edit) with info icons and inline tooltips + close (X) *@
@if (showAddItemModal)
{
    <div class="modal-backdrop fade show" style="z-index:1040"></div>
    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content shadow" style="border-top: 4px solid #1F6FEB; overflow: hidden;">
                <div class="modal-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="modal-title d-flex align-items-center mb-0">
                        <span class="bi @(isEditItemMode ? "bi-pencil-square" : "bi-plus-circle") me-2 text-primary"></span>
                        @if (isSimpleMode)
                        {
                            @(isEditItemMode ? "Edit Expense" : "Add New Expense")
                        }
                        else
                        {
                            @(isEditItemMode ? "Edit Item" : "Add New Item")
                        }
                        @if (!string.IsNullOrWhiteSpace(addItemCategory))
                        {
                            <small class="text-muted ms-2">in @addItemCategory</small>
                        }
                    </h5>
                    
                    <div class="d-flex align-items-center gap-3">
                        <!-- Large Mode Toggle in Modal -->
                        <div class="modal-mode-toggle d-flex align-items-center gap-3">
                            <div class="text-center">
                                <div class="fw-bold text-primary mb-1">
                                    @(isSimpleMode ? "🎯 Simple Mode" : "⚙️ Advanced Mode")
                                </div>
                                <small class="text-muted">
                                    @(isSimpleMode ? "Easy & basic" : "All features")
                                </small>
                            </div>
                            <div class="form-check form-switch form-check-modal-lg">
                                <input class="form-check-input" type="checkbox" id="modalModeToggle" 
                                       checked="@(!isSimpleMode)" @onchange="ToggleSimpleMode">
                                <label class="form-check-label" for="modalModeToggle" style="cursor: pointer;">
                                    @(isSimpleMode ? "Enable Advanced" : "Simplify")
                                </label>
                            </div>
                        </div>
                        
                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddItemModal"></button>
                    </div>
                </div>

                <div class="modal-body py-4" style="background-color: #f8faff;">

                    @* Item Name *@
                    <div class="form-floating mb-3">
                        <input type="text"
                               class="form-control"
                               id="newItemName"
                               placeholder="@(isSimpleMode ? "Rent, Groceries, Gas, etc." : "e.g., Rent, Groceries, Utilities")"
                               @bind="NewItemName"
                               @bind:event="oninput"
                               @onkeydown="HandleAddItemKeyModal"
                               autofocus />
                        <label for="newItemName" class="d-flex align-items-center">
                            <span>@(isSimpleMode ? "What do you spend money on?" : "Item Name")</span>
                            <span class="bi bi-info-circle text-info ms-2 @(isSimpleMode ? "" : "")"
                                  style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                  title="What is this?"
                                  @onclick="() => showTipItemName = !showTipItemName"></span>
                        </label>
                    </div>
                    @if (showTipItemName)
                    {
                        <div class="alert alert-info py-2 px-3 mb-3 small">
                            A short, descriptive name for the expense (e.g., Rent, Groceries). This appears as the row label.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipItemName = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }

                    @if (isSimpleMode)
                    {
                        <!-- Simplified view for beginners -->
                        <div class="form-floating mb-3">
                            <input class="form-control"
                                   type="number"
                                   step="0.01"
                                   min="0"
                                   id="newItemAmountSimple"
                                   placeholder="0"
                                   @bind="NewItemAmount"
                                   @onkeydown="HandleAddItemKeyModal" />
                            <label for="newItemAmountSimple">How much per month? ($)</label>
                        </div>
                        <!-- Force monthly frequency in simple mode -->
                    }
                    else
                    {
                        <!-- Advanced view with frequency options -->
                        <div class="row g-3">
                            @* Frequency *@
                            <div class="col-12 col-md-6">
                                <label class="form-label d-flex align-items-center">
                                    <span>@(isSimpleMode ? "How often do you pay this?" : "Frequency")</span>
                                    @if (!isSimpleMode)
                                    {
                                        <span class="bi bi-info-circle text-info ms-2"
                                              style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                              title="What is this?"
                                              @onclick="() => showTipFrequency = !showTipFrequency"></span>
                                    }
                                </label>
                                <select class="form-select" @bind="NewItemFrequency">
                                    <option value="Monthly">Monthly</option>
                                    <option value="Quarterly">Quarterly</option>
                                    <option value="Yearly">Yearly</option>
                                </select>
                                @if (showTipFrequency)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                                        How often you pay this amount. We convert it to a monthly equivalent for totals.
                                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipFrequency = false">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </div>

                            @* Amount *@
                            <div class="col-12 col-md-6">
                                <label class="form-label d-flex align-items-center">
                                    <span>Amount ($)</span>
                                    <span class="bi bi-info-circle text-info ms-2"
                                          style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                          title="What is this?"
                                          @onclick="() => showTipAmount = !showTipAmount"></span>
                                </label>
                                <input class="form-control"
                                       type="number"
                                       step="0.01"
                                       min="0"
                                       @bind="NewItemAmount"
                                       @onkeydown="HandleAddItemKeyModal" />
                                @if (showTipAmount)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                                        Enter the amount in the selected frequency (e.g., a yearly premium if Frequency is Yearly).
                                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipAmount = false">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    @* Include in Retirement *@
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="newItemInclude" @bind="NewItemIncludeInRetirement" />
                        <label class="form-check-label d-inline-flex align-items-center" for="newItemInclude">
                            <span>@(isSimpleMode ? "Will you still have this cost in retirement?" : "Include in Retirement")</span>
                            <span class="bi bi-info-circle text-info ms-2 @(isSimpleMode ? "" : "")"
                                  style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                  title="What is this?"
                                  @onclick="() => showTipInclude = !showTipInclude"></span>
                        </label>
                    </div>
                    @if (showTipInclude)
                    {
                        <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                            Toggle whether this cost should be included in your retirement projection.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipInclude = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }

                    @if (NewItemIncludeInRetirement)
                    {
                        @if (isSimpleMode)
                        {
                            <!-- Simple mode: Default to inflation adjustment -->
                            <div class="mt-3">
                                <div class="alert alert-light py-2 px-3 border">
                                    <small class="text-muted">
                                        <i class="bi bi-info-circle me-1"></i>
                                        This cost will grow with inflation (@InflationRate% per year) until retirement.
                                    </small>
                                </div>
                            </div>
                        }
                        else
                        {
                            @* Advanced mode: Full retirement adjustment options *@
                            <div class="mt-3">
                                <label class="form-label d-flex align-items-center">
                                    <span>Retirement Adjustment</span>
                                    <span class="bi bi-info-circle text-info ms-2"
                                          style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                          title="What is this?"
                                          @onclick="() => showTipAdjust = !showTipAdjust"></span>
                                </label>
                                <select class="form-select" @bind="NewItemAdjustOption">
                                    <option value="Same">Same</option>
                                    <option value="CustomPercentage">Custom %</option>
                                    <option value="Manual">Manual</option>
                                    <option value="Inflation">Inflation</option>
                                </select>
                                @if (showTipAdjust)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                                        Choose how this item changes at retirement: keep the same, apply a custom percent,
                                        enter a manual retirement amount, or grow by inflation.
                                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipAdjust = false">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </div>
                        }

                        @* Custom % *@
                        @if (NewItemAdjustOption == "CustomPercentage")
                        {
                            <div class="mt-3">
                                <label class="form-label d-flex align-items-center">
                                    <span>Custom %</span>
                                    <span class="bi bi-info-circle text-info ms-2"
                                          style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                          title="What is this?"
                                          @onclick="() => showTipCustomPercent = !showTipCustomPercent"></span>
                                </label>
                                <input class="form-control" type="number" step="1" min="0" @bind="NewItemCustomPercentage" />
                                @if (showTipCustomPercent)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                                        Percentage of the current monthly amount at retirement. 50% halves it; 200% doubles it.
                                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipCustomPercent = false">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </div>
                        }

                        @* Manual *@
                        @if (NewItemAdjustOption == "Manual")
                        {
                            <div class="mt-3">
                                <label class="form-label d-flex align-items-center">
                                    <span>Manual Retirement Value</span>
                                    <span class="bi bi-info-circle text-info ms-2"
                                          style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                          title="What is this?"
                                          @onclick="() => showTipManualValue = !showTipManualValue"></span>
                                </label>
                                <input class="form-control" type="number" step="0.01" min="0" @bind="NewItemManualRetirementValueString" />
                                @if (showTipManualValue)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                                        A fixed monthly amount to use in retirement. Overrides other adjustments.
                                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipManualValue = false">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </div>
                        }

                        @* Inflation *@
                        @if (NewItemAdjustOption == "Inflation")
                        {
                            <div class="mt-3">
                                <label class="form-label d-flex align-items-center">
                                    <span>Inflation Source</span>
                                    <span class="bi bi-info-circle text-info ms-2"
                                          style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                          title="What is this?"
                                          @onclick="() => showTipInflationSource = !showTipInflationSource"></span>
                                </label>
                                <select class="form-select" @bind="NewItemPerItemInflationSource">
                                    <option value="UseGlobal">Global</option>
                                    <option value="Custom">Custom</option>
                                </select>
                                @if (showTipInflationSource)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                                        Global uses the plan’s inflation rate. Custom lets you specify a per‑item inflation rate.
                                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipInflationSource = false">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </div>

                            @if (NewItemPerItemInflationSource == "Custom")
                            {
                                <div class="mt-3">
                                    <label class="form-label d-flex align-items-center">
                                        <span>Custom Inflation %</span>
                                        <span class="bi bi-info-circle text-info ms-2"
                                              style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                              title="What is this?"
                                              @onclick="() => showTipCustomInflation = !showTipCustomInflation"></span>
                                    </label>
                                    <input class="form-control" type="number" step="0.1" min="0" @bind="NewItemPerItemInflationPercent" />
                                    @if (showTipCustomInflation)
                                    {
                                        <div class="alert alert-info py-2 px-3 mt-2 mb-0 small">
                                            Annual inflation rate for this item (e.g., 3 means 3% per year until retirement).
                                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipCustomInflation = false">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                </div>
                            }
                        }
                    }
                </div>

                <div class="modal-footer border-top-0 pt-0" style="background-color: #f8faff;">
                    <button class="btn btn-outline-secondary px-4" @onclick="CloseAddItemModal">Cancel</button>
                    <button class="btn btn-primary px-4 d-flex align-items-center gap-2"
                            @onclick="AddItemModalSave"
                            disabled="@(isSaving || IsAddItemDisabled)">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span class="bi @(isEditItemMode ? "bi-check2" : "bi-plus-lg")"></span>
                        }
                        @(isEditItemMode ? "Save" : "Add Item")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDetailsModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.25); z-index:2000;" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header d-flex justify-content-between align-items-center">
                    <h5 class="modal-title mb-0">@(isSimpleMode ? "Expense Details" : "Item Details")</h5>
                    
                    <div class="d-flex align-items-center gap-3">
                        <!-- Large Mode Toggle in Edit Modal -->
                        <div class="modal-mode-toggle d-flex align-items-center gap-3">
                            <div class="text-center">
                                <div class="fw-bold text-primary mb-1">
                                    @(isSimpleMode ? "🎯 Simple Mode" : "⚙️ Advanced Mode")
                                </div>
                                <small class="text-muted">
                                    @(isSimpleMode ? "Easy & basic" : "All features")
                                </small>
                            </div>
                            <div class="form-check form-switch form-check-modal-lg">
                                <input class="form-check-input" type="checkbox" id="editModalModeToggle" 
                                       checked="@(!isSimpleMode)" @onchange="ToggleSimpleMode">
                                <label class="form-check-label" for="editModalModeToggle" style="cursor: pointer;">
                                    @(isSimpleMode ? "Enable Advanced" : "Simplify")
                                </label>
                            </div>
                        </div>
                        
                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDetailsModal"></button>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Subcategory</label>
                        @if (detailsEditMode)
                        {
                            <input class="form-control" @bind="modalSubcategory" />
                        }
                        else
                        {
                            <div class="form-control-plaintext">@modalSubcategory</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@(isSimpleMode ? "How Often" : "Frequency")</label>
                        @if (detailsEditMode)
                        {
                            <select class="form-select" @bind="modalFrequency">
                                <option value="Monthly">Monthly</option>
                                <option value="Quarterly">Quarterly</option>
                                <option value="Yearly">Yearly</option>
                            </select>
                        }
                        else
                        {
                            <div class="form-control-plaintext">@modalFrequency</div>
                        }
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Current Value</label>
                        @if (detailsEditMode)
                        {
                            <input class="form-control" type="number" step="0.01" @bind="modalCurrentValue" />
                        }
                        else
                        {
                            <div class="form-control-plaintext">@FormatCurrency(modalCurrentValue)</div>
                        }
                    </div>
                    <div class="mb-3 form-check">
                        @if (detailsEditMode)
                        {
                            <input class="form-check-input" type="checkbox" id="modalIncludeInRetirement" @bind="modalIncludeInRetirement" />
                            <label class="form-check-label" for="modalIncludeInRetirement">Include in Retirement</label>
                        }
                        else
                        {
                            <label class="form-check-label">Include in Retirement:</label>
                            <span class="ms-2">@(modalIncludeInRetirement ? "Yes" : "No")</span>
                        }
                    </div>

                    <div class="mb-3">
                        @if (modalIncludeInRetirement)
                        {
                            @if (detailsEditMode)
                            {
                                <label class="form-label">Retirement Adjust</label>

                                <select class="form-select" @bind="modalAdjustOption">
                                    <option value="Same">Same</option>
                                    <option value="CustomPercentage">Custom %</option>
                                    <option value="Manual">Manual</option>
                                    <option value="Inflation">Adjust for Inflation</option>
                                </select>
                            }
                            else
                            {
                                <div class="form-control-plaintext">@modalAdjustOption</div>
                            }
                        }
                    </div>
                    @if (modalAdjustOption == "CustomPercentage" && modalIncludeInRetirement)
                    {
                        <div class="mb-3">
                            <label class="form-label">Custom %</label>
                            @if (detailsEditMode)
                            {
                                <input class="form-control" type="number" step="1" min="0" @bind="modalCustomPercentage" />
                            }
                            else
                            {
                                <div class="form-control-plaintext">@modalCustomPercentage %</div>
                            }
                        </div>
                    }
                    @if (modalAdjustOption == "Manual" && modalIncludeInRetirement)
                    {
                        <div class="mb-3">
                            <label class="form-label">Manual Retirement Value</label>
                            @if (detailsEditMode)
                            {
                                <input class="form-control" type="number" step="0.01" @bind="modalManualRetirementValue" />
                            }
                            else
                            {
                                <div class="form-control-plaintext">@FormatCurrency(modalManualRetirementValue ?? 0)</div>
                            }
                        </div>
                    }
                    @if (modalIncludeInRetirement)
                    {
                        @if (modalAdjustOption == "Inflation")
                        {
                            <div class="mb-3">
                                <label class="form-label">Inflation Source</label>
                                @if (detailsEditMode)
                                {
                                    <select class="form-select" @bind="modalPerItemInflationSource">
                                        <option value="UseGlobal">Global</option>
                                        <option value="Custom">Custom</option>
                                    </select>
                                }
                                else
                                {
                                    <div class="form-control-plaintext">@modalPerItemInflationSource</div>
                                }
                            </div>
                            @if (modalPerItemInflationSource == "Custom")
                            {
                                <div class="mb-3">
                                    <label class="form-label">Custom Inflation %</label>
                                    @if (detailsEditMode)
                                    {
                                        <input class="form-control" type="number" step="0.1" min="0" @bind="modalPerItemInflationPercent" />
                                    }
                                    else
                                    {
                                        <div class="form-control-plaintext">@modalPerItemInflationPercent %</div>
                                    }
                                </div>
                            }
                        }
                    }

                </div>
                <div class="modal-footer">
                    @if (detailsEditMode)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveDetailsModal">Save</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="EnableDetailsEdit">Edit</button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="z-index:1999;"></div>
}

<!-- Removed left sidebar nav; content moved to main container -->

<div class="container-fluid">
    <div class="row">
        <!-- Left column (2) - moved from previous left-sidebar nav -->
        <div class="col-12 col-md-2">
            @* <ul class="list-unstyled mb-0">
                <li><a class="text-decoration-none d-block py-1" href="/"><i class="bi bi-house"></i> Home</a></li>
            </ul> *@
            <a href="/about-rewealthen" class="badge">About</a>
            <div class="card survey-card survey-card-narrow mb-2">
                <div class="card-body text-center">
                    <i class="bi bi-chat-dots" style="font-size:2rem; color:#1F6FEB;"></i>
                    <div class="fw-bold mt-2 mb-1">Share Your Feedback</div>
                    <a href="/survey-future-cost-of-living" class="btn btn-primary btn-sm">
                        Take Living Cost  Survey
                    </a>
                </div>
            </div>
            <!-- Ad container for long Adsterra banner in left column -->
            <div id="adsterra-left-long" class="fp-adsterra-container mt-3 text-center">
                @((MarkupString)AdHtmlLeft)
            </div>
        </div>

        <!-- Center column (8) - main planner content -->
        <div class="col-12 col-md-8 @(isSimpleMode ? "simple-mode" : "")">
            <p class="text-muted mb-3">@(isSimpleMode ? "List your monthly expenses to see how they'll grow by retirement." : "Enter your current breakdown of costs. Expand a category to view or edit its details. Future costs update automatically.")</p>

            @* <b>Multi-city and City tiered plan coming soon</b> *@
            <!-- Save status indicator -->
            <div class="d-flex align-items-center mb-2">
                @if (isSaving || (autosaveTimer != null && autosaveTimer.Enabled))
                {
                    <div class="spinner-border spinner-border-sm text-primary me-2" role="status" aria-hidden="true"></div>
                    <span class="small text-muted">Saving…</span>
                }
                else if (!string.IsNullOrEmpty(lastSaveMessage))
                {
                    <span class="small text-success">@lastSaveMessage</span>
                }
                else if (!string.IsNullOrEmpty(saveErrorMessage))
                {
                    <span class="small text-danger">Save error: @saveErrorMessage</span>
                }
            </div>

            <!-- Tab Navigation -->
            <ul class="nav nav-tabs mb-1" role="tablist">
                @foreach (var t in Tabs)
                {
                    <li class="nav-item d-flex align-items-center me-1 @(activeTab == t ? "tab-item-active" : "")" role="presentation">
                        <button class="nav-link @(activeTab == t ? "tab-active-custom" : "")"
                                role="tab"
                                aria-selected="@(activeTab == t ? "true" : "false")"
                                tabindex="0"
                                disabled="false"
                                @onkeydown="(KeyboardEventArgs e) => HandleTabKey(e, t)"
                                @onclick="() => OnTabClick(t)">
                            @GetTabLabel(t)
                        </button>

                        @if (string.Equals(t, "Plan-A-City-A", StringComparison.OrdinalIgnoreCase))
                        {
                            <span class="bi bi-info-circle text-info ms-1"
                                  style="cursor:pointer; font-size:1rem;"
                                  title="About plans, cities and currencies"
                                  @onclick:stopPropagation="true"
                                  @onclick="TogglePlanATabInfo"></span>
                        }
                    </li>
                }
            </ul>

            @if (showTipPlanATab)
            {
                <div class="alert alert-info py-2 px-3 mb-2 small" style="max-width: 860px;">
                    Next release will allow multiple plans with different cities and currencies. You’ll be able to create and compare plans, each with its own assumptions and locale settings.
                    <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipPlanATab = false">
                        <span class="bi bi-x-lg"></span>
                    </span>
                </div>
            }

            <!-- Insert this opening tag immediately after the closing </ul> of the tab list (the ul.nav.nav-tabs ... ) -->
            <div class="tab-panel-box position-relative">
                <!-- Mode Toggle positioned to the left of Show Intro button -->
                <div class="position-absolute d-flex align-items-center gap-3" style="top: 10px; right: 120px; z-index: 100;">
                    <div class="d-flex align-items-center gap-2">
                        <span style="font-size: 1rem;">@(isSimpleMode ? "🎯" : "⚙️")</span>
                        <span class="fw-bold small @(isSimpleMode ? "text-success" : "text-primary")">
                            @(isSimpleMode ? "Beginner" : "Advanced")
                        </span>
                    </div>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="compactModeToggle" 
                               checked="@(!isSimpleMode)" @onchange="ToggleSimpleMode">
                        <label class="form-check-label small fw-bold ms-1" for="compactModeToggle" style="cursor: pointer;">
                            @(isSimpleMode ? "Advanced" : "Simple")
                        </label>
                    </div>
                </div>
                
                <!-- Show Intro button in top-right corner -->
                <button class="btn btn-sm btn-warning position-absolute"
                        style="top: 10px; right: 10px; z-index: 100;"
                        @onclick="ShowIntroWithReset">
                    <i class="bi bi-info-circle me-1"></i> Show Intro
                </button>

                <!-- Beginner-Friendly Onboarding (Simple Mode Only) - 4x Bigger -->
                @if (isSimpleMode && (!Items?.Any() ?? true))
                {
                    <div class="alert alert-primary border-0 mb-6" style="background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%); padding: 4rem 3rem; border-radius: 20px; box-shadow: 0 8px 24px rgba(0,0,0,0.1);">
                        <div class="d-flex align-items-start">
                            <i class="bi bi-lightbulb-fill text-primary me-5" style="font-size: 4rem; margin-top: 8px;"></i>
                            <div class="w-100">
                                <div class="d-flex align-items-center gap-4 mb-5">
                                    <h2 class="text-primary mb-0 display-6">Plan Your Future Living Costs</h2>
                                    <span class="badge bg-primary px-4 py-2 fs-6">Beginner Mode</span>
                                </div>
                                <p class="mb-6 text-dark fs-4 lh-base">Let's figure out how much you'll spend in retirement. We'll start with your current expenses and project them forward.</p>
                                <div class="row g-5 mb-6">
                                    <div class="col-md-6">
                                        <div class="card border-primary border-opacity-25 h-100 shadow-sm">
                                            <div class="card-body text-center py-6">
                                                <i class="bi bi-1-circle-fill text-primary mb-4" style="font-size: 4rem;"></i>
                                                <h4 class="mb-4 text-primary">Add Your Expenses</h4>
                                                <p class="mb-0 text-muted fs-5">List what you spend money on monthly</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card border-primary border-opacity-25 h-100 shadow-sm">
                                            <div class="card-body text-center py-6">
                                                <i class="bi bi-2-circle-fill text-primary mb-4" style="font-size: 4rem;"></i>
                                                <h4 class="mb-4 text-primary">See Future Costs</h4>
                                                <p class="mb-0 text-muted fs-5">We'll project your retirement expenses</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex gap-4 justify-content-center">
                                    <button class="btn btn-primary btn-lg px-5 py-4 fs-5 fw-bold" @onclick="StartWithCommonExpenses">
                                        <i class="bi bi-lightning-fill me-3"></i>Start with Common Expenses
                                    </button>
                                    <button class="btn btn-outline-primary btn-lg px-5 py-4 fs-5 fw-bold" @onclick="StartFromScratch">
                                        <i class="bi bi-pencil me-3"></i>Start from Scratch
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <!-- Planner Controls Strip -->

                <div class="section-card">
                    <div>
                        <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                            <div>Assumptions:</div>
                        </div>

                        <div class="small-note" style="margin-top:8px;">
                            <div class="d-flex flex-wrap align-items-center">
                                <!-- Years to Retirement -->
                                <div class="me-4">
                                    <span class="bi bi-info-circle text-info"
                                          style="font-size: 1.1rem; cursor: pointer;"
                                          @onclick="() => showToolTipYearsInfo = !showToolTipYearsInfo"
                                          tabindex="0"
                                          title="Click for more info"></span>
                                    <span style="font-weight: 600; color: #495057;">Years to retire:</span>
                                    <b>@YearsToRetirement</b>
                                </div>

                                <!-- Inflation Rate -->
                                <div class="me-4">
                                    <span class="bi bi-info-circle text-info"
                                          style="font-size: 1.1rem; cursor: pointer;"
                                          @onclick="() => showToolTipInflationInfo = !showToolTipInflationInfo"
                                          tabindex="0"
                                          title="Click for more info"></span>
                                    <span style="font-weight: 600; color: #495057;">Annual Inflation rate:</span>
                                    <b>@InflationRate%</b>
                                </div>

                                <button class="btn-edit" @onclick="() => OpenWizard(1)">Edit</button>
                            </div>

                            <!-- Tooltips -->
                            @if (showToolTipYearsInfo)
                            {
                                <div class="alert alert-info py-2 px-3 mt-2 mb-0 small" style="max-width: 320px;">
                                    <strong>Years to Retirement:</strong> The number of years until you expect to retire. This is used to project your future costs.
                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYearsInfo = false" title="Close">
                                        <span class="bi bi-x-lg"></span>
                                    </span>
                                </div>
                            }

                            @if (showToolTipInflationInfo)
                            {
                                <div class="alert alert-info py-2 px-3 mt-2 mb-0 small" style="max-width: 320px;">
                                    <strong>Annual Inflation Rate:</strong> The yearly percentage increase in prices of goods and services. This rate is used to project how your costs will grow over time before retirement.
                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipInflationInfo = false" title="Close">
                                        <span class="bi bi-x-lg"></span>
                                    </span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <br />

                <br />



                <!-- Totals Strip: Current and Retirement side by side -->
                <div class="totals-strip d-flex align-items-center justify-content-center gap-4 mb-3">
                    <div class="totals-strip d-flex align-items-center justify-content-center gap-4 mb-2">
                        <div class="totals-box bg-primary bg-opacity-75 text-white rounded-3 px-4 py-2 d-flex flex-column align-items-center">
                            <span class="totals-label d-flex align-items-center">
                                Current Total
                                <span class="bi bi-info-circle text-warning ms-2"
                                      style="cursor: pointer; font-size: .95rem;"
                                      title="What is this?"
                                      @onclick="() => showTipCurrentTotal = !showTipCurrentTotal"></span>
                            </span>
                            <span class="totals-value">@FormatCurrency(TotalCurrentPerMonth)</span>
                        </div>
                        <div class="totals-box bg-success bg-opacity-75 text-white rounded-3 px-4 py-2 d-flex flex-column align-items-center">
                            <span class="totals-label d-flex align-items-center">
                                Retirement Total
                                <span class="bi bi-info-circle text-warning ms-2"
                                      style="cursor: pointer; font-size: .95rem;"
                                      title="What is this?"
                                      @onclick="() => showTipRetirementTotal = !showTipRetirementTotal"></span>
                            </span>
                            <span class="totals-value">@FormatCurrency(TotalRetirement)</span>
                        </div>
                    </div>

                    @if (showTipCurrentTotal)
                    {
                        <div class="alert alert-info py-2 px-3 mb-2 small text-center" style="max-width:640px; margin:0 auto;">
                            Current Total is the sum of all items converted to monthly values across categories.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipCurrentTotal = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }
                    @if (showTipRetirementTotal)
                    {
                        <div class="alert alert-info py-2 px-3 mb-3 small text-center" style="max-width:640px; margin:0 auto;">
                            Retirement Total is the projected monthly amount at retirement using each item’s adjustment and inflation.
                            Years to retirement: <b>@YearsToRetirement</b>, Global inflation: <b>@InflationRate%</b>.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipRetirementTotal = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }
                </div>
                <div class="d-flex justify-content-center mb-3">
                    <div class="d-flex justify-content-center align-items-center gap-2 mb-2">
                        <button class="btn btn-success btn-sm rounded-pill px-4 fw-semibold shadow-sm" style="height:32px; font-size:1.04rem;"
                                type="button" @onclick:stopPropagation="true" @onclick="OpenAddCategoryModal" disabled="@isSaving">
                            <span class="bi bi-plus-lg me-1"></span> Add Category
                        </button>
                        <span class="bi bi-info-circle text-info"
                              style="cursor: pointer; font-size: 1rem;"
                              title="What is this?"
                              @onclick="() => showTipAddCategory = !showTipAddCategory"></span>
                    </div>
                    @if (showTipAddCategory)
                    {
                        <div class="alert alert-info py-2 px-3 mb-3 small text-center" style="max-width:640px; margin:0 auto;">
                            Add a new category to group related items (e.g., Housing, Food). You can add items inside it afterwards.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipAddCategory = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }
                </div>
                <div class="d-flex align-items-center mb-2" style="margin-left: 8px;">
                    <div class="d-flex align-items-center mb-2" style="margin-left: 8px;">
                        <button class="btn btn-outline-secondary btn-sm d-flex align-items-center gap-1"
                                title="@(AnyCategoryExpanded() ? "Collapse all categories" : "Expand all categories")"
                                @onclick="ToggleCollapseAllCategories">
                            <span class="bi @(AnyCategoryExpanded() ? "bi-chevron-up" : "bi-chevron-down")"></span>
                            <span>@(AnyCategoryExpanded() ? "Collapse All" : "Expand All")</span>
                        </button>
                        <span class="bi bi-info-circle text-info ms-2"
                              style="cursor: pointer; font-size: 1rem;"
                              title="What is this?"
                              @onclick="() => showTipCollapseAll = !showTipCollapseAll"></span>
                    </div>
                    @if (showTipCollapseAll)
                    {
                        <div class="alert alert-info py-2 px-3 mb-2 small" style="max-width:640px; margin-left:8px;">
                            @(AnyCategoryExpanded()
                                                    ? "Collapse all categories to condense the view."
                                                    : "Expand all categories to view every item at once.")
                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipCollapseAll = false">
                            <span class="bi bi-x-lg"></span>
                        </span>
                    </div>
                                        }
                </div>


                <style>
                    .totals-strip {
                        width: 100%;
                        max-width: 600px;
                        margin-left: auto;
                        margin-right: auto;
                    }

                    .totals-box {
                        min-width: 180px;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
                        border: 1.5px solid #e3e3e3;
                        transition: box-shadow 0.2s;
                    }

                    .totals-label {
                        font-size: 1rem;
                        font-weight: 500;
                        opacity: 0.92;
                        letter-spacing: 0.01em;
                    }

                    .totals-value {
                        font-size: 1.08rem;
                        font-weight: 700;
                        letter-spacing: 0.01em;
                        margin-top: 2px;
                    }
                </style>


                <!-- Add Category Modal (root level for correct binding) -->
                @if (showAddCategoryModal)
                {
                    <div class="modal-backdrop fade show" style="z-index:1040"></div>
                    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                        <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content shadow" style="border-top: 4px solid #1F6FEB; overflow: hidden;">
                                <div class="modal-header bg-light">
                                    <h5 class="modal-title d-flex align-items-center">
                                        <span class="bi bi-folder-plus me-2 text-primary"></span>
                                        Add New Category
                                    </h5>
                                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddCategoryModal"></button>
                                </div>
                                <div class="modal-body py-4" style="background-color: #f8faff;">
                                    <p class="text-muted small mb-3">
                                        Categories help organize your expenses. Enter a descriptive name for your category.
                                    </p>
                                    <div class="form-floating">
                                        <input type="text"
                                               class="form-control form-control-lg"
                                               id="newCategoryName"
                                               @bind="NewCategoryName"
                                               @bind:event="oninput"
                                               @onkeydown="HandleAddCategoryKeyModal"
                                               autofocus />
                                        <label for="newCategoryName">Category Name</label>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center mt-3">
                                        <small class="text-muted">@(string.IsNullOrWhiteSpace(NewCategoryName) ? "Example: Housing, Food, Transportation" : $"Adding: {NewCategoryName}")</small>
                                        <small class="@(IsAddCategoryDisabled ? "text-danger" : "text-success")">
                                            @(IsAddCategoryDisabled ? "" : "Ready to add")
                                        </small>
                                    </div>
                                </div>
                                <div class="modal-footer border-top-0 pt-0" style="background-color: #f8faff;">
                                    <button class="btn btn-outline-secondary px-4" @onclick="CloseAddCategoryModal">
                                        Cancel
                                    </button>
                                    <button class="btn btn-primary px-4 d-flex align-items-center gap-2"
                                            @onclick="AddCategoryModal"
                                            disabled="@(isSaving || IsAddCategoryDisabled)">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        }
                                        else
                                        {
                                            <span class="bi bi-plus-lg"></span>
                                        }
                                        Add Category
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="accordion" id="costCategoryAccordion">
                    @{
                        // Compute groups safely even if Items is null
                        var groups = (Items ?? new List<CostItem>()).GroupBy(i => i.Category ?? string.Empty).OrderBy(g => g.Key ?? string.Empty);
                        int catIdx = 0;
                    }
                    @foreach (var group in groups)
                    {
                        var groupKey = group.Key ?? string.Empty;
                        var groupCurrentTotal = group.Sum(i => i.GetMonthlyEquivalent);
                        var groupRetirementTotal = group.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate));
                        var expanded = !IsCollapsed(groupKey);
                        var collapseId = $"catCollapse_{catIdx}";
                        <div class="card mb-2">
                            <div class="card-header d-flex align-items-center" style="cursor:pointer;" @onclick="() => ToggleCollapse(groupKey)" title="@(expanded ? "Click to collapse" : "Click to expand")">
                                <button class="btn btn-sm btn-soft-danger me-2" title="Remove category" aria-label="Remove category" @onclick:stopPropagation="true" @onclick="() => ConfirmRemoveCategory(groupKey)" disabled="@isSaving">
                                    <span class="bi bi-trash-fill icon-muted" aria-hidden="true"></span>
                                </button>
                                <span class="me-2" style="font-weight: bold !important;">@groupKey</span>
                                <span class="bi bi-info-circle text-info me-2 @(isSimpleMode ? "" : "")"
                                      style="cursor: pointer; font-size: .95rem;"
                                      title="What is this?"
                                      @onclick:stopPropagation="true"
                                      @onclick="() => ToggleCatInfo(groupKey)"></span>
                                <span class="small text-muted d-none d-md-inline" title="@(isSimpleMode ? "Current monthly total" : "Current total")">
                                    @(isSimpleMode ? "Monthly" : "Current"): @FormatCurrency(groupCurrentTotal)
                                </span>
                                <span class="small text-muted ms-2 d-none d-md-inline" title="@(isSimpleMode ? "Future monthly total" : "Retirement total")">
                                    @(isSimpleMode ? "Future" : "Retirement"): @FormatCurrency(groupRetirementTotal)
                                </span>

                                <div class="ms-auto d-flex gap-2 align-items-center">
                                    <button class="btn btn-success btn-sm" title="@(isSimpleMode ? "Add expense" : "Add item")" @onclick:stopPropagation="true" @onclick="() => OpenAddItemModal(groupKey)">
                                        <span class="bi bi-plus"></span> @(isSimpleMode ? "Add Expense" : "Add Item")
                                    </button>
                                    <span class="bi bi-info-circle text-info @(isSimpleMode ? "" : "")"
                                          style="cursor: pointer; font-size: .95rem;"
                                          title="What is this?"
                                          @onclick:stopPropagation="true"
                                          @onclick="() => ToggleAddItemInfo(groupKey)"></span>
                                </div>
                            </div>
                            <div class="collapse @(expanded ? "show" : "")" id="@collapseId">
                                <div class="card-body p-2 grid-yellow-bg rounded-4">
                                    @if (IsCatInfoOpen(groupKey))
                                    {
                                        <div class="alert alert-info py-2 px-3 mb-2 small">
                                            This category groups related items. Click the header to expand/collapse.
                                            Use the trash icon to remove the category.
                                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => ToggleCatInfo(groupKey)">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                    @if (IsAddItemInfoOpen(groupKey))
                                    {
                                        <div class="alert alert-info py-2 px-3 mb-2 small">
                                            Add a new item under this category. You can set name, frequency, amount, and retirement adjustment.
                                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => ToggleAddItemInfo(groupKey)">
                                                <span class="bi bi-x-lg"></span>
                                            </span>
                                        </div>
                                    }
                                    <table class="table table-sm mb-0">
                                        <thead>
                                            <tr>
                                                <th class="fw-bold text-left align-middle" style="width:40px; font-weight: bold !important;">&nbsp;</th>
                                                <th class="fw-bold text-center align-middle" style="width:140px; font-weight: bold !important;">
                                                    @(isSimpleMode ? "Expense" : "Item")
                                                </th>
                                                <th class="fw-bold text-center align-middle complex-column" style="width:120px; font-weight: bold !important;">@(isSimpleMode ? "How Often" : "Frequency")<br /><span class="small">@(isSimpleMode ? "" : "(Units)")</span></th>
                                                <th class="fw-bold text-end align-middle complex-column" style="width:140px; font-weight: bold !important;">@(isSimpleMode ? "Amount" : "Per Unit")<br /><span class="small">($)</span></th>
                                                <th class="fw-bold text-end align-middle" style="width:140px; font-weight: bold !important;">
                                                    @(isSimpleMode ? "Monthly Cost" : "Per Month")<br /><span class="small">($)</span>
                                                </th>
                                                <th class="fw-bold text-center align-middle" style="width:120px; font-weight: bold !important;">
                                                    @(isSimpleMode ? "Retirement?" : "Include In")<br /><span class="small">@(isSimpleMode ? "" : "Retirement")</span>
                                                </th>
                                                <th class="fw-bold text-center align-middle complex-column" style="width:320px; font-weight: bold !important;">Retirement<br /><span class="small">Adjustment</span></th>
                                                <th class="fw-bold text-center align-middle complex-column" style="width:160px; font-weight: bold !important;">Inflation<br /><span class="small">Rate (%)</span></th>
                                                <th class="fw-bold text-end align-middle" style="width:180px; font-weight: bold !important;">
                                                    @(isSimpleMode ? "Future Cost" : "Retirement")<br /><span class="small">@(isSimpleMode ? "($)" : "Value")</span>
                                                </th>
                                            </tr>
                                        </thead>

                                        <tbody>
                                            @foreach (var item in group.OrderBy(i => i.Subcategory ?? string.Empty))
                                            {
                                                var idx = Items.IndexOf(item);
                                                <tr>
                                                    <td style="width:40px; vertical-align:middle;">
                                                        <div class="d-flex flex-column gap-1">
                                                            <button style="background: none; border: none; padding: 2px 4px; color: rgba(220, 53, 69, 0.8); font-size: 0.8rem;" title="Remove item" aria-label="Remove item" @onclick="() => ConfirmRemoveItem(idx)" disabled="@isSaving">
                                                                <span class="bi bi-trash-fill" aria-hidden="true"></span>
                                                            </button>
                                                        </div>
                                                    </td>
                                                    <td class="text-left align-middle">@item.Subcategory</td>
                                                    <td class="text-center align-middle complex-column" style="width:120px;">@item.Frequency</td>

                                                    <td class="text-end align-middle complex-column" style="width:140px;">@FormatCurrency(item.CurrentValue)</td>
                                                    <td class="text-end align-middle" style="width:140px;">
                                                        <span class="fw-bold">@FormatCurrency(item.GetMonthlyEquivalent)</span>
                                                    </td>
                                                    <td class="text-center align-middle" style="width:60px;">
                                                        @if (item.IncludeInRetirement)
                                                        {
                                                            @if (isSimpleMode)
                                                            {
                                                                <span class="badge bg-success">Yes</span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-check-lg text-success" title="Included in retirement"></i>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            @if (isSimpleMode)
                                                            {
                                                                <span class="badge bg-secondary">No</span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-x-lg text-danger" title="Not included in retirement"></i>
                                                            }
                                                        }
                                                    </td>
                                                    <td class="text-center align-middle complex-column" style="width:320px;">
                                                        @if (item.IncludeInRetirement)
                                                        {
                                                            @if (item.AdjustOption == RetirementAdjustOption.CustomPercentage)
                                                            {
                                                                <span>@item.CustomPercentage%</span>
                                                            }
                                                            else if (item.AdjustOption == RetirementAdjustOption.Manual)
                                                            {
                                                                <span>@FormatCurrency(item.ManualRetirementValue ?? 0)</span>
                                                            }
                                                            else if (item.AdjustOption == RetirementAdjustOption.Same)
                                                            {
                                                                <span>No change</span>
                                                            }
                                                            else if (item.AdjustOption == RetirementAdjustOption.Inflation)
                                                            {
                                                                <span>Inflation</span>
                                                            }
                                                        }
                                                    </td>
                                                    <td class="text-center align-middle complex-column" style="width:160px;">
                                                        @if (item.IncludeInRetirement && item.AdjustOption == RetirementAdjustOption.Inflation)
                                                        {
                                                            @if (@item.PerItemInflationSource == InflationSource.UseGlobal)
                                                            {
                                                                <span>@InflationRate%</span>

                                                            }
                                                            else if (item.PerItemInflationSource == InflationSource.Custom)
                                                            {
                                                                <span>@item.PerItemInflationPercent%</span>
                                                            }
                                                        }
                                                    </td>

                                                    <td class="text-end align-middle" style="width:180px;">
                                                        <span class="fw-bold">@FormatCurrency(item.GetRetirementValue(YearsToRetirement, InflationRate))</span>
                                                    </td>
                                                    <td style="width:120px; vertical-align:middle;">
                                                        <div class="d-flex align-items-center gap-2 justify-content-end">
                                                            <button class="btn btn-sm btn-outline-primary px-2 py-1"
                                                                    style="font-size:0.92rem; white-space:nowrap;"
                                                                    title="@(isSimpleMode ? "Edit this expense" : "View or edit this item")"
                                                                    @onclick="() => OpenEditItemModal(idx)">
                                                                <i class="bi bi-pencil-square me-1"></i>
                                                                <span class="d-none d-md-inline">@(isSimpleMode ? "Edit" : "View/Edit")</span>
                                                            </button>
                                                            <span class="bi bi-info-circle text-info @(isSimpleMode ? "" : "")"
                                                                  style="cursor: pointer; font-size: .95rem;"
                                                                  title="What is this?"
                                                                  @onclick="() => ToggleViewEditInfo(idx)"></span>
                                                        </div>
                                                    </td>
                                                </tr>
                                                @if (IsViewEditInfoOpen(idx))
                                                {
                                                    <tr>
                                                        <td colspan="10" class="p-0">
                                                            <div class="alert alert-info py-2 px-3 mb-2 small m-0">
                                                                View/Edit opens the item modal to update name, frequency, amount, and retirement adjustments
                                                                (Same, Custom %, Manual, Inflation). Changes auto‑save.
                                                                <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => ToggleViewEditInfo(idx)">
                                                                    <span class="bi bi-x-lg"></span>
                                                                </span>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        catIdx++;
                    }
                    @if (showIntroModal)
                    {
                        <!-- Overlay with Start Planning Button -->
                        <div class="start-planning-overlay">
                            <div class="empty-state">
                                <!-- X Close Button -->
                                <div class="d-flex justify-content-end">
                                    <button type="button"
                                            class="btn btn-outline-secondary"
                                            aria-label="Close"
                                            @onclick="CloseIntroModal">
                                        &#10005;
                                    </button>
                                </div>

                                <div style="font-size: 3rem; color: #6c757d; margin-bottom: 16px;">📊</div>
                                <h4 style="color: #495057; margin-bottom: 16px;">Welcome to Cost of Living Planning!</h4>
                                <p style="color: #6c757d; margin-bottom: 24px; max-width: 500px; margin-left: auto; margin-right: auto;">
                                    Let's create your personalized cost of living projection. First, let's set your key assumptions:
                                </p>

                                <!-- Key Assumptions Section -->
                                <!-- Key Assumptions Section -->
                                <!-- Key Assumptions Section -->
                                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 24px; border: 1px solid #dee2e6;">
                                    <h5 style="margin-bottom: 16px; color: #495057; text-align: center;">Key Planning Assumptions</h5>

                                    <div class="d-flex justify-content-center" style="max-width: 500px; margin: 0 auto 20px;">
                                        <!-- Two-column layout with fixed widths -->
                                        <div style="width: 50%; padding-right: 12px;">
                                            <div class="text-center mb-2">
                                                <label style="font-weight: 600; color: #495057; display: inline-block;">
                                                    Years to Retirement
                                                    <span class="bi bi-info-circle text-info ms-1"
                                                          style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                                          @onclick="() => showToolTipYearsInfo = !showToolTipYearsInfo"
                                                          tabindex="0"
                                                          title="What is this?"></span>
                                                </label>
                                            </div>
                                            <input type="number" class="form-control" @bind="YearsToRetirement" min="1" max="50"
                                                   style="text-align: center; font-weight: 600;" />
                                        </div>

                                        <div style="width: 50%; padding-left: 12px;">
                                            <div class="text-center mb-2">
                                                <label style="font-weight: 600; color: #495057; display: inline-block;">
                                                    Inflation Rate (%)
                                                    <span class="bi bi-info-circle text-info ms-1"
                                                          style="font-size: 0.9rem; cursor: pointer; vertical-align: middle;"
                                                          @onclick="() => showToolTipInflationInfo = !showToolTipInflationInfo"
                                                          tabindex="0"
                                                          title="What is this?"></span>
                                                </label>
                                            </div>
                                            <input type="number" class="form-control" @bind="InflationRate" step="0.1" min="0" max="20"
                                                   style="text-align: center; font-weight: 600;" />
                                        </div>
                                    </div>

                                    <div style="font-size: 0.85rem; color: #6c757d; text-align: center;">
                                        <i class="bi bi-info-circle me-1"></i>
                                        These values will be used to project your future costs. You can adjust them anytime.
                                    </div>

                                    <!-- Tooltips are shown below when needed -->
                                    @if (showToolTipYearsInfo || showToolTipInflationInfo)
                                    {
                                        <div class="mt-2">
                                            @if (showToolTipYearsInfo)
                                            {
                                                <div class="alert alert-info py-2 px-3 mb-0 small">
                                                    <strong>Years to Retirement:</strong> The number of years until you expect to retire.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYearsInfo = false">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                            @if (showToolTipInflationInfo)
                                            {
                                                <div class="alert alert-info py-2 px-3 mb-0 small">
                                                    <strong>Inflation Rate:</strong> Annual percentage increase in prices used for projections.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipInflationInfo = false">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>







                                <div style="display: flex; gap: 12px; justify-content: center; margin-bottom: 16px;">
                                    <button class="btn btn-primary" style="padding: 12px 24px; font-size: 1.1rem; font-weight: 600;" @onclick="StartWithDefaults">
                                        <i class="bi bi-lightning-fill me-2"></i>
                                        Start with Sample Data
                                    </button>
                                    <button class="btn btn-outline-primary" style="padding: 12px 24px; font-size: 1.1rem; font-weight: 600;" @onclick="StartFromScratch">
                                        <i class="bi bi-pencil me-2"></i>
                                        Start from Basics
                                    </button>
                                </div>

                                <!-- Don't Show Again Checkbox -->
                                <div style="margin-top: 24px; padding-top: 18px; border-top: 2px solid #FFD600; background: linear-gradient(90deg,#fffbe6,#fffde7); border-radius: 8px; box-shadow: 0 2px 12px rgba(255,214,0,0.08);">
                                    <div class="form-check d-flex align-items-center justify-content-center gap-2">

                                        <input class="form-check-input"
                                               type="checkbox"
                                               id="dontShowIntroAgainCheck"
                                               @onchange="OnDontShowIntroChanged"
                                               style="width: 1.3em; height: 1.3em; border: 2px solid #C79A00; box-shadow: 0 0 0 0.15rem rgba(255,214,0,0.25);" />
                                        <label class="form-check-label"
                                               for="dontShowIntroAgainCheck"
                                               style="font-size: 1.15rem; font-weight: 700; color: #C79A00; letter-spacing: 0.02em; padding: 8px 18px; border-radius: 6px; background: rgba(255,214,0,0.12); margin-bottom: 0; box-shadow: 0 1px 4px rgba(255,214,0,0.10); display: inline-block;">
                                            Don't show this welcome screen again
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>


                @* Loading overlay shown while initial API calls are in progress *@
                @if (isLoading)
                {
                    <div class="blazor-loading-modal">
                        <div class="blazor-loading-content">
                            <div class="spinner-border text-primary" role="status"></div>
                            <div class="mt-2 fw-bold">Loading...</div>
                        </div>
                    </div>
                }

                @* Undo toast for recent removals *@
                @if (showUndoToast)
                {
                    <div style="position:fixed; right:16px; bottom:16px; z-index:1060;">
                        <div class="card shadow-sm" style="min-width:220px;">
                            <div class="card-body p-2 d-flex align-items-center justify-content-between">
                                <div class="small text-truncate me-2">Item removed</div>
                                <div>
                                    <button class="btn btn-sm btn-link" @onclick="UndoRemove">Undo</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @* Timeout / retry modal *@
                @if (showTimeoutModal)
                {
                    <div class="modal-backdrop fade show" style="z-index:1040"></div>
                    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                        <div class="modal-dialog modal-sm" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Request timed out</h5>
                                    <button type="button" class="btn-close" aria-label="Close" @onclick="DismissTimeoutModal"></button>
                                </div>
                                <div class="modal-body">
                                    <p class="small">@timeoutMessage</p>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary btn-sm" @onclick="DismissTimeoutModal">Dismiss</button>
                                    <button class="btn btn-primary btn-sm" @onclick="RetryOperation">Retry</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if (showCreateTabModal)
                {
                    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.25); z-index:2000;" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header bg-warning-subtle">
                                    <h5 class="modal-title">Create New Plan</h5>
                                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelCreateTab"></button>
                                </div>
                                <div class="modal-body">
                                    <p>Would you like to create <strong>@GetTabLabel(pendingGhostTab)</strong>?</p>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary" @onclick="CancelCreateTab">Cancel</button>
                                    <button class="btn btn-primary" @onclick="ConfirmCreateTab">Create Plan</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="d-flex align-items-center mb-2" style="margin-left: 8px;">
                    <div class="d-flex align-items-center mb-2" style="margin-left: 8px;">
                        <button class="btn btn-outline-secondary btn-sm d-flex align-items-center gap-1"
                                title="@(AnyCategoryExpanded() ? "Collapse all categories" : "Expand all categories")"
                                @onclick="ToggleCollapseAllCategories">
                            <span class="bi @(AnyCategoryExpanded() ? "bi-chevron-up" : "bi-chevron-down")"></span>
                            <span>@(AnyCategoryExpanded() ? "Collapse All" : "Expand All")</span>
                        </button>
                        <span class="bi bi-info-circle text-info ms-2"
                              style="cursor: pointer; font-size: 1rem;"
                              title="What is this?"
                              @onclick="() => showTipCollapseAll = !showTipCollapseAll"></span>
                    </div>
                    @if (showTipCollapseAll)
                    {
                        <div class="alert alert-info py-2 px-3 mb-2 small" style="max-width:640px; margin-left:8px;">
                            @(AnyCategoryExpanded()
                                                    ? "Collapse all categories to condense the view."
                                                    : "Expand all categories to view every item at once.")
                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipCollapseAll = false">
                            <span class="bi bi-x-lg"></span>
                        </span>
                    </div>
                                        }
                </div>
            </div>
        </div>
    </div>
    <!-- Important Disclaimers -->
    <div class="mt-4 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #856404; margin-top: 2px;">
                <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">Important Disclaimers</div>
                <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                    <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational and planning purposes only. Results are projections based on your inputs and assumptions. This is not personalized financial, tax, or investment advice.</p>

                    <p style="margin-bottom: 8px;"><strong>Inflation Assumptions:</strong> Actual inflation rates vary significantly over time and by category. Real-world cost changes for housing, healthcare, food, and other expenses may differ substantially from the uniform inflation rates used in this calculator.</p>

                    <p style="margin-bottom: 8px;"><strong>Life Changes:</strong> Job transitions, family changes, health issues, geographic moves, and lifestyle adjustments are not modeled but can materially impact your actual cost of living in retirement.</p>

                    <p style="margin-bottom: 8px;"><strong>Economic Factors:</strong> Economic conditions, policy changes, technological advances, and other external factors may significantly alter future costs in ways not captured by simple inflation projections.</p>

                    <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial advisors, tax professionals, and retirement planning specialists who can provide personalized advice for your complete financial situation and retirement planning needs.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Simple Mode Toggle
    private bool isSimpleMode = true; // Start in beginner mode by default
    
    private void ToggleSimpleMode()
    {
        isSimpleMode = !isSimpleMode;
        StateHasChanged();
    }

    // Ghost tab creation modal state

    // Returns true if the Add Category button should be disabled
    private bool IsAddCategoryDisabled => false;//string.IsNullOrWhiteSpace(NewCategoryName?.Trim());

    private bool showCreateTabModal = false;
    private string pendingGhostTab = null;

    private void PromptCreateTab(string ghostTab)
    {
        pendingGhostTab = ghostTab;
        showCreateTabModal = true;
    }

    private async Task ConfirmCreateTab()
    {
        showCreateTabModal = false;
        pendingGhostTab = null;
        await AddNewTab();
    }

    private void CancelCreateTab()
    {
        showCreateTabModal = false;
        pendingGhostTab = null;
    }

    // Edit Item Modal state
    // Details Modal State
    private bool showDetailsModal = false;
    private bool detailsEditMode = false;
    private int detailsItemIndex = -1;
    private string modalSubcategory = string.Empty;
    private string modalFrequency = "Monthly";
    private decimal modalCurrentValue = 0m;
    private string modalAdjustOption = "Same";
    private decimal modalCustomPercentage = 0m;
    private decimal? modalManualRetirementValue = null;
    private string modalPerItemInflationSource = "UseGlobal";
    private decimal modalPerItemInflationPercent = 0m;
    private bool modalIncludeInRetirement = true;

    private void OpenViewModal(int idx)
    {
        if (idx >= 0 && idx < Items.Count)
        {
            detailsItemIndex = idx;
            // Copy values to modal fields
            modalSubcategory = Items[idx].Subcategory ?? string.Empty;
            modalFrequency = Items[idx].Frequency.ToString();
            modalCurrentValue = Items[idx].CurrentValue;
            modalAdjustOption = Items[idx].AdjustOption.ToString();
            modalCustomPercentage = Items[idx].CustomPercentage;
            modalManualRetirementValue = Items[idx].ManualRetirementValue;
            modalPerItemInflationSource = Items[idx].PerItemInflationSource.ToString();
            modalPerItemInflationPercent = Items[idx].PerItemInflationPercent ?? 0;
            modalIncludeInRetirement = Items[idx].IncludeInRetirement;
            showDetailsModal = true;
            detailsEditMode = true; // Always open in edit mode
        }
    }

    private async Task HandleIntroModal()
    {
        showIntroModal = false;

        // Only show intro modal if model is empty and user hasn't opted out
        if (Items == null || !Items.Any())
        {
            try
            {
                var hideIntro = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "finplan-cost-of-living-income-planner-hide-intro");
                showIntroModal = string.IsNullOrEmpty(hideIntro) || !hideIntro.Equals("true", StringComparison.OrdinalIgnoreCase);
            }
            catch
            {
                // Ignore errors and show modal
                showIntroModal = false;
            }
        }
    }

    private async Task OnDontShowIntroChanged(ChangeEventArgs e)
    {
        bool checkedState = e?.Value is bool b && b;
        string key = "finplan-cost-of-living-income-planner-hide-intro";

        if (checkedState)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, "true");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
    }

    // Add these new methods
    private void CloseIntroModal()
    {
        showIntroModal = false;
        StateHasChanged();
    }

    // Onboarding Methods for Simple Mode
    private async Task StartWithCommonExpenses()
    {
        // Load preset common expense categories
        Items = GetCommonExpensePreset();
        RecalculateAll(save: true);
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartFromScratch()
    {
        // Clear any existing items and let user build from scratch
        Items = new List<CostItem>();
        RecalculateAll(save: true);
        await InvokeAsync(StateHasChanged);
    }

    private List<CostItem> GetCommonExpensePreset()
    {
        return new List<CostItem>
        {
            // Housing
            new CostItem { Category = "Housing", Subcategory = "Rent/Mortgage", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 2000, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.Same },
            new CostItem { Category = "Housing", Subcategory = "Utilities", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 200, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.Same },
            
            // Food
            new CostItem { Category = "Food", Subcategory = "Groceries", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 600, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.Same },
            new CostItem { Category = "Food", Subcategory = "Dining Out", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 300, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.CustomPercentage, CustomPercentage = 75 },
            
            // Transportation
            new CostItem { Category = "Transportation", Subcategory = "Car Payment", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 400, IncludeInRetirement = false },
            new CostItem { Category = "Transportation", Subcategory = "Gas & Maintenance", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 200, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.CustomPercentage, CustomPercentage = 50 },
            
            // Healthcare
            new CostItem { Category = "Healthcare", Subcategory = "Insurance Premiums", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 300, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.Inflation, PerItemInflationSource = InflationSource.Custom, PerItemInflationPercent = 4 },
            
            // Personal
            new CostItem { Category = "Personal", Subcategory = "Entertainment", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 200, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.Same },
            new CostItem { Category = "Personal", Subcategory = "Clothing", Frequency = FinPlan.Shared.Models.LivingCosts.Frequency.Monthly, CurrentValue = 100, IncludeInRetirement = true, AdjustOption = RetirementAdjustOption.CustomPercentage, CustomPercentage = 75 }
        };
    }


    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        detailsEditMode = false;
        detailsItemIndex = -1;
    }

    private void EnableDetailsEdit()
    {
        detailsEditMode = true;
    }

    private void SaveDetailsModal()
    {
        if (detailsItemIndex >= 0 && detailsItemIndex < Items.Count)
        {
            var item = Items[detailsItemIndex];
            item.Subcategory = modalSubcategory;
            if (Enum.TryParse<FinPlan.Shared.Models.LivingCosts.Frequency>(modalFrequency, out var freq))
                item.Frequency = freq;
            item.CurrentValue = modalCurrentValue;
            if (Enum.TryParse<RetirementAdjustOption>(modalAdjustOption, out var adj))
                item.AdjustOption = adj;
            item.CustomPercentage = modalCustomPercentage;
            item.ManualRetirementValue = modalManualRetirementValue;
            if (Enum.TryParse<InflationSource>(modalPerItemInflationSource, out var infl))
                item.PerItemInflationSource = infl;
            item.PerItemInflationPercent = modalPerItemInflationPercent;
            item.IncludeInRetirement = modalIncludeInRetirement;
            StateHasChanged();
            ScheduleAutosave();
        }
        CloseDetailsModal();
    }
    private List<CostItem> Items { get; set; } = new List<CostItem>(); // = StandardCostCategories.GetDefaults();

    private int YearsToRetirement { get; set; } = 20;
    // Backing field and property so changes trigger recalculation and autosave
    private decimal _inflationRate = 2.5m;
    private decimal InflationRate
    {
        get => _inflationRate;
        set
        {
            if (_inflationRate != value)
            {
                _inflationRate = value;
                RecalculateAll(save: true);
            }
        }
    }

    private bool isLoading = false;

    // Saving state for UI
    private bool isSaving = false;
    private string lastSaveMessage = string.Empty;
    private string saveErrorMessage = string.Empty;

    // Only dynamic tabs; start with a single default plan (plan-a)
    private string activeTab = "Plan-A-City-A"; // Track active tab for UI highlighting

    private List<string> dynamicTabs = new List<string>();
    // Always include the built-in "plan-a" tab first so UI shows a default tab when no dynamic tabs exist.
    private IEnumerable<string> Tabs
    {
        get
        {
            // Ensure TabHeaders has default for built-in tab
            if (!TabHeaders.ContainsKey("Plan-A-City-A")) TabHeaders["Plan-A-City-A"] = "Plan - A";

            // Return plan-a first, then any dynamic tabs (excluding duplicates)
            var result = new List<string> { "Plan-A-City-A" };
            foreach (var t in dynamicTabs)
            {
                if (!string.Equals(t, "Plan-A-City-A", StringComparison.OrdinalIgnoreCase) && !result.Contains(t)) result.Add(t);
            }
            return result;
        }
    }

    private Dictionary<string, string> TabHeaders = new Dictionary<string, string>();

    // Lightweight fpDebug helpers - non-blocking
    private void Log(string message)
    {
        try { _ = JSRuntime.InvokeVoidAsync("fpDebug.log", $"CostOfLiving: {message}"); } catch { }
    }
    private void LogError(string message)
    {
        try { _ = JSRuntime.InvokeVoidAsync("fpDebug.error", $"CostOfLiving ERROR: {message}"); } catch { }
    }

    private string GetTabLabel(string tab)
    {
        if (TabHeaders.ContainsKey(tab) && !string.IsNullOrWhiteSpace(TabHeaders[tab])) return TabHeaders[tab];
        // fallback: convert id to nicer label
        if (string.Equals(tab, "Plan-A-City-A", StringComparison.OrdinalIgnoreCase)) return "Plan-A-City-A";
        return tab;
    }

    private HashSet<string> editingTabs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

    private bool IsEditing(string tab) => editingTabs.Contains(tab);
    private void ToggleEdit(string tab)
    {
        if (editingTabs.Contains(tab)) editingTabs.Remove(tab);
        else
        {
            if (!TabHeaders.ContainsKey(tab)) TabHeaders[tab] = GetTabLabel(tab);
            editingTabs.Add(tab);
        }
    }

    private void CancelEdit(string tab)
    {
        if (TabHeaders.ContainsKey(tab) == false)
            TabHeaders[tab] = GetTabLabel(tab);
        editingTabs.Remove(tab);
    }

    private void HandleHeaderKey(KeyboardEventArgs e, string tab)
    {
        if (e.Key == "Enter")
        {
            _ = SaveTabHeader(tab);
        }
        else if (e.Key == "Escape")
        {
            CancelEdit(tab);
        }
    }

    private void HandleTabKey(KeyboardEventArgs e, string tab)
    {
        if (e == null) return;

        if (e.Key == "ArrowLeft" || e.Key == "ArrowRight")
        {
            var list = Tabs.ToList();
            if (list.Count <= 1) return;
            var idx = list.IndexOf(tab);
            if (idx < 0) idx = 0;
            idx = e.Key == "ArrowLeft" ? (idx - 1 + list.Count) % list.Count : (idx + 1) % list.Count;
            var next = list[idx];
            // navigate visually and load data
            _ = OnTabClick(next);
        }
        else if (e.Key == "Enter" || e.Key == " ")
        {
            _ = OnTabClick(tab);
        }
    }

    private string MapTabToCalculatorType(string tab)
    {
        // All tabs map to CostOfLiving-{tabId}
        return $"CostOfLiving-{tab}";
    }

    private async Task SaveTabHeader(string tab)
    {
        Log($"SaveTabHeader start: {tab}");
        // Load existing data so we don't overwrite items when updating header
        try
        {
            var calcType = MapTabToCalculatorType(tab);
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var loadUrl = $"{apiBaseUrl}/api/CostOfLiving/load?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calcType)}";
            CostOfLivingData? data = null;

            try
            {
                var resp = await client.GetAsync(loadUrl);
                Log($"SaveTabHeader: load call returned {(int)resp.StatusCode}");
                if (resp.IsSuccessStatusCode)
                {
                    var j = await resp.Content.ReadAsStringAsync();
                    data = System.Text.Json.JsonSerializer.Deserialize<CostOfLivingData>(j, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
            }
            catch (Exception exLoad)
            {
                LogError($"SaveTabHeader load error: {exLoad.Message}");
            }

            if (data == null)
            {
                // No existing saved data - use defaults
                data = new CostOfLivingData
                {
                    Items = StandardCostCategories.GetDefaults(),
                    YearsToRetirement = YearsToRetirement,
                    InflationRate = InflationRate,
                    CollapsedCategories = collapsed.ToList()
                };
            }

            data.Header = TabHeaders.ContainsKey(tab) ? TabHeaders[tab] : GetTabLabel(tab);

            var dto = new PersistCostOfLivingRequest
            {
                UserGuid = userGuid,
                CalculatorType = calcType,
                Data = data
            };

            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var saveUrl = $"{apiBaseUrl}/api/CostOfLiving/save";
            var saveResp = await client.PostAsync(saveUrl, content);
            Log($"SaveTabHeader: save returned {(int)saveResp.StatusCode}");
            if (saveResp.IsSuccessStatusCode)
            {
                editingTabs.Remove(tab);
                await LoadTabsAsync();
                StateHasChanged();
                Log($"SaveTabHeader success: {tab}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Save header failed: {saveResp.StatusCode}");
                LogError($"SaveTabHeader failed status: {saveResp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving header: {ex.Message}");
            LogError($"SaveTabHeader exception: {ex.Message}");
        }
    }

    private bool isAddingTab = false;
    private bool isDeletingPlans = false;

    // Confirm deletion of all saved dynamic plans for the user
    private async Task ConfirmDeleteAll()
    {
        try
        {
            var ok = await JSRuntime.InvokeAsync<bool>("confirm", "Delete ALL saved plans for this user? This cannot be undone.");
            if (!ok) return;
            await DeleteAllPlans();
        }
        catch (Exception ex)
        {
            LogError($"ConfirmDeleteAll exception: {ex.Message}");
        }
    }

    // Delete each dynamic tab for the current user by calling the existing DeleteTab API endpoint
    private async Task DeleteAllPlans()
    {
        Log("DeleteAllPlans start");
        if (isDeletingPlans) return;
        isDeletingPlans = true;
        isSaving = true; // show saving indicator to user while deleting
        await InvokeAsync(StateHasChanged);

        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);

            // Make a copy of dynamicTabs to avoid mutation during enumeration
            var tabsToDelete = dynamicTabs.ToList();
            foreach (var tab in tabsToDelete)
            {
                try
                {
                    var calcType = MapTabToCalculatorType(tab);
                    var url = $"{apiBaseUrl}/api/CostOfLiving/tabs?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calcType)}";
                    var resp = await client.DeleteAsync(url);
                    Log($"DeleteAllPlans: delete {tab} returned {(int)resp.StatusCode}");
                }
                catch (Exception ex)
                {
                    LogError($"DeleteAllPlans delete error for {tab}: {ex.Message}");
                }
            }

            // Clear local state for dynamic tabs and headers
            foreach (var t in tabsToDelete)
            {
                dynamicTabs.Remove(t);
                if (TabHeaders.ContainsKey(t)) TabHeaders.Remove(t);
            }

            // Reload tabs and select default
            await LoadTabsAsync();
            activeTab = Tabs.FirstOrDefault() ?? "Plan-A-City-A";
            calculatorType = MapTabToCalculatorType(activeTab);
            await LoadFromApi();

            Log("DeleteAllPlans completed");
        }
        catch (Exception ex)
        {
            LogError($"DeleteAllPlans exception: {ex.Message}");
        }
        finally
        {
            isDeletingPlans = false;
            isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private static string NumberToLetters(int number)
    {
        // Convert 1 -> A, 26 -> Z, 27 -> AA, etc.
        var sb = new System.Text.StringBuilder();
        while (number > 0)
        {
            number--; // 1-based
            int rem = number % 26;
            sb.Insert(0, (char)('A' + rem));
            number = number / 26;
        }
        return sb.ToString();
    }

    private async Task AddNewTab()
    {
        Log("AddNewTab start");
        if (isAddingTab) return; // guard re-entrancy
        isAddingTab = true;
        try
        {
            // determine header based on total tabs + 1 converted to letters
            // use Tabs (which includes built-in and existing dynamic tabs)
            int totalTabs = Tabs.Count();
            int candidateIndex = totalTabs + 1; // add 1 to the count

            // ensure TabHeaders has default Plan-A if not present
            if (!TabHeaders.ContainsKey("Plan-A-City-A")) TabHeaders["Plan-A-City-A"] = "Plan-A-City-A";

            var existingNames = new HashSet<string>(TabHeaders.Values, StringComparer.OrdinalIgnoreCase);

            string headerName;
            do
            {
                var letters = NumberToLetters(candidateIndex);
                headerName = $"Plan-{letters}-City-{letters}";
                candidateIndex++;
            } while (existingNames.Contains(headerName));

            var newTab = $"tab-{DateTime.Now:yyMMddHHmmss}"; // keep id as before

            // prepare initial data using standard defaults and the new header
            var initialData = new CostOfLivingData
            {
                Header = headerName,
                Items = StandardCostCategories.GetDefaults(),
                YearsToRetirement = YearsToRetirement,
                InflationRate = InflationRate,
                CollapsedCategories = collapsed.ToList()
            };

            var dto = new PersistCostOfLivingRequest
            {
                UserGuid = userGuid,
                CalculatorType = $"CostOfLiving-{newTab}",
                Data = initialData
            };

            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var saveUrl = $"{apiBaseUrl}/api/CostOfLiving/save";
            var resp = await client.PostAsync(saveUrl, content);
            Log($"AddNewTab: save returned {(int)resp.StatusCode}");
            if (resp.IsSuccessStatusCode)
            {
                // reload canonical tabs and headers
                await LoadTabsAsync();

                // ensure local map
                TabHeaders[newTab] = headerName;

                // add to dynamicTabs if not present
                if (!dynamicTabs.Contains(newTab)) dynamicTabs.Add(newTab);

                // select new tab
                await OnTabClick(newTab);
                StateHasChanged();
                Log($"AddNewTab success: {newTab} / {headerName}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Create tab failed: {resp.StatusCode}");
                LogError($"AddNewTab failed status: {resp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error creating tab: {ex.Message}");
            LogError($"AddNewTab exception: {ex.Message}");
        }
        finally
        {
            isAddingTab = false;
        }
    }

    private async Task ConfirmDeleteTab(string tab)
    {
        try
        {
            var header = TabHeaders.ContainsKey(tab) ? TabHeaders[tab] : tab;
            var ok = await JSRuntime.InvokeAsync<bool>("confirm", $"Delete tab '{header}'? This will remove saved data.");
            if (ok) await DeleteTab(tab);
        }
        catch (Exception ex)
        {
            LogError($"ConfirmDeleteTab exception: {ex.Message}");
        }
    }

    private async Task DeleteTab(string tab)
    {
        Log($"DeleteTab start: {tab}");
        try
        {
            var calcType = MapTabToCalculatorType(tab);
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/CostOfLiving/tabs?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calcType)}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.DeleteAsync(url);
            Log($"DeleteTab: delete returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                // remove locally
                dynamicTabs.Remove(tab);
                if (TabHeaders.ContainsKey(tab)) TabHeaders.Remove(tab);

                // reload tabs
                await LoadTabsAsync();

                // if deleted tab was active, switch to first available
                if (activeTab == tab)
                {
                    activeTab = Tabs.FirstOrDefault() ?? "Plan-A-City-A";
                    calculatorType = MapTabToCalculatorType(activeTab);
                    await LoadFromApi();
                }

                StateHasChanged();
                Log($"DeleteTab success: {tab}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Delete failed: {response.StatusCode}");
                LogError($"DeleteTab failed status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error deleting tab: {ex.Message}");
            LogError($"DeleteTab exception: {ex.Message}");
        }
    }

    private async Task LoadTabsAsync()
    {
        Log("LoadTabsAsync start");
        try
        {
            var apiBaseUrl = GetApiBaseUrl();
            var url = $"{apiBaseUrl}/api/CostOfLiving/tabs?userGuid={Uri.EscapeDataString(userGuid)}";
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            // reduce timeout for this non-critical call so UI can proceed if API is slow
            try { client.Timeout = TimeSpan.FromSeconds(10); } catch { }
            var response = await client.GetAsync(url);
            Log($"LoadTabsAsync: tabs call returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var list = System.Text.Json.JsonSerializer.Deserialize<List<string>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (list != null)
                {
                    dynamicTabs = list.Select(s => s.StartsWith("CostOfLiving-") ? s.Substring("CostOfLiving-".Length) : s).ToList();

                    // ensure headers dictionary has defaults for built-in tabs
                    if (!TabHeaders.ContainsKey("Plan-A-City-A")) TabHeaders["Plan-A-City-A"] = "Plan-A-City-A";

                    // load headers for each dynamic tab
                    foreach (var t in dynamicTabs)
                    {
                        var dataUrl = $"{apiBaseUrl}/api/CostOfLiving/load?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString($"CostOfLiving-{t}")}";
                        var resp = await client.GetAsync(dataUrl);
                        Log($"LoadTabsAsync: load header for {t} returned {(int)resp.StatusCode}");
                        if (resp.IsSuccessStatusCode)
                        {
                            var j = await resp.Content.ReadAsStringAsync();
                            try
                            {
                                var d = System.Text.Json.JsonSerializer.Deserialize<CostOfLivingData>(j, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                                if (d != null) TabHeaders[t] = d.Header ?? t;
                            }
                            catch (Exception ex)
                            {
                                TabHeaders[t] = t;
                                LogError($"LoadTabsAsync header parse failed for {t}: {ex.Message}");
                            }
                        }
                        else
                        {
                            TabHeaders[t] = t;
                        }
                    }

                    Log($"LoadTabsAsync success: {dynamicTabs.Count} tabs");
                }
            }
        }
        catch (OperationCanceledException oce)
        {
            // Timeout or cancellation - continue with defaults
            LogError($"LoadTabsAsync timeout/cancelled: {oce.Message}");
            dynamicTabs = new List<string>();
            if (!TabHeaders.ContainsKey("Plan-A-City-A")) TabHeaders["Plan-A-City-A"] = "Plan-A-City-A";
            // Show modal to allow retry
            ShowTimeout(OperationType.LoadTabs, "Loading tabs timed out. You can retry.");
        }
        catch (Exception ex)
        {
            LogError($"LoadTabsAsync exception: {ex.Message}");
            // ensure we have at least the default tab so UI remains usable
            dynamicTabs = new List<string>();
            if (!TabHeaders.ContainsKey("Plan-A-City-A")) TabHeaders["Plan-A-City-A"] = "Plan-A-City-A";
            ShowTimeout(OperationType.LoadTabs, $"Loading tabs failed: {ex.Message}");
        }
    }

    // when loading tab data, pick up header if present
    private async Task LoadFromApi()
    {
        Log($"LoadFromApi start: {calculatorType}");
        var apiBaseUrl = GetApiBaseUrl();
        var url = $"{apiBaseUrl}/api/CostOfLiving/load?userGuid={Uri.EscapeDataString(userGuid)}&calculatorType={Uri.EscapeDataString(calculatorType)}";

        try
        {
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            // shorter timeout to avoid long blocking during initial render
            try { client.Timeout = TimeSpan.FromSeconds(12); } catch { }
            var response = await client.GetAsync(url);
            Log($"LoadFromApi: call returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                try
                {
                    var data = System.Text.Json.JsonSerializer.Deserialize<CostOfLivingData>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    if (data != null)
                    {
                        // restore top-level settings
                        YearsToRetirement = data.YearsToRetirement;
                        InflationRate = data.InflationRate;
                        collapsed = new HashSet<string>(data.CollapsedCategories ?? new List<string>());

                        Items = data.Items ?? new List<CostItem>();

                        // set header mapping for current activeTab
                        if (!string.IsNullOrWhiteSpace(activeTab))
                        {
                            TabHeaders[activeTab] = data.Header ?? GetTabLabel(activeTab);
                        }

                        StateHasChanged();
                        Log($"LoadFromApi success: items={Items.Count}");
                        return;
                    }
                }
                catch (Exception ex)
                {
                    LogError($"LoadFromApi parse error: {ex.Message}");
                }

                // Fallback: try deserialize into raw list of items
                var loaded = System.Text.Json.JsonSerializer.Deserialize<List<CostItem>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (loaded != null)
                {
                    Items = loaded;
                    StateHasChanged();
                    Log($"LoadFromApi fallback list loaded: items={Items.Count}");
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                // no saved data, load defaults
                //Items = StandardCostCategories.GetDefaults();
                //StateHasChanged();
                //Log("LoadFromApi: not found - using defaults");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Load failed: {response.StatusCode}");
                LogError($"LoadFromApi failed status: {response.StatusCode}");
            }
        }
        catch (OperationCanceledException oce)
        {
            LogError($"LoadFromApi timeout/cancelled: {oce.Message}");
            // fallback to defaults so UI remains usable
            Items = StandardCostCategories.GetDefaults();
            StateHasChanged();
            ShowTimeout(OperationType.LoadFromApi, "Loading calculator data timed out. You can retry.");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading: {ex.Message}");
            LogError($"LoadFromApi exception: {ex.Message}");
            ShowTimeout(OperationType.LoadFromApi, $"Loading data failed: {ex.Message}");
        }
    }

    private void UpdateGroupCategory(string oldCategory, string newCategory)
    {
        if (oldCategory == newCategory) return;

        foreach (var it in Items.Where(i => (i.Category ?? string.Empty) == (oldCategory ?? string.Empty)))
        {
            it.Category = newCategory;
        }
    }

    private HashSet<string> collapsed = new HashSet<string>();

    private string GenerateNewItemName(string category)
    {
        var catKey = string.IsNullOrWhiteSpace(category) ? "Uncategorized" : category;
        var existingCount = Items.Count(i => string.Equals(i.Category ?? string.Empty, category ?? string.Empty, StringComparison.OrdinalIgnoreCase));
        return $"{catKey} Item {existingCount + 1}";
    }

    private void AddItemToCategory(string category)
    {
        Log($"AddItemToCategory: {category}");
        var cat = category ?? string.Empty;
        var newItem = new CostItem
        {
            Category = cat,
            Subcategory = GenerateNewItemName(cat),
            CurrentValue = 0m,
            AdjustOption = RetirementAdjustOption.Inflation,
            IncludeInRetirement = true
        };

        // insert at end of that category's block (just add; rendering sorts by Subcategory)
        Items.Add(newItem);

        // Open the same view/edit modal used for existing items so the user can edit the new item
        var idx = Items.IndexOf(newItem);
        if (idx >= 0)
        {
            OpenViewModal(idx);
        }

        StateHasChanged();
        ScheduleAutosave();
    }

    private void ToggleCollapse(string category)
    {
        var key = category ?? string.Empty;
        if (collapsed.Contains(key)) collapsed.Remove(key);
        else collapsed.Add(key);
    }

    private bool IsCollapsed(string category)
    {
        return collapsed.Contains(category ?? string.Empty);
    }

    private decimal TotalCurrent => Math.Round(Items.Sum(i => i.CurrentValue), 2);

    private decimal TotalCurrentPerMonth => Math.Round(Items.Sum(i => i.GetMonthlyEquivalent), 2);

    private decimal TotalRetirement => Math.Round(Items.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate)), 2);

    private static string FormatCurrency(decimal value)
    {
        return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C0}", value);
    }

    private string FormatDecimal(decimal value)
    {
        return value.ToString("0.0", System.Globalization.CultureInfo.CurrentCulture);
    }

    // Missing fields and helper methods restored
    private string NewCategorySentinel { get; } = "__new__";
    private string SelectedAddCategory { get; set; } = string.Empty;
    private string NewCategoryName { get; set; } = string.Empty;
    private bool showAddCategoryModal = false;

    private List<string> Categories => Items.Select(i => i.Category ?? string.Empty).Distinct().OrderBy(c => c).ToList();

    private void RefreshCategories()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OpenAddCategoryModal()
    {
        NewCategoryName = string.Empty;
        showAddCategoryModal = true;
    }

    private void CloseAddCategoryModal()
    {
        showAddCategoryModal = false;
        NewCategoryName = string.Empty;
    }

    private void AddCategoryModal()
    {
        var newCat = (NewCategoryName ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(newCat)) return;
        if (Categories.Contains(newCat))
        {
            SelectedAddCategory = newCat;
            CloseAddCategoryModal();
            return;
        }

        var newItem = new CostItem
        {
            Category = newCat,
            Subcategory = GenerateNewItemName(newCat),
            CurrentValue = 0m,
            AdjustOption = RetirementAdjustOption.Inflation,
            IncludeInRetirement = true
        };

        Items.Add(newItem);
        RefreshCategories();
        SelectedAddCategory = newCat;
        StateHasChanged();
        ScheduleAutosave();
        CloseAddCategoryModal();
    }

    private void HandleAddCategoryKeyModal(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddCategoryModal();
    }

    private void AddRow()
    {
        var category = SelectedAddCategory == NewCategorySentinel ? (string.IsNullOrWhiteSpace(NewCategoryName) ? "Uncategorized" : NewCategoryName) : SelectedAddCategory;
        var newItem = new CostItem { Category = category, Subcategory = GenerateNewItemName(category), CurrentValue = 0m, AdjustOption = RetirementAdjustOption.Inflation, IncludeInRetirement = true };
        Items.Add(newItem);
        if (SelectedAddCategory == NewCategorySentinel && !string.IsNullOrWhiteSpace(NewCategoryName))
        {
            RefreshCategories();
            SelectedAddCategory = NewCategoryName;
            NewCategoryName = string.Empty;
        }
        ScheduleAutosave();
    }

    // remove with undo support
    private CostItem? lastRemovedItem = null;
    private int lastRemovedIndex = -1;
    private System.Timers.Timer? undoTimer;
    private bool showUndoToast = false;

    private void RemoveItem(int index)
    {
        if (index >= 0 && index < Items.Count)
        {
            lastRemovedIndex = index;
            lastRemovedItem = Items[index];
            Items.RemoveAt(index);

            showUndoToast = true;
            StateHasChanged();

            // start undo timer; if expires, finalize by saving
            if (undoTimer == null)
            {
                undoTimer = new System.Timers.Timer(5000);
                undoTimer.AutoReset = false;
                undoTimer.Elapsed += async (_, __) =>
                {
                    try
                    {
                        showUndoToast = false;
                        await InvokeAsync(async () => await SaveToApi());
                        lastRemovedItem = null;
                        lastRemovedIndex = -1;
                        StateHasChanged();
                    }
                    catch (Exception ex)
                    {
                        LogError($"undoTimer elapsed exception: {ex.Message}");
                    }
                };
            }
            else
            {
                undoTimer.Stop();
                undoTimer.Interval = 5000;
            }
            undoTimer.Start();
        }
    }

    private void UndoRemove()
    {
        if (lastRemovedItem != null)
        {
            var insertIndex = Math.Min(Math.Max(0, lastRemovedIndex), Items.Count);
            Items.Insert(insertIndex, lastRemovedItem);
            lastRemovedItem = null;
            lastRemovedIndex = -1;
            showUndoToast = false;
            if (undoTimer != null)
            {
                try { undoTimer.Stop(); undoTimer.Dispose(); } catch { }
                undoTimer = null;
            }
        }
    }

    private void RemoveCategory(string category)
    {
        if (string.IsNullOrEmpty(category)) return;
        Items.RemoveAll(i => (i.Category ?? string.Empty) == category);
        ScheduleAutosave();
    }

    // user & calculatorType fields and API helpers
    private string userGuid = Guid.NewGuid().ToString();
    private string calculatorType = "CostOfLiving_Your";

    private string GetApiBaseUrl()
    {
#if DEBUG
                        return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

    private async Task SaveToApi()
    {
        Log("SaveToApi start");
        isSaving = true;
        saveErrorMessage = string.Empty;
        lastSaveMessage = string.Empty;
        await InvokeAsync(StateHasChanged);

        var apiBaseUrl = GetApiBaseUrl();
        var url = $"{apiBaseUrl}/api/CostOfLiving/save";

        try
        {
            string headerToSave = string.Empty;
            const string prefix = "CostOfLiving-";
            if (!string.IsNullOrEmpty(calculatorType) && calculatorType.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
            {
                var tabId = calculatorType.Substring(prefix.Length);
                if (TabHeaders != null && TabHeaders.ContainsKey(tabId)) headerToSave = TabHeaders[tabId];
            }

            var dto = new PersistCostOfLivingRequest
            {
                UserGuid = userGuid,
                CalculatorType = calculatorType,
                Data = new CostOfLivingData
                {
                    Header = headerToSave,
                    Items = Items.Select(i => new CostItem
                    {
                        Category = i.Category,
                        Subcategory = i.Subcategory,
                        CurrentValue = i.CurrentValue,
                        Frequency = i.Frequency,
                        AdjustOption = i.AdjustOption,
                        PerItemInflationPercent = i.PerItemInflationPercent,
                        PerItemInflationSource = i.PerItemInflationSource,
                        CustomPercentage = i.CustomPercentage,
                        ManualRetirementValue = i.ManualRetirementValue,
                        IncludeInRetirement = i.IncludeInRetirement
                    }).ToList(),
                    CollapsedCategories = collapsed.ToList(),
                    YearsToRetirement = YearsToRetirement,
                    InflationRate = InflationRate
                }
            };

            var json = System.Text.Json.JsonSerializer.Serialize(dto);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);
            var response = await client.PostAsync(url, content);
            Log($"SaveToApi: save returned {(int)response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Saved Cost of Living");
                Log("SaveToApi success");
                //lastSaveMessage = $"Saved {DateTime.Now:T}";
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Save failed: {response.StatusCode}");
                LogError($"SaveToApi failed status: {response.StatusCode}");
                saveErrorMessage = $"{response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving: {ex.Message}");
            LogError($"SaveToApi exception: {ex.Message}");
            saveErrorMessage = ex.Message;
        }
        finally
        {
            isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SelectedAddCategory = Categories.FirstOrDefault() ?? NewCategorySentinel;
        Log("OnInitialized");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Log("OnAfterRenderAsync firstRender start");

            // Check if user has opted out of seeing the intro modal
            try
            {
                var hideIntro = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "finplan-cost-of-living-hide-intro");
                if (hideIntro == "true")
                {
                    showIntroModal = false;
                }
            }
            catch (Exception ex)
            {
                LogError($"Error checking intro modal preference: {ex.Message}");
            }

            // show loading indicator while we fetch user data and tabs
            isLoading = true;
            StateHasChanged();
            await HandleIntroModal();

            try
            {
                try
                {
                    userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
                    Log($"OnAfterRenderAsync got userGuid: {userGuid}");
                }
                catch (Exception exGet) { LogError($"UserGuidService.GetOrCreateUserGuidAsync failed: {exGet.Message}"); }

                await LoadTabsAsync();

                if (!Tabs.Contains(activeTab))
                {
                    // If there are no dynamic tabs returned, keep the existing activeTab (default "plan-a").
                    // Otherwise select the first available tab safely.
                    activeTab = Tabs.FirstOrDefault() ?? activeTab ?? "Plan-A-City-A";
                }

                calculatorType = MapTabToCalculatorType(activeTab);

                await LoadFromApi();
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
                Log("OnAfterRenderAsync firstRender end");
            }
        }
    }

    private System.Timers.Timer? autosaveTimer;
    private readonly object autosaveLock = new object();
    private int autosaveDelayMs = 800; // debounce

    // Recalculate derived UI values and optionally schedule autosave.
    private void RecalculateAll(bool save = false)
    {
        try
        {
            // Totals are computed properties (TotalCurrent/TotalRetirement) so just refresh UI.
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            LogError($"RecalculateAll error: {ex.Message}");
        }

        if (save)
        {
            ScheduleAutosave();
        }
    }

    private void ScheduleAutosave()
    {
        Log("ScheduleAutosave called");

        lock (autosaveLock)
        {
            if (autosaveTimer == null)
            {
                autosaveTimer = new System.Timers.Timer(autosaveDelayMs);
                autosaveTimer.AutoReset = false;
                autosaveTimer.Elapsed += async (_, __) =>
                {
                    try
                    {
                        await InvokeAsync(async () => await SaveToApi());
                    }
                    catch (Exception ex)
                    {
                        LogError($"autosave timer handler exception: {ex.Message}");
                    }
                };
            }
            else
            {
                autosaveTimer.Stop();
                autosaveTimer.Interval = autosaveDelayMs;
            }

            autosaveTimer.Start();
        }
    }

    public void Dispose()
    {
        if (autosaveTimer != null)
        {
            try { autosaveTimer.Dispose(); } catch { }
            autosaveTimer = null;
        }

        if (undoTimer != null)
        {
            try { undoTimer.Dispose(); } catch { }
            undoTimer = null;
        }
    }

    private void HandleAddCategoryKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") OpenAddCategoryModal();
    }

    private void HandleNumericKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ScheduleAutosave();
        }
    }

    private async Task OnTabClick(string tab)
    {
        if (activeTab == tab) return;
        Log($"OnTabClick: switching to {tab}");
        activeTab = tab;
        calculatorType = MapTabToCalculatorType(tab);
        await LoadFromApi();
    }

    private enum OperationType { None, LoadTabs, LoadFromApi }
    private bool showTimeoutModal = false;
    private string timeoutMessage = string.Empty;
    private OperationType failedOperation = OperationType.None;

    private void ShowTimeout(OperationType op, string message)
    {
        failedOperation = op;
        timeoutMessage = message;
        showTimeoutModal = true;
        InvokeAsync(StateHasChanged);
    }

    private void DismissTimeoutModal()
    {
        showTimeoutModal = false;
        failedOperation = OperationType.None;
        timeoutMessage = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private async Task RetryOperation()
    {
        showTimeoutModal = false;
        var op = failedOperation;
        failedOperation = OperationType.None;
        timeoutMessage = string.Empty;
        // Refresh UI
        StateHasChanged();

        try
        {
            if (op == OperationType.LoadTabs)
            {
                Log("User triggered retry: LoadTabsAsync");
                await LoadTabsAsync();
                // if tabs loaded and activeTab missing, ensure selection
                if (!Tabs.Contains(activeTab)) activeTab = Tabs.FirstOrDefault() ?? "Plan-A-City-A";
                calculatorType = MapTabToCalculatorType(activeTab);
                // After reloading tabs, try loading data for the active tab
                await LoadFromApi();
            }
            else if (op == OperationType.LoadFromApi)
            {
                Log("User triggered retry: LoadFromApi");
                await LoadFromApi();
            }
        }
        catch (Exception ex)
        {
            LogError($"RetryOperation failed: {ex.Message}");
            // Show modal again with updated message
            ShowTimeout(op, $"Retry failed: {ex.Message}");
        }
    }

    private async Task ConfirmRemoveItem(int idx)
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", $"Remove this item? This action cannot be undone.");
        if (ok) RemoveItem(idx);
    }

    private async Task ConfirmRemoveCategory(string category)
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", $"Remove this category and all its items? This action cannot be undone.");
        if (ok) RemoveCategory(category);
    }

    private void CollapseAllCategories()
    {
        collapsed = new HashSet<string>(Items.Select(i => i.Category).Where(c => !string.IsNullOrEmpty(c)).Distinct());
    }

    private void ToggleCollapseAllCategories()
    {
        if (AnyCategoryExpanded())
        {
            // Collapse all
            collapsed = new HashSet<string>(Items.Select(i => i.Category).Where(c => !string.IsNullOrEmpty(c)).Distinct());
        }
        else
        {
            // Expand all
            collapsed.Clear();
        }
    }
    private bool AnyCategoryExpanded()
    {
        var allCategories = Items.Select(i => i.Category).Where(c => !string.IsNullOrEmpty(c)).Distinct();
        return allCategories.Any(c => !collapsed.Contains(c));
    }

    // Add inside the existing @code { ... } block of CostOfLivingPlannerNew.razor

    // Modal visibility
    private bool showAssumptionsModal = false;

    // Called when user saves from the modal. Receives (Years, Inflation).
    private async Task OnAssumptionsSaved((int Years, decimal Inflation) values)
    {
        // apply values
        YearsToRetirement = values.Years;
        InflationRate = values.Inflation;

        // recalc and persist
        RecalculateAll(save: true);
        ScheduleAutosave();

        // close modal and update UI
        showAssumptionsModal = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CloseAssumptions()
    {
        showAssumptionsModal = false;
        await InvokeAsync(StateHasChanged);
    }

    // Open the modal from UI
    private void OpenWizard(int section)
    {
        // reuse same modal for quick assumptions edits
        // copy current values into modal via component parameters (component reads YearsToRetirement/InflationRate)
        showAssumptionsModal = true;
    }

    // New state variables for multi-step flow
    private bool showPlanningTypeModal = true; // Start with this instead of overlay
    private bool showAssumptionsSetupModal = false;
    private bool useSampleData = false;

    private void SelectPlanningType(bool useSample)
    {
        useSampleData = useSample;
        showPlanningTypeModal = false;
        showAssumptionsSetupModal = true;
    }

    private void GoBackToPlanningType()
    {
        showAssumptionsSetupModal = false;
        showPlanningTypeModal = true;
    }

    private async Task StartPlanning()
    {
        showAssumptionsSetupModal = false;

        if (useSampleData)
        {
            // Load sample data with the user's assumptions
            Items = StandardCostCategories.GetDefaults();
        }
        else
        {
            // Start with empty list
            Items = new List<CostItem>();
        }

        // Save the assumptions
        ScheduleAutosave();
        StateHasChanged();
    }

    private async Task ShowIntroWithReset()
    {
        // Remove the localStorage setting that hides the intro
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "finplan-cost-of-living-income-planner-hide-intro");

        // Show the intro modal
        showIntroModal = true;

        // Update the UI
        StateHasChanged();
    }

    private void StartWithDefaults()
    {
        Items = StandardCostCategories.GetDefaults();
        ScheduleAutosave();
        StateHasChanged();
    }

    private bool showIntroModal = true; // Show by default unless user has opted out
    private bool dontShowIntroAgain = false;





    private bool showToolTipYearsInfo = false;
    private bool showToolTipInflationInfo = false;

    // Add Item modal state
    private bool showAddItemModal = false;
    private string addItemCategory = string.Empty;

    // New item fields
    private string NewItemName = string.Empty;
    private string NewItemFrequency = "Monthly"; // parsed to enum on save
    private decimal NewItemAmount = 0m;
    private bool NewItemIncludeInRetirement = true;

    // Retirement fields
    private string NewItemAdjustOption = "Inflation"; // Same | CustomPercentage | Manual | Inflation
    private string NewItemPerItemInflationSource = "UseGlobal"; // UseGlobal | Custom
    private decimal NewItemPerItemInflationPercent = 0m;
    private decimal NewItemCustomPercentage = 0m;

    // Manual entry as string to allow empty -> null parsing
    private string? NewItemManualRetirementValueString = null;

    // Validation
    private bool IsAddItemDisabled
        => string.IsNullOrWhiteSpace(NewItemName?.Trim());

    // Open/close
    private void OpenAddItemModal(string category)
    {
        isEditItemMode = false;
        editItemIndex = -1;

        addItemCategory = category ?? string.Empty;

        NewItemName = string.Empty;
        NewItemFrequency = "Monthly";
        NewItemAmount = 0m;
        NewItemIncludeInRetirement = true;

        NewItemAdjustOption = "Inflation";
        NewItemPerItemInflationSource = "UseGlobal";
        NewItemPerItemInflationPercent = 0m;
        NewItemCustomPercentage = 0m;
        NewItemManualRetirementValueString = null;

        showAddItemModal = true;
    }

    private void CloseAddItemModal()
    {
        showAddItemModal = false;
        isEditItemMode = false;
        editItemIndex = -1;
        NewItemName = string.Empty;
    }

    // Save
    private void AddItemModalSave()
    {
        if (IsAddItemDisabled) return;

        // Set defaults for simple mode
        if (isSimpleMode)
        {
            // Use sensible defaults for beginners
            if (string.IsNullOrEmpty(NewItemFrequency))
            {
                NewItemFrequency = "Monthly";
            }
            if (string.IsNullOrEmpty(NewItemAdjustOption))
            {
                NewItemAdjustOption = "Inflation";
            }
            if (string.IsNullOrEmpty(NewItemPerItemInflationSource))
            {
                NewItemPerItemInflationSource = "UseGlobal";
            }
        }

        if (!Enum.TryParse<Frequency>(NewItemFrequency, out var freq))
            freq = Frequency.Monthly;

        if (!Enum.TryParse<RetirementAdjustOption>(NewItemAdjustOption, out var adjust))
            adjust = RetirementAdjustOption.Inflation;

        if (!Enum.TryParse<InflationSource>(NewItemPerItemInflationSource, out var inflSrc))
            inflSrc = InflationSource.UseGlobal;

        decimal? manualValue = null;
        if (!string.IsNullOrWhiteSpace(NewItemManualRetirementValueString) &&
            decimal.TryParse(NewItemManualRetirementValueString, System.Globalization.NumberStyles.Number, System.Globalization.CultureInfo.CurrentCulture, out var mv) &&
            mv >= 0)
        {
            manualValue = mv;
        }

        if (isEditItemMode && editItemIndex >= 0 && editItemIndex < Items.Count)
        {
            // Update existing item
            var item = Items[editItemIndex];
            item.Subcategory = NewItemName.Trim();
            item.Frequency = freq;
            item.CurrentValue = NewItemAmount;
            item.IncludeInRetirement = NewItemIncludeInRetirement;
            item.AdjustOption = adjust;
            item.PerItemInflationSource = inflSrc;
            item.PerItemInflationPercent = inflSrc == InflationSource.Custom ? NewItemPerItemInflationPercent : null;
            item.CustomPercentage = NewItemAdjustOption == "CustomPercentage" ? NewItemCustomPercentage : 0m;
            item.ManualRetirementValue = NewItemAdjustOption == "Manual" ? manualValue : null;
        }
        else
        {
            // Add new item
            var newItem = new CostItem
            {
                Category = addItemCategory,
                Subcategory = NewItemName.Trim(),
                CurrentValue = NewItemAmount,
                Frequency = freq,
                IncludeInRetirement = NewItemIncludeInRetirement,
                AdjustOption = adjust,
                PerItemInflationSource = inflSrc,
                PerItemInflationPercent = inflSrc == InflationSource.Custom ? NewItemPerItemInflationPercent : null,
                CustomPercentage = NewItemAdjustOption == "CustomPercentage" ? NewItemCustomPercentage : 0m,
                ManualRetirementValue = NewItemAdjustOption == "Manual" ? manualValue : null
            };
            Items.Add(newItem);
            collapsed.Remove(addItemCategory ?? string.Empty); // ensure visible
        }

        // Close and persist
        showAddItemModal = false;
        isEditItemMode = false;
        editItemIndex = -1;

        StateHasChanged();
        ScheduleAutosave();
    }

    // Keyboard: allow Enter to submit from key fields
    private void HandleAddItemKeyModal(KeyboardEventArgs e)
    {
        if (e?.Key == "Enter")
            AddItemModalSave();
    }

    // Unified Item modal mode state
    private bool isEditItemMode = false;
    private int editItemIndex = -1;

    private void OpenEditItemModal(int idx)
    {
        if (idx < 0 || idx >= Items.Count) return;

        isEditItemMode = true;
        editItemIndex = idx;

        var it = Items[idx];
        addItemCategory = it.Category ?? string.Empty;
        NewItemName = it.Subcategory ?? string.Empty;
        NewItemFrequency = it.Frequency.ToString();
        NewItemAmount = it.CurrentValue;
        NewItemIncludeInRetirement = it.IncludeInRetirement;

        NewItemAdjustOption = it.AdjustOption.ToString(); // "Same" | "Inflation" | "CustomPercentage" | "Manual"
        NewItemPerItemInflationSource = it.PerItemInflationSource.ToString(); // "UseGlobal" | "Custom"
        NewItemPerItemInflationPercent = it.PerItemInflationPercent ?? 0m;
        NewItemCustomPercentage = it.CustomPercentage;
        NewItemManualRetirementValueString = it.ManualRetirementValue?.ToString(System.Globalization.CultureInfo.CurrentCulture) ?? null;

        showAddItemModal = true;
    }

    // Add/Edit Item modal inline tooltip flags
    private bool showTipItemName = false;
    private bool showTipFrequency = false;
    private bool showTipAmount = false;
    private bool showTipInclude = false;
    private bool showTipAdjust = false;
    private bool showTipCustomPercent = false;
    private bool showTipManualValue = false;
    private bool showTipInflationSource = false;
    private bool showTipCustomInflation = false;

    // Info link state (top-level)
    private bool showTipCurrentTotal = false;
    private bool showTipRetirementTotal = false;
    private bool showTipAddCategory = false;
    private bool showTipCollapseAll = false;

    // Per-category info states
    private HashSet<string> catInfoOpen = new(StringComparer.OrdinalIgnoreCase);
    private HashSet<string> addItemInfoOpen = new(StringComparer.OrdinalIgnoreCase);

    private bool IsCatInfoOpen(string? key) => !string.IsNullOrWhiteSpace(key) && catInfoOpen.Contains(key);
    private void ToggleCatInfo(string? key)
    {
        var k = key ?? string.Empty;
        if (catInfoOpen.Contains(k)) catInfoOpen.Remove(k); else catInfoOpen.Add(k);
    }

    private bool IsAddItemInfoOpen(string? key) => !string.IsNullOrWhiteSpace(key) && addItemInfoOpen.Contains(key);
    private void ToggleAddItemInfo(string? key)
    {
        var k = key ?? string.Empty;
        if (addItemInfoOpen.Contains(k)) addItemInfoOpen.Remove(k); else addItemInfoOpen.Add(k);
    }
    // Per-row View/Edit info state
    private HashSet<int> viewEditInfoOpen = new();

    private bool IsViewEditInfoOpen(int idx) => viewEditInfoOpen.Contains(idx);

    private void ToggleViewEditInfo(int idx)
    {
        if (viewEditInfoOpen.Contains(idx)) viewEditInfoOpen.Remove(idx);
        else viewEditInfoOpen.Add(idx);
    }

    // Plan‑A tab info tip
private bool showTipPlanATab = false;
private void TogglePlanATabInfo() => showTipPlanATab = !showTipPlanATab;

    // Ad HTML for left column — paste your Adsterra long banner snippet here or store in config and load on init.
    private string AdHtmlLeft = "<!-- Adsterra long banner snippet goes here -->";
}
