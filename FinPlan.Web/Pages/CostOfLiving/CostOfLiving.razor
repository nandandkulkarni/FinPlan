@page "/future-cost-of-living"
@using FinPlan.Shared.Models.LivingCosts
@using FinPlan.Web.Components
@using FinPlan.Web.Pages.CostOfLiving.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using FinPlan.Web.Services
@using FinPlan.Web.Components.Shared

<link href="./Pages/CostOfLiving/CostOfLiving.mobile.css" rel="stylesheet" />

<EditAssumptionsModal Visible="@showAssumptionsModal"
                      YearsToRetirement="@YearsToRetirement"
                      InflationRate="@InflationRate"
                      OnSave="@(values => OnAssumptionsSaved(values))"
                      OnClose="@( () => CloseAssumptions() )" />







<AddEditItemModal Visible="@showAddItemModal"
                  VisibleChanged="@(async value => { showAddItemModal = value; await InvokeAsync(StateHasChanged); })"
                  IsSimpleMode="@isSimpleMode"
                  IsSimpleModeChanged="@(async value => { isSimpleMode = value; await InvokeAsync(StateHasChanged); })"
                  IsEditMode="@isEditItemMode"
                  CategoryName="@addItemCategory"
                  GlobalInflationRate="@InflationRate"
                  IsSaving="@isSaving"
                  ItemName="@NewItemName"
                  FrequencyValue="@NewItemFrequency"
                  EditItemIndex="@editItemIndex"
                  Amount="@NewItemAmount"
                  IncludeInRetirement="@NewItemIncludeInRetirement"
                  ExclusionReasonValue="@NewItemExclusionReason"
                  AdjustOptionValue="@NewItemAdjustOption"
                  InflationSourceValue="@NewItemPerItemInflationSource"
                  CustomInflationPercent="@NewItemPerItemInflationPercent"
                  CustomPercentage="@NewItemCustomPercentage"
                  ManualRetirementValueString="@NewItemManualRetirementValueString"
                  OnSaveCallback="@HandleItemSave"
                  OnCancelCallback="@CloseAddItemModal" />

@if (showDetailsModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.25); z-index:2000;" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-scrollable modal-fullscreen-sm-down" role="document">
            <div class="modal-content">
                <div class="modal-header d-flex justify-content-between align-items-center">
                    <h5 class="modal-title mb-0">@(isSimpleMode ? "Expense Details" : "Item Details")</h5>

                    <div class="d-flex align-items-center gap-3">
                        <!-- Large Mode Toggle in Edit Modal -->
                        <div class="modal-mode-toggle d-flex align-items-center gap-3">
                            <div class="text-center">
                                <div class="fw-bold text-primary mb-1">
                                    @(isSimpleMode ? "üéØ Simple Mode" : "‚öôÔ∏è Advanced Mode")
                                </div>
                                <small class="text-muted">
                                    @(isSimpleMode ? "Easy & basic" : "All features")
                                </small>
                            </div>
                            <div class="form-check form-switch form-check-modal-lg">
                                <input class="form-check-input" type="checkbox" id="editModalModeToggle"
                                       checked="@(!isSimpleMode)" @onchange="ToggleSimpleMode">
                                <label class="form-check-label" for="editModalModeToggle" style="cursor: pointer;">
                                    @(isSimpleMode ? "Enable Advanced" : "Simplify")
                                </label>
                            </div>
                        </div>

                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDetailsModal"></button>
                    </div>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Subcategory</label>
                        @if (detailsEditMode)
                        {
                            <input class="form-control" @bind="modalSubcategory" />
                        }
                        else
                        {
                            <div class="form-control-plaintext">@modalSubcategory</div>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@(isSimpleMode ? "How Often" : "Frequency")</label>
                        @if (detailsEditMode)
                        {
                            <select class="form-select" @bind="modalFrequency">
                                <option value="Monthly">Monthly</option>
                                <option value="Quarterly">Quarterly</option>
                                <option value="Yearly">Yearly</option>
                            </select>
                        }
                        else
                        {
                            <div class="form-control-plaintext">@modalFrequency</div>
                        }
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Current Value</label>
                        @if (detailsEditMode)
                        {
                            <input class="form-control" type="number" step="0.01" @bind="modalCurrentValue" />
                        }
                        else
                        {
                            <div class="form-control-plaintext">@FormatCurrency(modalCurrentValue)</div>
                        }
                    </div>
                    <div class="mb-3 form-check">
                        @if (detailsEditMode)
                        {
                            <input class="form-check-input" type="checkbox" id="modalIncludeInRetirement" @bind="modalIncludeInRetirement" />
                            <label class="form-check-label" for="modalIncludeInRetirement">Include in Retirement</label>
                        }
                        else
                        {
                            <label class="form-check-label">Include in Retirement:</label>
                            <span class="ms-2">@(modalIncludeInRetirement ? "Yes" : "No")</span>
                        }
                    </div>

                    <div class="mb-3">
                        @if (modalIncludeInRetirement)
                        {
                            @if (detailsEditMode)
                            {
                                <label class="form-label">Retirement Adjust</label>

                                <select class="form-select" @bind="modalAdjustOption">
                                    <option value="Same">Same</option>
                                    <option value="CustomPercentage">Custom %</option>
                                    <option value="Manual">Manual</option>
                                    <option value="Inflation">Adjust for Inflation</option>
                                </select>
                            }
                            else
                            {
                                <div class="form-control-plaintext">@modalAdjustOption</div>
                            }
                        }
                    </div>
                    @if (modalAdjustOption == "CustomPercentage" && modalIncludeInRetirement)
                    {
                        <div class="mb-3">
                            <label class="form-label">Custom %</label>
                            @if (detailsEditMode)
                            {
                                <input class="form-control" type="number" step="1" min="0" @bind="modalCustomPercentage" />
                            }
                            else
                            {
                                <div class="form-control-plaintext">@modalCustomPercentage %</div>
                            }
                        </div>
                    }
                    @if (modalAdjustOption == "Manual" && modalIncludeInRetirement)
                    {
                        <div class="mb-3">
                            <label class="form-label">Manual Retirement Value</label>
                            @if (detailsEditMode)
                            {
                                <input class="form-control" type="number" step="0.01" @bind="modalManualRetirementValue" />
                            }
                            else
                            {
                                <div class="form-control-plaintext">@FormatCurrency(modalManualRetirementValue ?? 0)</div>
                            }
                        </div>
                    }
                    @if (modalIncludeInRetirement)
                    {
                        @if (modalAdjustOption == "Inflation")
                        {
                            <div class="mb-3">
                                <label class="form-label">Inflation Source</label>
                                @if (detailsEditMode)
                                {
                                    <select class="form-select" @bind="modalPerItemInflationSource">
                                        <option value="UseGlobal">Global</option>
                                        <option value="Custom">Custom</option>
                                    </select>
                                }
                                else
                                {
                                    <div class="form-control-plaintext">@modalPerItemInflationSource</div>
                                }
                            </div>
                            @if (modalPerItemInflationSource == "Custom")
                            {
                                <div class="mb-3">
                                    <label class="form-label">Custom Inflation %</label>
                                    @if (detailsEditMode)
                                    {
                                        <input class="form-control" type="number" step="0.1" min="0" @bind="modalPerItemInflationPercent" />
                                    }
                                    else
                                    {
                                        <div class="form-control-plaintext">@modalPerItemInflationPercent %</div>
                                    }
                                </div>
                            }
                        }
                    }

                </div>
                <div class="modal-footer">
                    @if (detailsEditMode)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveDetailsModal">Save</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="EnableDetailsEdit">Edit</button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" style="z-index:1999;"></div>
}

<CostOfLivingIntroModal Visible="@showIntroModal"
                        YearsToRetirement="@YearsToRetirement"
                        YearsToRetirementChanged="@(val => YearsToRetirement = val)"
                        InflationRate="@InflationRate"
                        OnClose="@( () => CloseIntroModal() )"
                        OnStartWithDefaults="@( () => StartWithDefaults() )"
                        OnStartFromScratch="@( () => StartFromScratch() )"
                        OnDontShowIntroChanged="@OnDontShowIntroChanged" />



<div class="@(showIntroModal ? "intro-modal-active" : "")">
    <div class="container-fluid">
        <div class="row">
            <!-- Left column (2) - moved from previous left-sidebar nav -->
            <div class="col-12 col-md-2">
                <!-- Ad Placement: Left Sidebar -->
                <div class="mb-3">
                    <AdUnit Slot="2499101058"
                            Style="display:inline-block; width:160px; height:600px; margin: 0 auto;"
                            Format="vertical"
                            Responsive="false"
                            PlaceholderText="Advertisement"></AdUnit>
                </div>
            </div>

            <!-- Center column (8) - main planner content -->
            <div class="col-12 col-md-8 @(isSimpleMode ? "simple-mode" : "")">
                <p class="text-muted mb-3">@(isSimpleMode ? "List your monthly expenses to see how they'll grow by retirement." : "Enter your current breakdown of costs. Expand a category to view or edit its details. Future costs update automatically.")</p>

                @* <b>Multi-city and City tiered plan coming soon</b> *@
                <!-- Save status indicator -->
                <div class="d-flex align-items-center mb-2">
                    @if (isSaving || (autosaveTimer != null && autosaveTimer.Enabled))
                    {
                        <div class="spinner-border spinner-border-sm text-primary me-2" role="status" aria-hidden="true"></div>
                        <span class="small text-muted">Saving‚Ä¶</span>
                    }
                    else if (!string.IsNullOrEmpty(lastSaveMessage))
                    {
                        <span class="small text-success">@lastSaveMessage</span>
                    }
                    else if (!string.IsNullOrEmpty(saveErrorMessage))
                    {
                        <span class="small text-danger">Save error: @saveErrorMessage</span>
                    }
                </div>

                <!-- City Template Selector -->
                @if (availableCities != null && availableCities.Any())
                {
                    <div class="mb-3">
                        <div class="d-flex align-items-center gap-3">
                            @if (selectedCity != null)
                            {
                                <div class="alert alert-success mb-0 py-2 px-3 d-flex align-items-center gap-3">
                                    <i class="bi bi-geo-alt-fill"></i>
                                    <span><strong>@selectedCity.CityName</strong>, @selectedCity.Country</span>
                                    @if (matchedProfile != null)
                                    {
                                        <span class="badge bg-primary">Profile: @matchedProfile.ProfileName</span>
                                    }
                                    <button class="btn btn-sm btn-outline-primary" @onclick="ToggleCitySelector">
                                        Change City
                                    </button>
                                    @if (matchedProfile != null)
                                    {
                                        <button class="btn btn-sm btn-success" @onclick="() => LoadExpensesFromProfile(matchedProfile)">
                                            <i class="bi bi-download"></i> Load Sample Expenses
                                        </button>
                                    }
                                </div>
                            }
                            else
                            {
                                <button class="btn btn-outline-primary" @onclick="ToggleCitySelector">
                                    <i class="bi bi-globe"></i> Select City Template
                                </button>
                            }
                        </div>

                        @if (showCitySelector)
                        {
                            <div class="modal-backdrop fade show" style="z-index:1040"></div>
                            <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                                <div class="modal-dialog modal-dialog-centered modal-lg modal-fullscreen-sm-down" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Available Cities</h5>
                                            <button type="button" class="btn-close" aria-label="Close" @onclick="ToggleCitySelector"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row g-2">
                                                @foreach (var city in availableCities.OrderBy(c => c.Country).ThenBy(c => c.CityName))
                                                {
                                                    <div class="col-md-4 mb-2">
                                                        <button class="btn btn-outline-secondary w-100 text-start"
                                                                @onclick="async () => { await SelectCity(city); showCitySelector = false; }">
                                                            <strong>@city.CityName</strong><br />
                                                            <small class="text-muted">@city.Country ‚Ä¢ @city.Currency</small>
                                                        </button>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button class="btn btn-secondary btn-sm" @onclick="ToggleCitySelector">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }

                @* --- Replace existing inline profile list with this modal-based UI --- *@
                @if (cityProfiles != null && cityProfiles.Any())
                {
                    @* Show profiles as a modal so it pops out above the page *@
                    @if (showProfileSelector)
                    {
                        <div class="modal-backdrop fade show" style="z-index:1040"></div>
                        <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                            <div class="modal-dialog modal-dialog-centered modal-lg modal-fullscreen-sm-down" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Profiles for @selectedCity?.CityName</h5>
                                        <button type="button" class="btn-close" aria-label="Close" @onclick="ToggleProfileSelector"></button>
                                    </div>

                                    <div class="modal-body">
                                        <div class="row g-2">
                                            @foreach (var profile in cityProfiles)
                                            {
                                                <div class="col-md-6 mb-2">
                                                    <div class="card h-100">
                                                        <div class="card-body d-flex flex-column">
                                                            <div class="mb-2">
                                                                <strong>@profile.ProfileName</strong>
                                                            </div>
                                                            <div class="small text-muted">
                                                                Age: @profile.AgeMin - @profile.AgeMax<br />
                                                                Marital Status: @profile.MaritalStatus<br />
                                                                Children: @profile.ChildrenCount
                                                            </div>

                                                            <div class="mt-auto d-flex gap-2">
                                                                @* <button class="btn btn-sm btn-outline-secondary" @onclick="() => ToggleProfileSelector()">
                                                                    Cancel
                                                                </button>

                                                                <button class="btn btn-sm btn-success" @onclick="async () => await OnProfileSelected(profile)">
                                                                    Select Profile
                                                                </button> *@

                                                                <button class="btn btn-sm btn-primary" @onclick="async () => await CreateTabFromProfile(profile)">
                                                                    <span class="bi bi-plus-lg me-1"></span> Create Plan
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="modal-footer">
                                        <button class="btn btn-secondary btn-sm" @onclick="ToggleProfileSelector">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }

                @code {
                    // Called when user selects a profile
                    // update OnProfileSelected to close the modal, deserialize profile and continue
                    private async Task OnProfileSelected(DemographicProfile profile)
                    {
                        try
                        {
                            // Close the modal immediately
                            showProfileSelector = false;
                            StateHasChanged();

                            matchedProfile = profile;
                            // ensure sample expenses and children ages are deserialized into working properties
                            matchedProfile.DeserializeFromDatabase();

                            Log($"Profile selected: {matchedProfile.ProfileName}");

                            // proceed with existing flow (create a new plan/tab from selected city/profile)
                            await AddNewTab();
                        }
                        catch (Exception ex)
                        {
                            LogError($"Error selecting profile: {ex.Message}");
                        }
                    }
                }
                <!-- Tab Navigation -->
                <ul class="nav nav-tabs mb-1" role="tablist">
                    @foreach (var t in Tabs)
                    {
                        <li class="nav-item d-flex align-items-center me-1 @(activeTab == t ? "tab-item-active" : "")" role="presentation">
                            <button class="nav-link @(activeTab == t ? "tab-active-custom" : "")"
                                    role="tab"
                                    aria-selected="@(activeTab == t ? "true" : "false")"
                                    tabindex="0"
                                    @onkeydown="(KeyboardEventArgs e) => HandleTabKey(e, t)"
                                    @onclick="() => OnTabClick(t)">
                                @GetTabLabel(t)
                            </button>

                            @if (string.Equals(t, "Plan-A-City-A", StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="bi bi-info-circle text-info ms-1"
                                      style="cursor:pointer; font-size:1rem;"
                                      title="About plans, cities and currencies"
                                      @onclick:stopPropagation="true"
                                      @onclick="TogglePlanATabInfo"></span>
                            }
                        </li>
                    }
                </ul>

                @if (showTipPlanATab)
                {
                    <div class="alert alert-info py-2 px-3 mb-2 small" style="max-width: 860px;">
                        Next release will allow multiple plans with different cities and currencies. You‚Äôll be able to create and compare plans, each with its own assumptions and locale settings.
                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipPlanATab = false">
                            <span class="bi bi-x-lg"></span>
                        </span>
                    </div>
                }

                <!-- Insert this opening tag immediately after the closing </ul> of the tab list (the ul.nav.nav-tabs ... ) -->
                <div class="tab-panel-box position-relative">
                    <!-- Mode Toggle positioned to the left of Show Intro button -->
                    <div class="position-absolute" style="top: 10px; right: 280px; z-index: 1;">
                        <div style="
                        background: linear-gradient(90deg,#fffbe6,#fffde7);
                        border: 2px solid #FFD600;
                        border-radius: 14px;
                        box-shadow: 0 2px 12px rgba(255,214,0,0.08);
                        padding: 8px 18px;
                        display: inline-flex;
                        align-items: center;
                        gap: 12px;">
                            <div class="d-flex align-items-center gap-2">
                                <span style="font-size: 1rem;">@(isSimpleMode ? "üéØ" : "‚öôÔ∏è")</span>
                                <span class="fw-bold small @(isSimpleMode ? "text-success" : "text-primary")">
                                    @(isSimpleMode ? "Beginner" : "Advanced")
                                </span>
                            </div>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="compactModeToggle"
                                       checked="@(!isSimpleMode)" @onchange="ToggleSimpleMode">
                                <label class="form-check-label small fw-bold ms-1" for="compactModeToggle" style="cursor: pointer;">
                                    @(isSimpleMode ? "Advanced" : "Simple")
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Buttons in top-right corner -->
                    <div class="position-absolute d-flex gap-2" style="top: 10px; right: 10px; z-index: 1;">
                        <button class="btn btn-sm btn-warning"
                                @onclick="ShowIntroWithReset">
                            <i class="bi bi-info-circle me-1"></i> Show Intro
                        </button>

                        <button class="btn btn-sm btn-outline-danger"
                                @onclick="ClearDataAsync"
                                title="Clear all saved plan data">
                            <i class="bi bi-trash me-1"></i>
                            Clear Plan Data
                        </button>
                    </div>

                    <!-- Planner Controls Strip -->

                    <div class="section-card">
                        <div>
                            <div style="display:flex; align-items:center; gap:8px; font-weight:700;">
                                <div>Assumptions:</div>
                            </div>

                            <div class="small-note" style="margin-top:8px;">
                                <div class="d-flex flex-wrap align-items-center">
                                    <!-- Years to Retirement -->
                                    <div class="me-4">
                                        <span class="bi bi-info-circle text-info"
                                              style="font-size: 1.1rem; cursor: pointer;"
                                              @onclick="() => showToolTipYearsInfo = !showToolTipYearsInfo"
                                              tabindex="0"
                                              title="Click for more info"></span>
                                        <span style="font-weight: 600; color: #495057;">Years to retire:</span>
                                        <b>@YearsToRetirement</b>
                                    </div>

                                    <!-- Inflation Rate -->
                                    <div class="me-4">
                                        <span class="bi bi-info-circle text-info"
                                              style="font-size: 1.1rem; cursor: pointer;"
                                              @onclick="() => showToolTipInflationInfo = !showToolTipInflationInfo"
                                              tabindex="0"
                                              title="Click for more info"></span>
                                        <span style="font-weight: 600; color: #495057;">Annual Inflation rate:</span>
                                        <b>@InflationRate%</b>
                                    </div>

                                    <button class="btn-edit" @onclick="() => OpenWizard(1)">Edit</button>
                                </div>

                                <!-- Tooltips -->
                                @if (showToolTipYearsInfo)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small" style="max-width: 320px;">
                                        <strong>Years to Retirement:</strong> The number of years until you expect to retire. This is used to project your future costs.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipYearsInfo = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }

                                @if (showToolTipInflationInfo)
                                {
                                    <div class="alert alert-info py-2 px-3 mt-2 mb-0 small" style="max-width: 320px;">
                                        <strong>Annual Inflation Rate:</strong> The yearly percentage increase in prices of goods and services. This rate is used to project how your costs will grow over time before retirement.
                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipInflationInfo = false" title="Close">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <br />

                    <br />

                    <!-- Totals Strip: Current and Retirement side by side -->
                    <div class="totals-strip d-flex align-items-center justify-content-center gap-4 mb-3">
                        <div class="totals-box bg-primary bg-opacity-75 text-white px-4 py-3 d-flex flex-column align-items-center">
                            <span class="totals-label d-flex align-items-center">
                                Current Total
                                <span class="bi bi-info-circle text-warning ms-2"
                                      style="cursor: pointer; font-size: .95rem;"
                                      title="What is this?"
                                      @onclick="() => showTipCurrentTotal = !showTipCurrentTotal"></span>
                            </span>
                            <span class="totals-value">@FormatCurrency(TotalCurrentPerMonth)</span>
                        </div>
                        <div class="totals-box bg-success bg-opacity-75 text-white px-4 py-3 d-flex flex-column align-items-center">
                            <span class="totals-label d-flex align-items-center">
                                Retirement Total
                                <span class="bi bi-info-circle text-warning ms-2"
                                      style="cursor: pointer; font-size: .95rem;"
                                      title="What is this?"
                                      @onclick="() => showTipRetirementTotal = !showTipRetirementTotal"></span>
                            </span>
                            <span class="totals-value">@FormatCurrency(TotalRetirement)</span>
                        </div>
                    </div>

                    @if (showTipCurrentTotal)
                    {
                        <div class="alert alert-info py-2 px-3 mb-2 small text-center" style="max-width:640px; margin:0 auto;">
                            Current Total is the sum of all items converted to monthly values across categories.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipCurrentTotal = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }
                    @if (showTipRetirementTotal)
                    {
                        <div class="alert alert-info py-2 px-3 mb-3 small text-center" style="max-width:640px; margin:0 auto;">
                            Retirement Total is the projected monthly amount at retirement using each item's adjustment and inflation.
                            Years to retirement: <b>@YearsToRetirement</b>, Global inflation: <b>@InflationRate%</b>.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipRetirementTotal = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }

                    <div class="d-flex justify-content-center mb-3">
                        <div class="d-flex justify-content-center align-items-center gap-2 mb-2">
                            <button class="btn btn-success btn-sm rounded-pill px-4 fw-semibold shadow-sm" style="height:32px; font-size:1.04rem;"
                                    type="button" @onclick:stopPropagation="true" @onclick="OpenAddCategoryModal" disabled="@isSaving">
                                <span class="bi bi-plus-lg me-1"></span> Add Category
                            </button>
                            <span class="bi bi-info-circle text-info"
                                  style="cursor: pointer; font-size: 1rem;"
                                  title="What is this?"
                                  @onclick="() => showTipAddCategory = !showTipAddCategory"></span>
                        </div>
                    </div>
                    @if (showTipAddCategory)
                    {
                        <div class="alert alert-info py-2 px-3 mb-3 small text-center" style="max-width:640px; margin:0 auto;">
                            Add a new category to group related items (e.g., Housing, Food). You can add items inside it afterwards.
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipAddCategory = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }

                    <div class="d-flex align-items-center mb-2" style="margin-left: 8px;">
                        <button class="btn btn-outline-secondary btn-sm d-flex align-items-center gap-1"
                                title="@(AnyCategoryExpanded() ? "Collapse all categories" : "Expand all categories")"
                                @onclick="ToggleCollapseAllCategories">
                            <span class="bi @(AnyCategoryExpanded() ? "bi-chevron-up" : "bi-chevron-down")"></span>
                            <span>@(AnyCategoryExpanded() ? "Collapse All" : "Expand All")</span>
                        </button>
                        <span class="bi bi-info-circle text-info ms-2"
                              style="cursor: pointer; font-size: 1rem;"
                              title="What is this?"
                              @onclick="() => showTipCollapseAll = !showTipCollapseAll"></span>
                    </div>
                    @if (showTipCollapseAll)
                    {
                        <div class="alert alert-info py-2 px-3 mb-2 small" style="max-width:640px; margin-left:8px;">
                            @(AnyCategoryExpanded()
                                                ? "Collapse all categories to condense the view."
                                                : "Expand all categories to view every item at once.")
                            <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => showTipCollapseAll = false">
                                <span class="bi bi-x-lg"></span>
                            </span>
                        </div>
                    }


                


                    <!-- Add Category Modal (root level for correct binding) -->
                    @if (showAddCategoryModal)
                    {
                        <div class="modal-backdrop fade show" style="z-index:1040"></div>
                        <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                            <div class="modal-dialog modal-dialog-centered modal-fullscreen-sm-down" role="document">
                                <div class="modal-content shadow" style="border-top: 4px solid #1F6FEB; overflow: hidden;">
                                    <div class="modal-header bg-light">
                                        <h5 class="modal-title d-flex align-items-center">
                                            <span class="bi bi-folder-plus me-2 text-primary"></span>
                                            Add New Category
                                        </h5>
                                        <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddCategoryModal"></button>
                                    </div>
                                    <div class="modal-body py-4" style="background-color: #f8faff;">
                                        <p class="text-muted small mb-3">
                                            Categories help organize your expenses. Enter a descriptive name for your category.
                                        </p>
                                        <div class="form-floating">
                                            <input type="text"
                                                   class="form-control form-control-lg"
                                                   id="newCategoryName"
                                                   @bind="NewCategoryName"
                                                   @bind:event="oninput"
                                                   @onkeydown="HandleAddCategoryKeyModal"
                                                   autofocus />
                                            <label for="newCategoryName">Category Name</label>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center mt-3">
                                            <small class="text-muted">@(string.IsNullOrWhiteSpace(NewCategoryName) ? "Example: Housing, Food, Transportation" : $"Adding: {NewCategoryName}")</small>
                                            <small class="@(IsAddCategoryDisabled ? "text-danger" : "text-success")">
                                                @(IsAddCategoryDisabled ? "" : "Ready to add")
                                            </small>
                                        </div>
                                    </div>
                                    <div class="modal-footer border-top-0 pt-0" style="background-color: #f8faff;">
                                        <button class="btn btn-outline-secondary px-4" @onclick="CloseAddCategoryModal">
                                            Cancel
                                        </button>
                                        <button class="btn btn-primary px-4 d-flex align-items-center gap-2"
                                                @onclick="AddCategoryModal"
                                                disabled="@(isSaving || IsAddCategoryDisabled)">
                                            @if (isSaving)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            }
                                            else
                                            {
                                                <span class="bi bi-plus-lg"></span>
                                            }
                                            Add Category
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="accordion" id="costCategoryAccordion">
                        @{
                            var groups = (Items ?? new List<CostItem>()).GroupBy(i => i.Category ?? string.Empty).OrderBy(g => g.Key ?? string.Empty);
                            int catIdx = 0;
                        }
                        @foreach (var group in groups)
                        {
                            var groupKey = group.Key ?? string.Empty;
                            var groupCurrentTotal = group.Sum(i => i.GetMonthlyEquivalent);
                            var groupRetirementTotal = group.Sum(i => i.GetRetirementValue(YearsToRetirement, InflationRate));
                            var expanded = !IsCollapsed(groupKey);
                            var collapseId = $"catCollapse_{catIdx}";

                            <CategoryAccordion CategoryName="@groupKey"
                                               Items="@group.ToList()"
                                               CurrentTotal="@groupCurrentTotal"
                                               RetirementTotal="@groupRetirementTotal"
                                               IsExpanded="@expanded"
                                               IsSimpleMode="@isSimpleMode"
                                               IsSaving="@isSaving"
                                               YearsToRetirement="@YearsToRetirement"
                                               GlobalInflationRate="@InflationRate"
                                               CollapseId="@collapseId"
                                               OnToggleExpanded="@(() => ToggleCollapse(groupKey))"
                                               OnRemoveCategory="@(() => ConfirmRemoveCategory(groupKey))"
                                               OnAddItem="@(() => OpenAddItemModal(groupKey))"
                                               OnRemoveItem="@(item => ConfirmRemoveItem(Items.IndexOf(item)))"
                                               OnEditItem="@(item => OpenEditItemModal(Items.IndexOf(item)))" />

                            catIdx++;
                        }
                    </div>

                </div>


                @* Loading overlay shown while initial API calls are in progress *@
                @if (isLoading)
                {
                    <div class="blazor-loading-modal">
                        <div class="blazor-loading-content">
                            <div class="spinner-border text-primary" role="status"></div>
                            <div class="mt-2 fw-bold">Loading...</div>
                        </div>
                    </div>
                }

                @* Undo toast for recent removals *@
                @if (showUndoToast)
                {
                    <div style="position:fixed; right:16px; bottom:16px; z-index:1060;">
                        <div class="card shadow-sm" style="min-width:220px;">
                            <div class="card-body p-2 d-flex align-items-center justify-content-between">
                                <div class="small text-truncate me-2">Item removed</div>
                                <div>
                                    <button class="btn btn-sm btn-link" @onclick="UndoRemove">Undo</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @* Timeout / retry modal *@
                @if (showTimeoutModal)
                {
                    <div class="modal-backdrop fade show" style="z-index:1040"></div>
                    <div class="modal d-block" tabindex="-1" role="dialog" style="z-index:1050;">
                        <div class="modal-dialog modal-sm" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Request timed out</h5>
                                    <button type="button" class="btn-close" aria-label="Close" @onclick="DismissTimeoutModal"></button>
                                </div>
                                <div class="modal-body">
                                    <p class="small">@timeoutMessage</p>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary btn-sm" @onclick="DismissTimeoutModal">Dismiss</button>
                                    <button class="btn btn-primary btn-sm" @onclick="RetryOperation">Retry</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if (showCreateTabModal)
                {
                    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.25); z-index:2000;" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header bg-warning-subtle">
                                    <h5 class="modal-title">Create New Plan</h5>
                                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelCreateTab"></button>
                                </div>
                                <div class="modal-body">
                                    <p>Would you like to create <strong>@GetTabLabel(pendingGhostTab ?? string.Empty)</strong>?</p>
                                </div>
                                <div class="modal-footer">
                                    <button class="btn btn-secondary" @onclick="CancelCreateTab">Cancel</button>
                                    <button class="btn btn-primary" @onclick="ConfirmCreateTab">Create Plan</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

            </div>
            <!-- Right column (2) -->
            <div class="col-12 col-md-2">
                <!-- Ad Placement: Right Sidebar Top -->
                <div class="mb-3">
                    <AdUnit Slot="2576204242"
                            Style="display:inline-block; width:160px; height:600px; margin: 0 auto;"
                            Format="vertical"
                            Responsive="false"
                            PlaceholderText="Advertisement"></AdUnit>
                </div>
            </div>
        </div>
    </div>
    <!-- Important Disclaimers -->
    <div class="mt-4 p-3" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
        <div style="display: flex; align-items: flex-start; gap: 8px;">
            <div style="color: #856404; margin-top: 2px;">
                <i class="bi bi-exclamation-triangle" style="font-size: 1.1rem;"></i>
            </div>
            <div>
                <div style="font-weight: 600; color: #856404; margin-bottom: 8px;">Important Disclaimers</div>
                <div style="font-size: 0.9rem; color: #856404; line-height: 1.4;">
                    <p style="margin-bottom: 8px;"><strong>Not Financial Advice:</strong> This tool is for educational and planning purposes only. Results are projections based on your inputs and assumptions. This is not personalized financial, tax, or investment advice.</p>

                    <p style="margin-bottom: 8px;"><strong>Inflation Assumptions:</strong> Actual inflation rates vary significantly over time and by category. Real-world cost changes for housing, healthcare, food, and other expenses may differ substantially from the uniform inflation rates used in this calculator.</p>

                    <p style="margin-bottom: 8px;"><strong>Life Changes:</strong> Job transitions, family changes, health issues, geographic moves, and lifestyle adjustments are not modeled but can materially impact your actual cost of living in retirement.</p>

                    <p style="margin-bottom: 8px;"><strong>Economic Factors:</strong> Economic conditions, policy changes, technological advances, and other external factors may significantly alter future costs in ways not captured by simple inflation projections.</p>

                    <p style="margin-bottom: 0;"><strong>Professional Guidance:</strong> Consider consulting with qualified financial advisors, tax professionals, and retirement planning specialists who can provide personalized advice for your complete financial situation and retirement planning needs.</p>
                </div>
            </div>
        </div>
    </div>
</div>
