@using FinPlan.Shared.Models.LivingCosts
@using Microsoft.AspNetCore.Components.Web

<div class="card mb-2">
    <div class="card-header d-flex align-items-center" 
         style="cursor:pointer;" 
         @onclick="ToggleExpanded" 
         title="@(IsExpanded ? "Click to collapse" : "Click to expand")">
        
        <button class="btn btn-sm btn-soft-danger me-2" 
                title="Remove category" 
                aria-label="Remove category" 
                @onclick:stopPropagation="true" 
                @onclick="OnRemoveCategory" 
                disabled="@IsSaving">
            <span class="bi bi-trash-fill icon-muted" aria-hidden="true"></span>
        </button>

        <span class="me-2" style="font-weight: bold !important;">@CategoryName</span>
        
        <span class="bi bi-info-circle text-info me-2 @(IsSimpleMode ? "" : "")"
              style="cursor: pointer; font-size: .95rem;"
              title="What is this?"
              @onclick:stopPropagation="true"
              @onclick="ToggleCategoryInfo"></span>

        <span class="small text-muted d-none d-md-inline" 
              title="@(IsSimpleMode ? "Current monthly total" : "Current total")">
            @(IsSimpleMode ? "Monthly" : "Current"): @FormatCurrency(CurrentTotal)
        </span>

        <span class="small text-muted ms-2 d-none d-md-inline" 
              title="@(IsSimpleMode ? "Future monthly total" : "Retirement total")">
            @(IsSimpleMode ? "Future" : "Retirement"): @FormatCurrency(RetirementTotal)
        </span>

        <div class="ms-auto d-flex gap-2 align-items-center">
            <button class="btn btn-success btn-sm" 
                    title="@(IsSimpleMode ? "Add expense" : "Add item")" 
                    @onclick:stopPropagation="true" 
                    @onclick="OnAddItem">
                <span class="bi bi-plus"></span> @(IsSimpleMode ? "Add Expense" : "Add Item")
            </button>
            <span class="bi bi-info-circle text-info @(IsSimpleMode ? "" : "")"
                  style="cursor: pointer; font-size: .95rem;"
                  title="What is this?"
                  @onclick:stopPropagation="true"
                  @onclick="ToggleAddItemInfo"></span>
        </div>
    </div>

    <div class="collapse @(IsExpanded ? "show" : "")" id="@CollapseId">
        <div class="card-body p-2 grid-yellow-bg rounded-4">
            @if (ShowCategoryInfo)
            {
                <div class="alert alert-info py-2 px-3 mb-2 small">
                    This category groups related items. Click the header to expand/collapse.
                    Use the trash icon to remove the category.
                    <span class="float-end" style="cursor:pointer;" title="Close" @onclick="ToggleCategoryInfo">
                        <span class="bi bi-x-lg"></span>
                    </span>
                </div>
            }

            @if (ShowAddItemInfo)
            {
                <div class="alert alert-info py-2 px-3 mb-2 small">
                    Add a new item under this category. You can set name, frequency, amount, and retirement adjustment.
                    <span class="float-end" style="cursor:pointer;" title="Close" @onclick="ToggleAddItemInfo">
                        <span class="bi bi-x-lg"></span>
                    </span>
                </div>
            }

            <!-- DESKTOP TABLE VIEW -->
            <table class="table table-sm mb-0 mobile-hide-table">
                <thead>
                    <tr>
                        <th class="fw-bold text-left align-middle" style="width:40px; font-weight: bold !important;">&nbsp;</th>
                        <th class="fw-bold text-center align-middle" style="width:140px; font-weight: bold !important;">
                            @(IsSimpleMode ? "Expense" : "Item")
                        </th>
                        <th class="fw-bold text-center align-middle complex-column" style="width:120px; font-weight: bold !important;">
                            @(IsSimpleMode ? "How Often" : "Frequency")<br /><span class="small">@(IsSimpleMode ? "" : "(Units)")</span>
                        </th>
                        <th class="fw-bold text-end align-middle complex-column" style="width:140px; font-weight: bold !important;">
                            @(IsSimpleMode ? "Amount" : "Per Unit")<br /><span class="small">($)</span>
                        </th>
                        <th class="fw-bold text-end align-middle" style="width:140px; font-weight: bold !important;">
                            @(IsSimpleMode ? "Monthly Cost" : "Per Month")<br /><span class="small">($)</span>
                        </th>
                        <th class="fw-bold text-center align-middle" style="width:120px; font-weight: bold !important;">
                            @(IsSimpleMode ? "Retirement?" : "Include In")<br /><span class="small">@(IsSimpleMode ? "" : "Retirement")</span>
                        </th>
                        <th class="fw-bold text-center align-middle complex-column" style="width:320px; font-weight: bold !important;">
                            Retirement<br /><span class="small">Adjustment</span>
                        </th>
                        <th class="fw-bold text-center align-middle complex-column" style="width:160px; font-weight: bold !important;">
                            Inflation<br /><span class="small">Rate (%)</span>
                        </th>
                        <th class="fw-bold text-end align-middle" style="width:180px; font-weight: bold !important;">
                            @(IsSimpleMode ? "Future Cost" : "Retirement")<br /><span class="small">@(IsSimpleMode ? "($)" : "Value")</span>
                        </th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in Items.OrderBy(i => i.Subcategory ?? string.Empty))
                    {
                        <tr>
                            <td style="width:40px; vertical-align:middle;">
                                <div class="d-flex flex-column gap-1">
                                    <button style="background: none; border: none; padding: 2px 4px; color: rgba(220, 53, 69, 0.8); font-size: 0.8rem;" 
                                            title="Remove item" 
                                            aria-label="Remove item" 
                                            @onclick="() => OnRemoveItem.InvokeAsync(item)" 
                                            disabled="@IsSaving">
                                        <span class="bi bi-trash-fill" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </td>
                            <td class="text-left align-middle">@item.Subcategory</td>
                            <td class="text-center align-middle complex-column" style="width:120px;">@item.Frequency</td>
                            <td class="text-end align-middle complex-column" style="width:140px;">@FormatCurrency(item.CurrentValue)</td>
                            <td class="text-end align-middle" style="width:140px;">
                                <span class="fw-bold">@FormatCurrency(item.GetMonthlyEquivalent)</span>
                            </td>
                            <td class="text-center align-middle" style="width:60px;">
                                @if (item.IncludeInRetirement)
                                {
                                    @if (IsSimpleMode)
                                    {
                                        <span class="badge bg-success">Yes</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-check-lg text-success" title="Included in retirement"></i>
                                    }
                                }
                                else
                                {
                                    @if (IsSimpleMode)
                                    {
                                        <span class="badge bg-secondary">No</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-x-lg text-danger" title="Not included in retirement"></i>
                                    }
                                }
                            </td>
                            <td class="text-center align-middle complex-column" style="width:320px;">
                                @if (item.IncludeInRetirement)
                                {
                                    @if (item.AdjustOption == RetirementAdjustOption.CustomPercentage)
                                    {
                                        <span>@item.CustomPercentage%</span>
                                    }
                                    else if (item.AdjustOption == RetirementAdjustOption.Manual)
                                    {
                                        <span>@FormatCurrency(item.ManualRetirementValue ?? 0)</span>
                                    }
                                    else if (item.AdjustOption == RetirementAdjustOption.Same)
                                    {
                                        <span>No change</span>
                                    }
                                    else if (item.AdjustOption == RetirementAdjustOption.Inflation)
                                    {
                                        <span>Inflation</span>
                                    }
                                }
                            </td>
                            <td class="text-center align-middle complex-column" style="width:160px;">
                                @if (item.IncludeInRetirement && item.AdjustOption == RetirementAdjustOption.Inflation)
                                {
                                    @if (item.PerItemInflationSource == InflationSource.UseGlobal)
                                    {
                                        <span>@GlobalInflationRate%</span>
                                    }
                                    else if (item.PerItemInflationSource == InflationSource.Custom)
                                    {
                                        <span>@item.PerItemInflationPercent%</span>
                                    }
                                }
                            </td>
                            <td class="text-end align-middle" style="width:180px;">
                                <span class="fw-bold">@FormatCurrency(item.GetRetirementValue(YearsToRetirement, GlobalInflationRate))</span>
                            </td>
                            <td style="width:120px; vertical-align:middle;">
                                <div class="d-flex align-items-center gap-2 justify-content-end">
                                    <button class="btn btn-sm btn-outline-primary px-2 py-1"
                                            style="font-size:0.92rem; white-space:nowrap;"
                                            title="@(IsSimpleMode ? "Edit this expense" : "View or edit this item")"
                                            @onclick="() => OnEditItem.InvokeAsync(item)">
                                        <i class="bi bi-pencil-square me-1"></i>
                                        <span class="d-none d-md-inline">@(IsSimpleMode ? "Edit" : "View/Edit")</span>
                                    </button>
                                    <span class="bi bi-info-circle text-info @(IsSimpleMode ? "" : "")"
                                          style="cursor: pointer; font-size: .95rem;"
                                          title="What is this?"
                                          @onclick="() => ToggleViewEditInfo(item)"></span>
                                </div>
                            </td>
                        </tr>
                        @if (IsViewEditInfoOpen(item))
                        {
                            <tr>
                                <td colspan="10" class="p-0">
                                    <div class="alert alert-info py-2 px-3 mb-2 small m-0">
                                        View/Edit opens the item modal to update name, frequency, amount, and retirement adjustments
                                        (Same, Custom %, Manual, Inflation). Changes auto?save.
                                        <span class="float-end" style="cursor:pointer;" title="Close" @onclick="() => ToggleViewEditInfo(item)">
                                            <span class="bi bi-x-lg"></span>
                                        </span>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <!-- MOBILE CARD VIEW -->
            <div class="mobile-card-layout" style="display: none;">
                @foreach (var item in Items.OrderBy(i => i.Subcategory ?? string.Empty))
                {
                    <div class="expense-card">
                        <!-- Card Header: Name + Actions -->
                        <div class="expense-card-header">
                            <div class="expense-card-title">@item.Subcategory</div>
                            <div class="expense-card-actions">
                                <button class="btn btn-sm btn-outline-primary expense-card-btn"
                                        title="Edit"
                                        @onclick="() => OnEditItem.InvokeAsync(item)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger expense-card-btn"
                                        title="Remove"
                                        @onclick="() => OnRemoveItem.InvokeAsync(item)"
                                        disabled="@IsSaving">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Card Body: Key Info in Grid -->
                        <div class="expense-card-body">
                            <!-- Now: Monthly Cost -->
                            <div class="expense-card-field expense-card-field-full">
                                <div class="expense-card-label">Now</div>
                                <div class="expense-card-value-large" style="color: #0d6efd; font-weight: 600;">
                                    @FormatCurrency(item.GetMonthlyEquivalent)/mo
                                </div>
                            </div>

                            <!-- Retirement: Smart Display -->
                            <div class="expense-card-field expense-card-field-full">
                                <div class="expense-card-label">Retirement</div>
                                <div class="expense-card-value-large" style="color: #198754; font-weight: 600;">
                                    @if (item.IncludeInRetirement)
                                    {
                                        var retValue = item.GetRetirementValue(YearsToRetirement, GlobalInflationRate);
                                        var adjustment = "";

                                        if (item.AdjustOption == RetirementAdjustOption.Inflation)
                                        {
                                            adjustment = $" (+inflation)";
                                        }
                                        else if (item.AdjustOption == RetirementAdjustOption.CustomPercentage)
                                        {
                                            adjustment = $" ({item.CustomPercentage}%)";
                                        }
                                        else if (item.AdjustOption == RetirementAdjustOption.Manual)
                                        {
                                            adjustment = " (manual)";
                                        }

                                        <span>@FormatCurrency(retValue)/mo@adjustment</span>
                                    }
                                    else
                                    {
                                        var reason = item.RetirementExclusionReason switch
                                        {
                                            ExclusionReason.NotNeeded => "Not needed",
                                            ExclusionReason.PaidOff => "Paid off",
                                            ExclusionReason.Other => "Not included",
                                            _ => "Not included"
                                        };
                                        <span style="color: #6c757d; font-style: italic;">@reason</span>
                                    }
                                </div>
                            </div>

                            <!-- Frequency & Amount side by side (Advanced mode only) -->
                            @if (!IsSimpleMode)
                            {
                                <div class="expense-card-field">
                                    <div class="expense-card-label">Frequency</div>
                                    <div class="expense-card-value">@item.Frequency</div>
                                </div>
                                <div class="expense-card-field">
                                    <div class="expense-card-label">Amount</div>
                                    <div class="expense-card-value">@FormatCurrency(item.CurrentValue)</div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string CategoryName { get; set; } = string.Empty;
    [Parameter] public List<CostItem> Items { get; set; } = new();
    [Parameter] public decimal CurrentTotal { get; set; }
    [Parameter] public decimal RetirementTotal { get; set; }
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public bool IsSimpleMode { get; set; }
    [Parameter] public bool IsSaving { get; set; }
    [Parameter] public int YearsToRetirement { get; set; }
    [Parameter] public decimal GlobalInflationRate { get; set; }
    [Parameter] public string CollapseId { get; set; } = string.Empty;

    [Parameter] public EventCallback OnToggleExpanded { get; set; }
    [Parameter] public EventCallback OnRemoveCategory { get; set; }
    [Parameter] public EventCallback OnAddItem { get; set; }
    [Parameter] public EventCallback<CostItem> OnRemoveItem { get; set; }
    [Parameter] public EventCallback<CostItem> OnEditItem { get; set; }

    private bool ShowCategoryInfo { get; set; }
    private bool ShowAddItemInfo { get; set; }
    private HashSet<CostItem> viewEditInfoOpen = new();

    private void ToggleExpanded() => OnToggleExpanded.InvokeAsync();
    private void ToggleCategoryInfo() => ShowCategoryInfo = !ShowCategoryInfo;
    private void ToggleAddItemInfo() => ShowAddItemInfo = !ShowAddItemInfo;

    private bool IsViewEditInfoOpen(CostItem item) => viewEditInfoOpen.Contains(item);
    private void ToggleViewEditInfo(CostItem item)
    {
        if (viewEditInfoOpen.Contains(item))
            viewEditInfoOpen.Remove(item);
        else
            viewEditInfoOpen.Add(item);
    }

    private static string FormatCurrency(decimal value)
    {
        return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C0}", value);
    }
}
