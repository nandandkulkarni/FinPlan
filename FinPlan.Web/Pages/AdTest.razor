@page "/ad-test"
@using FinPlan.Web.Components.Shared
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<PageTitle>Google Ads Test Page</PageTitle>

<div class="container my-5">
    <h2 class="mb-4">🧪 Google AdSense Test Page</h2>
    
    <div class="alert alert-warning">
        <strong>⚠️ Localhost Limitation:</strong> Google AdSense blocks requests from localhost (403 Forbidden).
        <ul class="mb-0 mt-2">
            <li>Your code is working correctly ✅</li>
            <li>Ads are being initialized and pushed to the queue ✅</li>
            <li>Google's servers refuse to serve ads to localhost ❌</li>
            <li><strong>Solution:</strong> Deploy to a real domain to see actual ads</li>
        </ul>
    </div>
    
    <div class="alert alert-info">
        <strong>ℹ️ What You're Seeing:</strong>
        <ul class="mb-0">
            <li>Purple placeholder boxes instead of real ads</li>
            <li>This is normal behavior for localhost development</li>
            <li>On a real domain, these will be replaced with actual AdSense ads</li>
            <li>Your settings: <code>UseTestAds: true</code> and <code>ClientId: ca-pub-1906825262608580</code></li>
        </ul>
    </div>

    @if (!string.IsNullOrEmpty(diagnosticMessage))
    {
        <div class="alert alert-secondary">
            <strong>🔍 Diagnostic Info:</strong>
            <pre class="mb-0">@diagnosticMessage</pre>
        </div>
    }

    <!-- Horizontal Banner -->
    <div class="mb-5">
        <h4>Horizontal Banner (728x90)</h4>
        <div class="border p-3 bg-light">
            <AdUnit Slot=""
                    Style="display:inline-block; width:728px; height:90px;"
                    Format="horizontal"
                    PlaceholderText="Leaderboard Ad (728x90)"></AdUnit>
        </div>
    </div>

    <!-- Medium Rectangle -->
    <div class="mb-5">
        <h4>Medium Rectangle (300x250)</h4>
        <div class="border p-3 bg-light">
            <AdUnit Slot=""
                    Style="display:inline-block; width:300px; height:250px;"
                    PlaceholderText="Medium Rectangle (300x250)"></AdUnit>
        </div>
    </div>

    <!-- Responsive Ad -->
    <div class="mb-5">
        <h4>Responsive Ad (Auto-size)</h4>
        <div class="border p-3 bg-light">
            <AdUnit Slot=""
                    Style="display:block; min-height: 120px;"
                    Format="auto"
                    Responsive="true"
                    PlaceholderText="Responsive Advertisement"></AdUnit>
        </div>
    </div>

    <!-- Vertical Sidebar -->
    <div class="mb-5">
        <h4>Vertical Sidebar (160x600)</h4>
        <div class="border p-3 bg-light">
            <AdUnit Slot=""
                    Style="display:inline-block; width:160px; height:600px;"
                    Format="vertical"
                    PlaceholderText="Skyscraper Ad (160x600)"></AdUnit>
        </div>
    </div>

    <div class="alert alert-success mt-4">
        <strong>✅ Your Code is Working!</strong>
        <ul class="mb-0">
            <li>AdUnit components are rendering correctly</li>
            <li>Ad initialization logic is functioning</li>
            <li>The only "issue" is Google's localhost restriction</li>
            <li><strong>Next step:</strong> Deploy to Azure, Vercel, or any real domain</li>
        </ul>
    </div>

    <div class="alert alert-secondary mt-3">
        <strong>🔧 Testing Options:</strong>
        <ul class="mb-0">
            <li><strong>Option 1:</strong> Deploy to a staging/production domain</li>
            <li><strong>Option 2:</strong> Use a local domain (edit hosts file: <code>127.0.0.1 dev.yourapp.local</code>)</li>
            <li><strong>Option 3:</strong> Accept placeholders for local development (current setup)</li>
        </ul>
    </div>

    <div class="mt-4 p-3 bg-light border rounded">
        <h5>🧪 Alternative Test</h5>
        <p class="mb-2">Try the bare-bones test page (will also show placeholders on localhost):</p>
        <a href="/simple-ad-test" class="btn btn-primary">
            <i class="bi bi-lightning"></i> Simple Ad Test (No Components)
        </a>
    </div>
</div>

@code {
    private string? diagnosticMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Log ad testing info to console
                await JSRuntime.InvokeVoidAsync("console.log", "🧪 Ad Test Page Loaded - Google test ads should appear in test mode");
                await JSRuntime.InvokeVoidAsync("console.log", "Publisher ID: ca-pub-1906825262608580");
                await JSRuntime.InvokeVoidAsync("console.log", "Test Mode: ENABLED (data-adtest='on')");

                // Wait longer for all ads to initialize
                // (4 ads × 300ms delay + 2 animation frames + AdSense processing time)
                await Task.Delay(4000);

                // Check if adsbygoogle exists and how many ads were pushed
                var adsbyGoogleExists = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.adsbygoogle !== 'undefined'");
                
                if (adsbyGoogleExists)
                {
                    var adCount = await JSRuntime.InvokeAsync<int>("eval", "window.adsbygoogle?.length || 0");
                    var status = adCount == 4 ? "✅" : "⚠️";
                    diagnosticMessage = $"{status} AdSense loaded\n📊 Ads pushed to queue: {adCount}\n💡 Expected: 4 ads on this page\n⏰ Checked at: {DateTime.Now:HH:mm:ss}";
                }
                else
                {
                    diagnosticMessage = $"❌ AdSense script not loaded\n💡 Check for ad blockers or network issues\n⏰ Checked at: {DateTime.Now:HH:mm:ss}";
                }

                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                diagnosticMessage = $"⚠️ Diagnostic error: {ex.Message}";
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}
