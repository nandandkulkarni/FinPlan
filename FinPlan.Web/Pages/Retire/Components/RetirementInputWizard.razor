@using FinPlan.Shared.Models
@using FinPlan.Shared.Models.Savings
@using FinPlan.Shared.Models.Spending
@using FinPlan.Web.Services
@using Microsoft.AspNetCore.Components
@using System.Reflection
@using Microsoft.JSInterop
@using System.Net.Http

@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory
@inject UserGuidService UserGuidService

@inject IJSRuntime JSRuntime

<style>

    /* Copy-from-Savings hint styles */
    .copy-hint {
        display: flex;
        align-items: center;
        gap: .5rem;
        margin-top: .35rem;
        padding: .4rem .6rem;
        border: 1px dashed var(--bs-border-color, #d0d7de);
        border-left: 3px solid #2563EB; /* default accent */
        border-radius: 6px;
        background: #f7fbff;
        font-size: .875rem;
    }

        .copy-hint.partner {
            border-left-color: #8B5CF6;
        }

        .copy-hint .hint-meta {
            color: var(--muted, #6b7280);
            font-size: .8rem;
        }

    .copy-btn-pill {
        padding: .15rem .6rem;
        line-height: 1.1;
        border-radius: 999px;
        font-size: .8rem;
    }

    .copy-hint .refresh-link {
        margin-left: auto;
        color: #6b7280;
        cursor: pointer;
        font-size: .8rem;
    }

    .wizard-step-bubble {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        background: #6D5DFC; /* accent color used elsewhere */
        color: #fff;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 800;
        font-size: 1rem;
        box-shadow: 0 4px 12px rgba(109,93,252,0.18);
    }

    .wizard-header-row {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .wizard-step-text {
        color: var(--muted);
        font-size: 0.9rem;
    }

    .small-note {
        font-size: 0.85rem;
        color: var(--muted);
        margin-top: 4px;
    }

    .info-icon {
        font-size: 0.85rem;
        color: #1F6FEB;
        cursor: pointer;
        margin-left: 0.25rem;
        transition: transform 0.2s ease, color 0.2s ease;
    }

        .info-icon:hover {
            transform: scale(1.1);
            color: #0E62DA;
        }

    .info-tooltip {
        background-color: #EBF5FF;
        border: 1px solid #BEDAFF;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        margin-top: 0.25rem;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        position: relative;
        line-height: 1.4;
    }
    /* In RetirementInputWizard.razor, find the step badge styling */
    .wizard-step-badge {
        /* Other properties remain the same */
        background: var(--brand-yellow); /* Change from var(--accent) or the hardcoded #6D5DFC to var(--brand-yellow) */
        color: #111;
        /* Other properties remain the same */
    }

    /* Wizard-only: keep a consistent modal width across steps on this page only */
    .retirement-wizard .modal-dialog {
        width: 800px !important; /* standard width for this wizard */
        max-width: 800px !important;
    }

    /* Desktop: unify wizard body height so the modal doesn't resize between steps */
    @@media (min-width: 768px) {
        .wizard-modal-body {
            height: 540px; /* roughly matches Savings wizard */
            overflow-y: auto;
        }
    }

    /* ===========================
                                   MOBILE OPTIMIZATIONS
                                   Only affects screens less than 768px
                                   =========================== */
    @@media (max-width: 767px) {
        /* 1. Modal Dialog - Full screen on mobile */
        .modal-dialog {
            margin: 0 !important;
            max-width: 100% !important;
            width: 100% !important;
            height: 100vh !important;
        }

        .modal-content {
            height: 100vh !important;
            border-radius: 0 !important;
        }
        /* 2. Modal Body - Better scrolling on mobile */
        .modal-body {
            max-height: none !important;
            min-height: auto !important;
            flex: 1 !important;
            overflow-y: auto !important;
            padding: 1rem !important;
        }
        /* 3. Wizard Header - More compact on mobile */
        .wizard-header-row {
            gap: 8px !important;
        }

        .step-badge {
            min-width: 36px !important;
            height: 36px !important;
            font-size: 0.875rem !important;
        }

        .modal-title {
            font-size: 1.1rem !important;
        }

        .wizard-step-text {
            font-size: 0.75rem !important;
        }
        /* 4. Account Cards - Stack properly on mobile */
        .row > [class*="col-"] {
            padding-left: 8px !important;
            padding-right: 8px !important;
        }

        .account-card {
            margin-bottom: 1rem !important;
        }

            .account-card .card-body {
                padding: 1rem !important;
            }

            .account-card .card-title {
                font-size: 1rem !important;
                margin-bottom: 0.75rem !important;
            }
        /* 5. Form Inputs - Larger tap targets on mobile */
        .form-control,
        .currency-input {
            min-height: 44px !important;
            font-size: 1rem !important;
        }

        .form-label {
            font-size: 0.95rem !important;
            margin-bottom: 0.5rem !important;
        }
        /* 6. Info Tooltips - Better positioning on mobile */
        .info-tooltip {
            position: fixed !important;
            left: 50% !important;
            top: 50% !important;
            transform: translate(-50%, -50%) !important;
            max-width: 90vw !important;
            z-index: 1060 !important;
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.3) !important;
        }

        .info-icon {
            font-size: 1.25rem !important;
            min-width: 44px !important;
            min-height: 44px !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
        }
        /* 7. Modal Footer Buttons - Stack vertically on mobile */
        .modal-footer {
            flex-direction: column-reverse !important;
            gap: 0.5rem !important;
            padding: 1rem !important;
        }

            .modal-footer .btn {
                width: 100% !important;
                min-height: 44px !important;
                margin: 0 !important;
            }
        /* 8. Spending Category Options - Better touch targets */
        .form-check {
            min-height: 44px !important;
            padding: 0.5rem !important;
            margin-bottom: 0.5rem !important;
        }

        .form-check-input[type="radio"],
        .form-check-input[type="checkbox"] {
            min-width: 20px !important;
            min-height: 20px !important;
        }
        /* 9. Alert boxes - More compact on mobile */
        .alert {
            padding: 0.75rem !important;
            font-size: 0.875rem !important;
        }

            .alert ul {
                padding-left: 1.25rem !important;
            }

            .alert li {
                margin-bottom: 0.25rem !important;
                font-size: 0.8rem !important;
            }
        /* 10. Account Header - Better spacing on mobile */
        .account-header {
            margin-bottom: 0.75rem !important;
        }

            .account-header i {
                font-size: 1.25rem !important;
            }
        /* 11. Small notes and text - Optimized for mobile */
        .small-note,
        .text-muted.small,
        small {
            font-size: 0.75rem !important;
        }
        /* 12. Input groups with units - Better layout on mobile */
        .d-flex.align-items-center .form-control {
            flex: 1 !important;
        }

        .d-flex.align-items-center .text-muted {
            font-size: 0.875rem !important;
            white-space: nowrap !important;
        }
    }
</style>

@if (Visible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block retirement-wizard" tabindex="-1" role="dialog" style="z-index:1055;">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="wizard-header-row">
                        <span class="step-badge">@wizardStep</span>
                        <div>
                            <h5 class="modal-title" style="margin:0;">Retirement Plan Inputs</h5>
                            <div class="wizard-step-text">Step @wizardStep of 6</div>
                        </div>
                    </div>
                    <button type="button" class="btn-close" aria-label="Save & Close" @onclick="CloseClicked"></button>
                </div>
                <div class="modal-body wizard-modal-body">
                    @if (wizardStep == 1)
                    {
                        <!-- Desktop version (md and up) -->
                        <div class="d-none d-md-block">
                            <label class="form-label mb-3">Current Ages &amp; Retirement Ages</label>
                            <div class="row mb-3">
                                <!-- Your Ages Card -->
                                <div class="col-md-6 mb-3">
                                    <div class="card account-card" style="border-top: 4px solid #2563EB;">
                                        <div class="card-body">
                                            <div class="account-header">
                                                <i class="bi bi-person-check" style="color: #2563EB;"></i>
                                                <h5 class="card-title mb-3">Your Planning Ages</h5>
                                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipCurrentAgeYou = !showToolTipCurrentAgeYou" tabindex="0" title="Click for more info"></span>
                                            </div>
                                            @if (showToolTipCurrentAgeYou)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Your Ages:</strong> Enter your current age and the age you plan to retire.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipCurrentAgeYou = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                            <div class="mb-3">
                                                <label class="form-label">Current Age</label>
                                                <div class="d-flex align-items-center">
                                                    <input class="form-control currency-input me-2" type="number" value="@(Model?.CurrentAgeYou ?? 0)" min="18" max="100" style="border-width: 2px; border-color: #ccc;" @onchange="e => OnInputChanged(nameof(Model.CurrentAgeYou), e.Value!)" />
                                                    <span class="fs-6 text-muted">years</span>
                                                </div>
                                                <div class="small-note">Your age today</div>

                                                @if (ShowHint(savingsCurrentAgeYou, Model?.CurrentAgeYou ?? 0))
                                                {
                                                    <div class="copy-hint">
                                                        <span>From Savings: <strong>@savingsCurrentAgeYou</strong></span>
                                                        <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.CurrentAgeYou))">Copy</button>
                                                    </div>
                                                }
                                            </div>

                                            <div class="mb-0">
                                                <label class="form-label">Retirement Age</label>
                                                <div class="d-flex align-items-center">
                                                    <input class="form-control currency-input me-2" type="number" value="@(Model?.RetirementAgeYou ?? 0)" min="40" max="100" style="border-width: 2px; border-color: #ccc;" @onchange="e => OnInputChanged(nameof(Model.RetirementAgeYou), e.Value!)" />
                                                    <span class="fs-6 text-muted">years</span>
                                                </div>
                                                <div class="small-note">When you plan to stop working</div>

                                                @if (ShowHint(savingsRetirementAgeYou, Model?.RetirementAgeYou ?? 0))
                                                {
                                                    <div class="copy-hint">
                                                        <span>From Savings: <strong>@savingsRetirementAgeYou</strong></span>
                                                        <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.RetirementAgeYou))">Copy</button>

                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Partner Ages Card -->
                                <div class="col-md-6 mb-3">
                                    <div class="card account-card" style="border-top: 4px solid #8B5CF6;">
                                        <div class="card-body">
                                            <div class="account-header">
                                                <i class="bi bi-people" style="color: #8B5CF6;"></i>
                                                <h5 class="card-title mb-3">Partner's Planning Ages</h5>
                                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipCurrentAgePartner = !showToolTipCurrentAgePartner" tabindex="0" title="Click for more info"></span>
                                            </div>
                                            @if (showToolTipCurrentAgePartner)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Partner's Ages:</strong> Enter your partner's current age and planned retirement age. Leave as 0 if planning for yourself only.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipCurrentAgePartner = false" title="Close">
                                                        <span class="bi bi-x-lg"></span>
                                                    </span>
                                                </div>
                                            }
                                            <div class="mb-3">
                                                <label class="form-label">Current Age</label>
                                                <div class="d-flex align-items-center">
                                                    <input class="form-control currency-input me-2" type="number" value="@(Model?.CurrentAgePartner ?? 0)" min="0" max="100" style="border-width: 2px; border-color: #ccc;" @onchange="e => OnInputChanged(nameof(Model.CurrentAgePartner), e.Value!)" />
                                                    <span class="fs-6 text-muted">years</span>
                                                </div>
                                                <div class="small-note">Partner's age today</div>

                                                @if (ShowHint(savingsCurrentAgePartner, Model?.CurrentAgePartner ?? 0))
                                                {
                                                    <div class="copy-hint partner">
                                                        <span>From Savings: <strong>@savingsCurrentAgePartner</strong></span>
                                                        <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.CurrentAgePartner))">Copy</button>
                                                    </div>
                                                }
                                            </div>

                                            <div class="mb-0">
                                                <label class="form-label">Retirement Age</label>
                                                <div class="d-flex align-items-center">
                                                    <input class="form-control currency-input me-2" type="number" value="@(Model?.RetirementAgePartner ?? 0)" min="0" max="100" style="border-width: 2px; border-color: #ccc;" @onchange="e => OnInputChanged(nameof(Model.RetirementAgePartner), e.Value!)" />
                                                    <span class="fs-6 text-muted">years</span>
                                                </div>
                                                <div class="small-note">Leave as 0 if no partner</div>

                                                @if (ShowHint(savingsRetirementAgePartner, Model?.RetirementAgePartner ?? 0))
                                                {
                                                    <div class="copy-hint partner">
                                                        <span>From Savings: <strong>@savingsRetirementAgePartner</strong></span>
                                                        <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.RetirementAgePartner))">Copy</button>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Mobile version (xs–sm) -->
                        <div class="d-block d-md-none">
                            <label class="form-label mb-2">Current Ages &amp; Retirement Ages</label>

                            <!-- Your Ages (stacked) -->
                            <div class="card mb-2" style="border-top: 4px solid #2563EB;">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-person-check me-2" style="color: #2563EB;"></i>
                                        <h6 class="mb-0">Your Planning Ages</h6>
                                    </div>

                                    <div class="mb-2">
                                        <label class="form-label mb-1">Current Age</label>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.CurrentAgeYou ?? 0)" min="18" max="100" @onchange="e => OnInputChanged(nameof(Model.CurrentAgeYou), e.Value!)" />
                                        <div class="text-muted small mt-1">Your age today</div>

                                        @if (ShowHint(savingsCurrentAgeYou, Model?.CurrentAgeYou ?? 0))
                                        {
                                            <div class="copy-hint">
                                                <span>Use @savingsCurrentAgeYou from Savings</span>
                                                <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.CurrentAgeYou))">Copy</button>
                                                @*                                                 <span class="refresh-link" @onclick="RefreshHintsAsync">Refresh</span>
 *@                                            </div>
                                        }
                                    </div>

                                    <div class="mb-0">
                                        <label class="form-label mb-1">Retirement Age</label>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.RetirementAgeYou ?? 0)" min="40" max="100" @onchange="e => OnInputChanged(nameof(Model.RetirementAgeYou), e.Value!)" />
                                        <div class="text-muted small mt-1">When you plan to stop working</div>

                                        @if (ShowHint(savingsRetirementAgeYou, Model?.RetirementAgeYou ?? 0))
                                        {
                                            <div class="copy-hint">
                                                <span>Use @savingsRetirementAgeYou from Savings</span>
                                                <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.RetirementAgeYou))">Copy</button>
                                                @*                                                 <span class="refresh-link" @onclick="RefreshHintsAsync">Refresh</span>
 *@                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Partner Ages (stacked) -->
                            <div class="card mb-2" style="border-top: 4px solid #8B5CF6;">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="bi bi-people me-2" style="color: #8B5CF6;"></i>
                                        <h6 class="mb-0">Partner's Planning Ages</h6>
                                    </div>

                                    <div class="mb-2">
                                        <label class="form-label mb-1">Current Age</label>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.CurrentAgePartner ?? 0)" min="0" max="100" @onchange="e => OnInputChanged(nameof(Model.CurrentAgePartner), e.Value!)" />
                                        <div class="text-muted small mt-1">Partner's age today (0 if none)</div>

                                        @if (ShowHint(savingsCurrentAgePartner, Model?.CurrentAgePartner ?? 0))
                                        {
                                            <div class="copy-hint partner">
                                                <span>Use @savingsCurrentAgePartner from Savings</span>
                                                <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.CurrentAgePartner))">Copy</button>
                                                @*                                                 <span class="refresh-link" @onclick="RefreshHintsAsync">Refresh</span>
 *@                                            </div>
                                        }
                                    </div>

                                    <div class="mb-0">
                                        <label class="form-label mb-1">Retirement Age</label>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.RetirementAgePartner ?? 0)" min="0" max="100" @onchange="e => OnInputChanged(nameof(Model.RetirementAgePartner), e.Value!)" />
                                        <div class="text-muted small mt-1">Leave 0 if not applicable</div>

                                        @if (ShowHint(savingsRetirementAgePartner, Model?.RetirementAgePartner ?? 0))
                                        {
                                            <div class="copy-hint partner">
                                                <span>Use @savingsRetirementAgePartner from Savings</span>
                                                <button class="btn btn-outline-primary btn-sm copy-btn-pill" @onclick="() => CopyFromSavings(nameof(Model.RetirementAgePartner))">Copy</button>
                                                @*                                                 <span class="refresh-link" @onclick="RefreshHintsAsync">Refresh</span>
 *@                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (wizardStep == 2)
                    {
                        <label class="form-label mb-3">Starting Balances &amp; Expected Returns</label>

                        <!-- Desktop (md+) -->
                        <div class="d-none d-md-block">
                            <!-- Account Balances Section -->
                            <div class="row mb-3">
                                <!-- Taxable -->
                                <div class="col-md-4 mb-3">
                                    <div class="card account-card" style="border-top: 4px solid #4299E1;">
                                        <div class="card-body">
                                            <div class="account-header">
                                                <i class="bi bi-wallet2" style="color: #4299E1;"></i>
                                                <h5 class="card-title mb-3">Taxable Accounts</h5>
                                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTaxableBalance = !showToolTipTaxableBalance" tabindex="0" title="Click for more info"></span>
                                            </div>
                                            @if (showToolTipTaxableBalance)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Taxable Accounts:</strong> Non-retirement investment accounts subject to taxes on dividends, interest, and gains.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTaxableBalance = false"><span class="bi bi-x-lg"></span></span>
                                                </div>
                                            }
                                            <div class="input-group mb-2">
                                                <span class="input-group-text">$</span>
                                                <input class="form-control currency-input" type="number" value="@(Model?.TaxableBalance ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.TaxableBalance), e.Value!)" />
                                            </div>
                                            <div class="text-muted small">Subject to annual taxes on earnings</div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Traditional -->
                                <div class="col-md-4 mb-3">
                                    <div class="card account-card" style="border-top: 4px solid #48BB78;">
                                        <div class="card-body">
                                            <div class="account-header">
                                                <i class="bi bi-piggy-bank" style="color: #48BB78;"></i>
                                                <h5 class="card-title mb-3">Traditional Accounts</h5>
                                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipTraditionalBalance = !showToolTipTraditionalBalance" tabindex="0" title="Click for more info"></span>
                                            </div>
                                            @if (showToolTipTraditionalBalance)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Traditional Accounts:</strong> Tax-deferred accounts like 401(k)/Traditional IRA. Withdrawals are taxed as ordinary income.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipTraditionalBalance = false"><span class="bi bi-x-lg"></span></span>
                                                </div>
                                            }
                                            <div class="input-group mb-2">
                                                <span class="input-group-text">$</span>
                                                <input class="form-control currency-input" type="number" value="@(Model?.TraditionalBalance ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.TraditionalBalance), e.Value!)" />
                                            </div>
                                            <div class="text-muted small">Tax-deferred until withdrawal</div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Roth -->
                                <div class="col-md-4 mb-3">
                                    <div class="card account-card" style="border-top: 4px solid #805AD5;">
                                        <div class="card-body">
                                            <div class="account-header">
                                                <i class="bi bi-safe" style="color: #805AD5;"></i>
                                                <h5 class="card-title mb-3">Roth Accounts</h5>
                                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipRothBalance = !showToolTipRothBalance" tabindex="0" title="Click for more info"></span>
                                            </div>
                                            @if (showToolTipRothBalance)
                                            {
                                                <div class="info-tooltip">
                                                    <strong>Roth Accounts:</strong> Tax-free growth/withdrawals if qualified. Contributions made with after-tax dollars.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipRothBalance = false"><span class="bi bi-x-lg"></span></span>
                                                </div>
                                            }
                                            <div class="input-group mb-2">
                                                <span class="input-group-text">$</span>
                                                <input class="form-control currency-input" type="number" value="@(Model?.RothBalance ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.RothBalance), e.Value!)" />
                                            </div>
                                            <div class="text-muted small">Tax-free growth and withdrawals</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Portfolio Summary -->
                            <div class="card mb-3" style="border-top: 4px solid #FFD700;">
                                <div class="card-body d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-pie-chart-fill me-2" style="color:#FFD700;"></i>
                                        <h5 class="mb-0">Portfolio Allocation</h5>
                                    </div>
                                    <div class="fw-bold" style="font-variant-numeric: tabular-nums;">@TotalStarting.ToString("C0")</div>
                                </div>
                            </div>
                        </div>

                        <!-- Mobile (xs–sm) -->
                        <div class="d-block d-md-none">
                            <div class="card mb-2" style="border-top: 4px solid #4299E1;">
                                <div class="card-body">
                                    <div class="mb-1 fw-semibold">Taxable Accounts</div>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.TaxableBalance ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.TaxableBalance), e.Value!)" />
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-2" style="border-top: 4px solid #48BB78;">
                                <div class="card-body">
                                    <div class="mb-1 fw-semibold">Traditional Accounts</div>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.TraditionalBalance ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.TraditionalBalance), e.Value!)" />
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-2" style="border-top: 4px solid #805AD5;">
                                <div class="card-body">
                                    <div class="mb-1 fw-semibold">Roth Accounts</div>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.RothBalance ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.RothBalance), e.Value!)" />
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-2">
                                <div class="card-body d-flex justify-content-between">
                                    <span class="text-muted">Total</span>
                                    <span class="fw-bold">@TotalStarting.ToString("C0")</span>
                                </div>
                            </div>
                        </div>
                    }
                    else if (wizardStep == 3)
                    {
                        <label class="form-label mb-3">Social Security Benefits</label>

                        <!-- Desktop (md+) -->
                        <div class="d-none d-md-block">
                            <div class="row mb-3">
                                <!-- You: Claiming Age -->
                                <div class="col-md-6 mb-3">
                                    <div class="card" style="border-top: 4px solid #2563EB;">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center mb-2">
                                                <i class="bi bi-calendar-check me-2" style="color:#2563EB;"></i>
                                                <h6 class="mb-0">Your Claiming Age</h6>
                                                <span class="bi bi-info-circle info-icon ms-auto" @onclick="() => showToolTipSSStartAgeYou = !showToolTipSSStartAgeYou"></span>
                                            </div>
                                            @if (showToolTipSSStartAgeYou)
                                            {
                                                <div class="info-tooltip">
                                                    Choose when to claim (62–70). Earlier = reduced benefit; later = larger benefit.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSStartAgeYou = false"><span class="bi bi-x-lg"></span></span>
                                                </div>
                                            }
                                            <div class="input-group">
                                                <input class="form-control" type="number" value="@Model!.SSStartAgeYou" min="62" max="70" @onchange="e => OnInputChanged(nameof(Model.SSStartAgeYou), e.Value!)" />
                                                <span class="input-group-text">years</span>
                                            </div>
                                            <div class="text-muted small mt-1">62: Early | 67: Full | 70: Max</div>
                                        </div>
                                    </div>
                                </div>

                                <!-- You: Monthly -->
                                <div class="col-md-6 mb-3">
                                    <div class="card" style="border-top: 4px solid #2563EB;">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center mb-2">
                                                <i class="bi bi-currency-dollar me-2" style="color:#2563EB;"></i>
                                                <h6 class="mb-0">Your Monthly Benefit</h6>
                                                <span class="bi bi-info-circle info-icon ms-auto" @onclick="() => showToolTipSocialSecurityYou = !showToolTipSocialSecurityYou"></span>
                                            </div>
                                            @if (showToolTipSocialSecurityYou)
                                            {
                                                <div class="info-tooltip">
                                                    Estimate from ssa.gov statements or calculators.
                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSocialSecurityYou = false"><span class="bi bi-x-lg"></span></span>
                                                </div>
                                            }
                                            <div class="input-group">
                                                <span class="input-group-text">$</span>
                                                <input class="form-control" type="number" value="@(Model?.SocialSecurityMonthlyYou ?? 0m)" step="100" min="0" @onchange="e => OnInputChanged(nameof(Model.SocialSecurityMonthlyYou), e.Value!)" />
                                            </div>
                                            <div class="text-center text-muted small mt-1">$@((Model!.SocialSecurityMonthlyYou * 12).ToString("N0")) annually</div>
                                        </div>
                                    </div>
                                </div>

                                @if (Model.CurrentAgePartner > 0)
                                {
                                    <!-- Partner: Claiming Age -->
                                    <div class="col-md-6 mb-3">
                                        <div class="card" style="border-top: 4px solid #8B5CF6;">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center mb-2">
                                                    <i class="bi bi-calendar-check me-2" style="color:#8B5CF6;"></i>
                                                    <h6 class="mb-0">Partner's Claiming Age</h6>
                                                    <span class="bi bi-info-circle info-icon ms-auto" @onclick="() => showToolTipSSStartAgePartner = !showToolTipSSStartAgePartner"></span>
                                                </div>
                                                @if (showToolTipSSStartAgePartner)
                                                {
                                                    <div class="info-tooltip">
                                                        Coordinate claiming strategies for couples to maximize benefits.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSSStartAgePartner = false"><span class="bi bi-x-lg"></span></span>
                                                    </div>
                                                }
                                                <div class="input-group">
                                                    <input class="form-control" type="number" value="@Model!.SSStartAgePartner" min="62" max="70" @onchange="e => OnInputChanged(nameof(Model.SSStartAgePartner), e.Value!)" />
                                                    <span class="input-group-text">years</span>
                                                </div>
                                                <div class="text-muted small mt-1">62: Early | 67: Full | 70: Max</div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Partner: Monthly -->
                                    <div class="col-md-6 mb-3">
                                        <div class="card" style="border-top: 4px solid #8B5CF6;">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center mb-2">
                                                    <i class="bi bi-currency-dollar me-2" style="color:#8B5CF6;"></i>
                                                    <h6 class="mb-0">Partner's Monthly Benefit</h6>
                                                    <span class="bi bi-info-circle info-icon ms-auto" @onclick="() => showToolTipSocialSecurityPartner = !showToolTipSocialSecurityPartner"></span>
                                                </div>
                                                @if (showToolTipSocialSecurityPartner)
                                                {
                                                    <div class="info-tooltip">
                                                        Partner’s expected monthly benefit; spousal benefits may apply.
                                                        <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipSocialSecurityPartner = false"><span class="bi bi-x-lg"></span></span>
                                                    </div>
                                                }
                                                <div class="input-group">
                                                    <span class="input-group-text">$</span>
                                                    <input class="form-control" type="number" value="@(Model?.SocialSecurityMonthlyPartner ?? 0m)" step="100" min="0" @onchange="e => OnInputChanged(nameof(Model.SocialSecurityMonthlyPartner), e.Value!)" />
                                                </div>
                                                <div class="text-center text-muted small mt-1">$@((Model!.SocialSecurityMonthlyPartner * 12).ToString("N0")) annually</div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Summary -->
                            <div class="card mb-3" style="border-top: 4px solid #059669;">
                                <div class="card-body d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0"><i class="bi bi-calculator me-2" style="color:#059669;"></i>Total Annual Social Security</h6>
                                        <div class="text-muted small">
                                            @(Model.CurrentAgePartner > 0 ? "Combined for both of you" : $"Your annual benefit at age {Model!.SSStartAgeYou}")
                                        </div>
                                    </div>
                                    <div class="fs-5 fw-bold" style="color:#059669;">$@(((Model!.SocialSecurityMonthlyYou + Model!.SocialSecurityMonthlyPartner) * 12).ToString("N0"))</div>
                                </div>
                            </div>

                            <div class="alert alert-info">
                                <i class="bi bi-info-circle-fill me-2"></i> Claim earlier = smaller monthly; claim later (up to 70) = larger monthly.
                            </div>
                        </div>

                        <!-- Mobile (xs–sm) -->
                        <div class="d-block d-md-none">
                            <div class="card mb-2" style="border-top:4px solid #2563EB;">
                                <div class="card-body">
                                    <div class="fw-semibold mb-1">Your Claiming Age</div>
                                    <div class="input-group">
                                        <input class="form-control" type="number" inputmode="numeric" value="@Model!.SSStartAgeYou" min="62" max="70" @onchange="e => OnInputChanged(nameof(Model.SSStartAgeYou), e.Value!)" />
                                        <span class="input-group-text">years</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2" style="border-top:4px solid #2563EB;">
                                <div class="card-body">
                                    <div class="fw-semibold mb-1">Your Monthly Benefit</div>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.SocialSecurityMonthlyYou ?? 0m)" step="100" min="0" @onchange="e => OnInputChanged(nameof(Model.SocialSecurityMonthlyYou), e.Value!)" />
                                    </div>
                                    <div class="text-muted small mt-1">$@((Model!.SocialSecurityMonthlyYou * 12).ToString("N0")) annually</div>
                                </div>
                            </div>

                            @if (Model.CurrentAgePartner > 0)
                            {
                                <div class="card mb-2" style="border-top:4px solid #8B5CF6;">
                                    <div class="card-body">
                                        <div class="fw-semibold mb-1">Partner Claiming Age</div>
                                        <div class="input-group">
                                            <input class="form-control" type="number" inputmode="numeric" value="@Model!.SSStartAgePartner" min="62" max="70" @onchange="e => OnInputChanged(nameof(Model.SSStartAgePartner), e.Value!)" />
                                            <span class="input-group-text">years</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="card mb-2" style="border-top:4px solid #8B5CF6;">
                                    <div class="card-body">
                                        <div class="fw-semibold mb-1">Partner Monthly Benefit</div>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <input class="form-control" type="number" inputmode="numeric" value="@(Model?.SocialSecurityMonthlyPartner ?? 0m)" step="100" min="0" @onchange="e => OnInputChanged(nameof(Model.SocialSecurityMonthlyPartner), e.Value!)" />
                                        </div>
                                        <div class="text-muted small mt-1">$@((Model!.SocialSecurityMonthlyPartner * 12).ToString("N0")) annually</div>
                                    </div>
                                </div>
                            }

                            <div class="card mb-2">
                                <div class="card-body d-flex justify-content-between">
                                    <span class="text-muted">Total Annual SS</span>
                                    <span class="fw-bold">$@(((Model!.SocialSecurityMonthlyYou + Model!.SocialSecurityMonthlyPartner) * 12).ToString("N0"))</span>
                                </div>
                            </div>
                        </div>
                    }
                    else if (wizardStep == 4)
                    {
                        <label class="form-label mb-3">Reverse Mortgage</label>

                        <!-- Desktop (md+) -->
                        <div class="d-none d-md-block">
                            <div class="card mb-4" style="border-top: 4px solid #F59E0B;">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <i class="bi bi-house-heart-fill me-2" style="color: #F59E0B; font-size: 1.25rem;"></i>
                                        <h5 class="card-title mb-0">Reverse Mortgage Option</h5>
                                    </div>

                                    <div class="form-check form-switch mb-3">
                                        <input class="form-check-input" type="checkbox" id="rmEnabled"
                                               checked="@ReverseMortgageEnabled"
                                               style="width: 3em; height: 1.5em;"
                                               @onchange="e => OnInputChanged(nameof(Model.ReverseMortgageStartAge), (bool)(e.Value ?? false) ? (object)(Math.Max(62, Model?.CurrentAgeYou ?? 62)) : 0)" />
                                        <label class="form-check-label ms-2 fs-5" for="rmEnabled">Enable reverse mortgage</label>
                                    </div>

                                    <div class="text-muted mb-4">
                                        <i class="bi bi-info-circle me-1"></i>
                                        A reverse mortgage allows homeowners 62+ to convert home equity into monthly income while continuing to live in their home.
                                    </div>

                                    @if (ReverseMortgageEnabled)
                                    {
                                        <div class="row mb-3">
                                            <div class="col-md-6 mb-3">
                                                <div class="card" style="border-top: 4px solid #F59E0B;">
                                                    <div class="card-body">
                                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                                            <label class="form-label mb-0">
                                                                Start Age
                                                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipReverseMortgageStartAge = !showToolTipReverseMortgageStartAge" tabindex="0" title="Click for more info"></span>
                                                            </label>
                                                            @if (showToolTipReverseMortgageStartAge)
                                                            {
                                                                <div class="info-tooltip">
                                                                    <strong>Reverse Mortgage Start Age:</strong> The age when you plan to begin receiving payments from a reverse mortgage.
                                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipReverseMortgageStartAge = false"><span class="bi bi-x-lg"></span></span>
                                                                </div>
                                                            }
                                                        </div>

                                                        <div class="input-group">
                                                            <input class="form-control" type="number" value="@(Model!.ReverseMortgageStartAge)"
                                                                   min="62" max="85" style="border-width: 2px;"
                                                                   @onchange="e => OnInputChanged(nameof(Model.ReverseMortgageStartAge), e.Value!)" />
                                                            <span class="input-group-text">years</span>
                                                        </div>
                                                        <div class="text-muted small mt-1">Must be age 62 or older</div>

                                                        <div class="mt-3 p-2" style="background-color: #fef3c7; border-radius: 6px;">
                                                            <div class="d-flex align-items-center">
                                                                <i class="bi bi-calendar-event me-2" style="color: #F59E0B;"></i>
                                                                <div>
                                                                    <div class="small text-muted">Start Year</div>
                                                                    <div class="fw-bold">@(Model.SimulationStartYear + (Model.ReverseMortgageStartAge - Model.CurrentAgeYou))</div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-6 mb-3">
                                                <div class="card" style="border-top: 4px solid #10B981;">
                                                    <div class="card-body">
                                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                                            <label class="form-label mb-0">
                                                                Monthly Income
                                                                <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipReverseMortgageMonthly = !showToolTipReverseMortgageMonthly" tabindex="0" title="Click for more info"></span>
                                                            </label>
                                                            @if (showToolTipReverseMortgageMonthly)
                                                            {
                                                                <div class="info-tooltip">
                                                                    <strong>Monthly Reverse Mortgage Payment:</strong> Estimated monthly income from your reverse mortgage.
                                                                    <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipReverseMortgageMonthly = false"><span class="bi bi-x-lg"></span></span>
                                                                </div>
                                                            }
                                                        </div>

                                                        <div class="input-group mb-3">
                                                            <span class="input-group-text">$</span>
                                                            <input class="form-control currency-input" type="number" value="@(Model?.ReverseMortgageMonthly ?? 0m)" step="100" min="0" style="border-width: 2px;" @onchange="e => OnInputChanged(nameof(Model.ReverseMortgageMonthly), e.Value!)" />
                                                            <span class="input-group-text">/month</span>
                                                        </div>

                                                        <div class="mt-3 p-2" style="background-color: #d1fae5; border-radius: 6px;">
                                                            <div class="text-center">
                                                                <div class="small text-muted">Annual Income</div>
                                                                <div class="fs-4 fw-bold" style="color: #10B981;">$@((Model!.ReverseMortgageMonthly * 12).ToString("N0"))</div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-light text-center">
                                            <i class="bi bi-house-slash me-2"></i> Reverse mortgage option is disabled
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="alert alert-info">
                                <i class="bi bi-info-circle-fill me-2"></i>
                                <strong>About Reverse Mortgages:</strong>
                                <ul class="mb-0 mt-1">
                                    <li>Available to homeowners age 62 and older</li>
                                    <li>Converts home equity into tax-free income while you continue living in your home</li>
                                    <li>No monthly payments required – the loan is repaid when you sell the home, move out, or pass away</li>
                                    <li>Income can be received as a lump sum, monthly payment, or line of credit</li>
                                </ul>
                            </div>
                        </div>

                        <!-- Mobile (xs–sm) -->
                        <div class="d-block d-md-none">
                            <div class="form-check form-switch mb-2">
                                <input class="form-check-input" type="checkbox" id="rmEnabled_m"
                                       checked="@ReverseMortgageEnabled"
                                       @onchange="e => OnInputChanged(nameof(Model.ReverseMortgageStartAge), (bool)(e.Value ?? false) ? (object)(Math.Max(62, Model?.CurrentAgeYou ?? 62)) : 0)" />
                                <label class="form-check-label ms-2" for="rmEnabled_m">Enable reverse mortgage</label>
                            </div>

                            @if (ReverseMortgageEnabled)
                            {
                                <div class="card mb-2" style="border-top:4px solid #F59E0B;">
                                    <div class="card-body">
                                        <div class="fw-semibold mb-1">Start Age</div>
                                        <div class="input-group">
                                            <input class="form-control" type="number" inputmode="numeric" value="@Model!.ReverseMortgageStartAge" min="62" max="85" @onchange="e => OnInputChanged(nameof(Model.ReverseMortgageStartAge), e.Value!)" />
                                            <span class="input-group-text">years</span>
                                        </div>
                                        <div class="text-muted small mt-1">Start Year: @(Model.SimulationStartYear + (Model.ReverseMortgageStartAge - Model.CurrentAgeYou))</div>
                                    </div>
                                </div>

                                <div class="card mb-2" style="border-top:4px solid #10B981;">
                                    <div class="card-body">
                                        <div class="fw-semibold mb-1">Monthly Income</div>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <input class="form-control" type="number" inputmode="numeric" value="@(Model?.ReverseMortgageMonthly ?? 0m)" step="100" min="0" @onchange="e => OnInputChanged(nameof(Model.ReverseMortgageMonthly), e.Value!)" />
                                            <span class="input-group-text">/mo</span>
                                        </div>
                                        <div class="text-center text-muted small mt-1">Annual: $@((Model!.ReverseMortgageMonthly * 12).ToString("N0"))</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-light text-center mb-2">
                                    <i class="bi bi-house-slash me-1"></i> Reverse mortgage disabled
                                </div>
                            }
                        </div>
                    }
                    else if (wizardStep == 5)
                    {
                        <label class="form-label mb-3">Withdrawal Strategy</label>

                        <!-- Desktop (md+) -->
                        <div class="d-none d-md-block">
                            <div class="card mb-4" style="border-top: 4px solid #3B82F6;">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <i class="bi bi-cash-stack me-2" style="color: #3B82F6; font-size: 1.25rem;"></i>
                                        <h5 class="card-title mb-0">Annual Withdrawal Needs</h5>
                                    </div>

                                    <div class="row mb-4">
                                        <div class="col-md-6 mb-3">
                                            <div class="card" style="border-top: 4px solid #4F46E5;">
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <h6 class="mb-0">
                                                            One Person Retired
                                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipWithdrawalOne = !showToolTipWithdrawalOne"></span>
                                                        </h6>
                                                    </div>
                                                    @if (showToolTipWithdrawalOne)
                                                    {
                                                        <div class="info-tooltip">
                                                            Amount to withdraw annually when only one of you is retired.
                                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipWithdrawalOne = false"><span class="bi bi-x-lg"></span></span>
                                                        </div>
                                                    }

                                                    <div class="input-group mt-3 mb-3">
                                                        <span class="input-group-text">$</span>
                                                        <input class="form-control currency-input" type="number"
                                                               value="@(Model?.AnnualWithdrawalOne ?? 0m)" step="1000" min="0"
                                                               @onchange="e => OnInputChanged(nameof(Model.AnnualWithdrawalOne), e.Value!)" />
                                                        <span class="input-group-text">/year</span>
                                                    </div>

                                                    <div class="text-center text-muted">
                                                        $@((Model!.AnnualWithdrawalOne / 12).ToString("N0")) per month
                                                    </div>

                                                    <div class="d-flex align-items-center mt-3 p-2" style="background-color: #f0f7ff; border-radius: 6px;">
                                                        <i class="bi bi-person-fill me-2" style="font-size: 1.25rem; color: #4F46E5;"></i>
                                                        <div>
                                                            <div class="small">One person retired, one working</div>
                                                            <div class="small text-muted">
                                                                @if (Model.CurrentAgePartner > 0 && Model.RetirementAgeYou != Model.RetirementAgePartner)
                                                                {
                                                                    <span>@(Math.Abs(Model.RetirementAgeYou - Model.RetirementAgePartner)) years with only one person retired</span>
                                                                }
                                                                else
                                                                {
                                                                    <span>Both will retire simultaneously</span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <div class="card" style="border-top: 4px solid #10B981;">
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <h6 class="mb-0">
                                                            Both Retired
                                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipWithdrawalBoth = !showToolTipWithdrawalBoth"></span>
                                                        </h6>
                                                    </div>
                                                    @if (showToolTipWithdrawalBoth)
                                                    {
                                                        <div class="info-tooltip">
                                                            Amount to withdraw annually when both of you are retired.
                                                            <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipWithdrawalBoth = false"><span class="bi bi-x-lg"></span></span>
                                                        </div>
                                                    }

                                                    <div class="input-group mt-3 mb-3">
                                                        <span class="input-group-text">$</span>
                                                        <input class="form-control currency-input" type="number"
                                                               value="@(Model?.AnnualWithdrawalBoth ?? 0m)" step="1000" min="0"
                                                               @onchange="e => OnInputChanged(nameof(Model.AnnualWithdrawalBoth), e.Value!)" />
                                                        <span class="input-group-text">/year</span>
                                                    </div>

                                                    <div class="text-center text-muted">
                                                        $@((Model!.AnnualWithdrawalBoth / 12).ToString("N0")) per month
                                                    </div>

                                                    <div class="d-flex align-items-center mt-3 p-2" style="background-color: #ecfdf5; border-radius: 6px;">
                                                        <i class="bi bi-people-fill me-2" style="font-size: 1.25rem; color: #10B981;"></i>
                                                        <div>
                                                            <div class="small">Full retirement for both</div>
                                                            <div class="small text-muted">
                                                                @if (GetOverlapYears() > 0)
                                                                {
                                                                    <span>Approximately @GetOverlapYears() years together in retirement</span>
                                                                }
                                                                else
                                                                {
                                                                    <span>No overlap in retirement years</span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Income Sources -->
                                    <div class="card" style="border: none; background-color: #f8f9fa;">
                                        <div class="card-body">
                                            <h6 class="mb-3">Potential Income Sources in Retirement</h6>

                                            @{
                                                decimal totalAnnualIncome = (Model.SocialSecurityMonthlyYou + Model.SocialSecurityMonthlyPartner) * 12;
                                                totalAnnualIncome += Model.ReverseMortgageMonthly * 12;

                                                decimal ssPercent = Model.AnnualWithdrawalBoth > 0 ?
                                                Math.Min(100, ((Model.SocialSecurityMonthlyYou + Model.SocialSecurityMonthlyPartner) * 12 / Model.AnnualWithdrawalBoth) * 100) : 0;

                                                decimal rmPercent = Model.AnnualWithdrawalBoth > 0 ?
                                                Math.Min(100, (Model.ReverseMortgageMonthly * 12 / Model.AnnualWithdrawalBoth) * 100) : 0;

                                                decimal portPercent = Math.Max(0, 100 - ssPercent - rmPercent);
                                            }

                                            <div class="progress" style="height: 24px; margin-bottom: 1rem;">
                                                <div class="progress-bar bg-primary" role="progressbar" style="width: @ssPercent%;" title="Social Security">
                                                    @if (ssPercent >= 15)
                                                    {
                                                        <span>Social Security</span>
                                                    }
                                                </div>
                                                @if (Model.ReverseMortgageStartAge > 0 && Model.ReverseMortgageMonthly > 0)
                                                {
                                                    <div class="progress-bar bg-warning text-dark" role="progressbar" style="width: @rmPercent%;" title="Reverse Mortgage">
                                                        @if (rmPercent >= 15)
                                                        {
                                                            <span>RM</span>
                                                        }
                                                    </div>
                                                }
                                                <div class="progress-bar bg-success" role="progressbar" style="width: @portPercent%;" title="Portfolio Withdrawals">
                                                    @if (portPercent >= 15)
                                                    {
                                                        <span>Portfolio</span>
                                                    }
                                                </div>
                                            </div>

                                            <div class="row text-center">
                                                <div class="col">
                                                    <div class="d-flex align-items-center justify-content-center">
                                                        <div style="width: 12px; height: 12px; background-color: #3B82F6; margin-right: 5px;"></div>
                                                        <span>Social Security: @ssPercent.ToString("0")%</span>
                                                    </div>
                                                </div>
                                                @if (Model.ReverseMortgageStartAge > 0 && Model.ReverseMortgageMonthly > 0)
                                                {
                                                    <div class="col">
                                                        <div class="d-flex align-items-center justify-content-center">
                                                            <div style="width: 12px; height: 12px; background-color: #F59E0B; margin-right: 5px;"></div>
                                                            <span>Reverse Mortgage: @rmPercent.ToString("0")%</span>
                                                        </div>
                                                    </div>
                                                }
                                                <div class="col">
                                                    <div class="d-flex align-items-center justify-content-center">
                                                        <div style="width: 12px; height: 12px; background-color: #10B981; margin-right: 5px;"></div>
                                                        <span>Portfolio: @portPercent.ToString("0")%</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>

                            <div class="alert alert-info">
                                <i class="bi bi-lightbulb-fill me-2"></i>
                                <strong>Withdrawal Strategy Tips:</strong>
                                <ul class="mb-0 mt-1">
                                    <li>The 4% rule: withdraw 4% in the first year, then adjust for inflation</li>
                                    <li>Consider tax impact when choosing accounts to withdraw from</li>
                                    <li>RMDs for traditional accounts begin at age 73</li>
                                </ul>
                            </div>
                        </div>

                        <!-- Mobile (xs–sm) -->
                        <div class="d-block d-md-none">
                            <div class="card mb-2" style="border-top:4px solid #4F46E5;">
                                <div class="card-body">
                                    <div class="fw-semibold mb-1">One Person Retired</div>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.AnnualWithdrawalOne ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.AnnualWithdrawalOne), e.Value!)" />
                                        <span class="input-group-text">/yr</span>
                                    </div>
                                    <div class="text-muted small mt-1">$@((Model!.AnnualWithdrawalOne / 12).ToString("N0")) per month</div>
                                </div>
                            </div>

                            <div class="card mb-2" style="border-top:4px solid #10B981;">
                                <div class="card-body">
                                    <div class="fw-semibold mb-1">Both Retired</div>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input class="form-control" type="number" inputmode="numeric" value="@(Model?.AnnualWithdrawalBoth ?? 0m)" step="1000" min="0" @onchange="e => OnInputChanged(nameof(Model.AnnualWithdrawalBoth), e.Value!)" />
                                        <span class="input-group-text">/yr</span>
                                    </div>
                                    <div class="text-muted small mt-1">$@((Model!.AnnualWithdrawalBoth / 12).ToString("N0")) per month</div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (wizardStep == 6)
                    {
                        <label class="form-label mb-3">Life Expectancy &amp; Planning Horizon</label>

                        <!-- Desktop (md+) -->
                        <div class="d-none d-md-block">
                            <div class="card mb-4" style="border-top: 4px solid #8B5CF6;">
                                <div class="card-body">
                                    <div class="d-flex align-items-center mb-3">
                                        <i class="bi bi-hourglass-split me-2" style="color: #8B5CF6; font-size: 1.25rem;"></i>
                                        <h5 class="card-title mb-0">Life Expectancy</h5>
                                    </div>

                                    <div class="alert alert-info mb-3">
                                        <i class="bi bi-info-circle-fill me-2"></i>
                                        <strong>Planning for longevity:</strong> A conservative estimate (like 100) helps ensure you don't outlive your savings.
                                    </div>

                                    <div class="row mb-4">
                                        <div class="col-md-6 mb-3">
                                            <div class="card" style="border-top: 4px solid #2563EB;">
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                                        <label class="form-label mb-0">
                                                            Your Life Expectancy
                                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipLifeExpectancyYou = !showToolTipLifeExpectancyYou" tabindex="0" title="Click for more info"></span>
                                                        </label>
                                                        @if (showToolTipLifeExpectancyYou)
                                                        {
                                                            <div class="info-tooltip">
                                                                <strong>Your Life Expectancy:</strong> The age you expect to live to (default 100).
                                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipLifeExpectancyYou = false"><span class="bi bi-x-lg"></span></span>
                                                            </div>
                                                        }
                                                    </div>

                                                    <div class="input-group mb-3">
                                                        <input class="form-control currency-input" type="number" value="@LifeExpectancyAgeYou" min="55" max="120" style="border-width: 2px;" @onchange="e => OnInputChanged(nameof(Model.LifeExpectancyYou), e.Value!)" />
                                                        <span class="input-group-text">years</span>
                                                    </div>

                                                    @if (Model?.CurrentAgeYou > 0 && LifeExpectancyAgeYou > Model.CurrentAgeYou)
                                                    {
                                                        <div class="text-center p-2 mt-2" style="background-color: #f0f7ff; border-radius: 6px;">
                                                            <div class="small text-muted">Years in retirement</div>
                                                            <strong class="fs-4 text-primary">@(LifeExpectancyAgeYou - (Model?.RetirementAgeYou ?? 65))</strong>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <div class="card" style="border-top: 4px solid #8B5CF6;">
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                                        <label class="form-label mb-0">
                                                            Partner's Life Expectancy
                                                            <span class="bi bi-info-circle info-icon" @onclick="() => showToolTipLifeExpectancyPartner = !showToolTipLifeExpectancyPartner" tabindex="0" title="Click for more info"></span>
                                                        </label>
                                                        @if (showToolTipLifeExpectancyPartner)
                                                        {
                                                            <div class="info-tooltip">
                                                                <strong>Partner's Life Expectancy:</strong> Leave at 100 or adjust.
                                                                <span class="float-end" style="cursor:pointer;" @onclick="() => showToolTipLifeExpectancyPartner = false"><span class="bi bi-x-lg"></span></span>
                                                            </div>
                                                        }
                                                    </div>

                                                    <div class="input-group mb-3">
                                                        <input class="form-control currency-input" type="number" value="@LifeExpectancyAgePartner" min="0" max="120" style="border-width: 2px;" @onchange="e => OnInputChanged(nameof(Model.LifeExpectancyPartner), e.Value!)" />
                                                        <span class="input-group-text">years</span>
                                                    </div>

                                                    <div class="small-note">Leave at 100 to use conservative default</div>

                                                    @if (Model?.CurrentAgePartner > 0 && LifeExpectancyAgePartner > Model.CurrentAgePartner)
                                                    {
                                                        <div class="text-center p-2 mt-2" style="background-color: #faf5ff; border-radius: 6px;">
                                                            <div class="small text-muted">Partner's years in retirement</div>
                                                            <strong class="fs-4" style="color: #8B5CF6;">@(LifeExpectancyAgePartner - (Model?.RetirementAgePartner ?? 65))</strong>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="alert alert-success">
                                <i class="bi bi-check-circle-fill me-2"></i>
                                <strong>You're all set!</strong> Click "Save & Finish" below to complete your retirement plan setup.
                            </div>
                        </div>

                        <!-- Mobile (xs–sm) -->
                        <div class="d-block d-md-none">
                            <div class="card mb-2" style="border-top:4px solid #2563EB;">
                                <div class="card-body">
                                    <div class="fw-semibold mb-1">Your Life Expectancy</div>
                                    <div class="input-group">
                                        <input class="form-control" type="number" inputmode="numeric" value="@LifeExpectancyAgeYou" min="55" max="120" @onchange="e => OnInputChanged(nameof(Model.LifeExpectancyYou), e.Value!)" />
                                        <span class="input-group-text">years</span>
                                    </div>
                                    @if (Model?.CurrentAgeYou > 0 && LifeExpectancyAgeYou > Model.CurrentAgeYou)
                                    {
                                        <div class="text-center text-muted small mt-1">Years in retirement: @(LifeExpectancyAgeYou - (Model?.RetirementAgeYou ?? 65))</div>
                                    }
                                </div>
                            </div>

                            <div class="card mb-2" style="border-top:4px solid #8B5CF6;">
                                <div class="card-body">
                                    <div class="fw-semibold mb-1">Partner's Life Expectancy</div>
                                    <div class="input-group">
                                        <input class="form-control" type="number" inputmode="numeric" value="@LifeExpectancyAgePartner" min="0" max="120" @onchange="e => OnInputChanged(nameof(Model.LifeExpectancyPartner), e.Value!)" />
                                        <span class="input-group-text">years</span>
                                    </div>
                                    @if (Model?.CurrentAgePartner > 0 && LifeExpectancyAgePartner > Model.CurrentAgePartner)
                                    {
                                        <div class="text-center text-muted small mt-1">Years in retirement: @(LifeExpectancyAgePartner - (Model?.RetirementAgePartner ?? 65))</div>
                                    }
                                </div>
                            </div>

                            <div class="alert alert-success mt-2">
                                <i class="bi bi-check-circle-fill me-1"></i>
                                You're all set. Tap Save &amp; Finish to complete setup.
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" aria-label="Save & Close" @onclick="CloseClicked">Save & Close</button>
                    <button type="button" class="btn btn-primary" @onclick="PrevwizardStep" disabled="@(wizardStep == 1)">Previous</button>
                    <button type="button" class="btn btn-primary" @onclick="NextOrSubmit">@(wizardStep == 6 ? "Save & Finish" : "Save & Next")</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public CalendarSpendingModel? Model { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback<(int AgeYou, int AgePartner)> OnFinished { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public int InitialStep { get; set; } = 1;

    private int wizardStep = 1;
    private bool _wasVisible = false;
    private int _lastInitialStep = 1;

    // Tooltip visibility flags
    private bool showToolTipCurrentAgeYou = false;
    private bool showToolTipCurrentAgePartner = false;
    private bool showToolTipRetirementAgeYou = false;
    private bool showToolTipRetirementAgePartner = false;
    private bool showToolTipLifeExpectancyYou = false;
    private bool showToolTipLifeExpectancyPartner = false;
    private bool showToolTipTaxableBalance = false;
    private bool showToolTipTraditionalBalance = false;
    private bool showToolTipRothBalance = false;
    private bool showToolTipInvestmentReturn = false;
    private bool showToolTipInflationRate = false;
    private bool showToolTipSocialSecurityYou = false;
    private bool showToolTipSocialSecurityPartner = false;
    private bool showToolTipSSStartAgeYou = false;
    private bool showToolTipSSStartAgePartner = false;
    private bool showToolTipReverseMortgageStartAge = false;
    private bool showToolTipReverseMortgageMonthly = false;
    private bool showToolTipWithdrawalOne = false;
    private bool showToolTipWithdrawalBoth = false;
    private bool showToolTipYearsInfo = false;
    private bool showToolTipInflationInfo = false;

    private decimal TotalStarting => (Model?.TaxableBalance ?? 0) + (Model?.TraditionalBalance ?? 0) + (Model?.RothBalance ?? 0);

    private async Task OnInputChanged(string propertyName, object value)
    {
        if (Model == null) return;

        var prop = Model.GetType().GetProperty(propertyName, BindingFlags.Public | BindingFlags.Instance);
        if (prop != null && prop.CanWrite)
        {
            // Convert value to the correct type
            var targetType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
            var safeValue = Convert.ChangeType(value, targetType);
            prop.SetValue(Model, safeValue);
            TrySyncModel();

            // Persist certain age fields back to localStorage so Savings can pick them up if empty
            //await PersistAgesToSavingsLocalStorageAsync(propertyName);

            await InvokeOnSaveSafe();
        }
    }
    private int GetOverlapYears()
    {
        if (Model == null || Model.CurrentAgePartner <= 0 || Model.RetirementAgePartner <= 0) return 0;

        int yourRemainingYears = LifeExpectancyAgeYou - Model.RetirementAgeYou;
        int partnerRemainingYears = (LifeExpectancyAgePartner > 0 ? LifeExpectancyAgePartner : LifeExpectancyAgeYou) - Model.RetirementAgePartner;
        int lateRetiree = Math.Max(Model.RetirementAgeYou, Model.RetirementAgePartner);
        int earlyDeceased = Math.Min(LifeExpectancyAgeYou, (LifeExpectancyAgePartner > 0 ? LifeExpectancyAgePartner : LifeExpectancyAgeYou));

        return Math.Max(0, earlyDeceased - lateRetiree);
    }

    private double GetTimelinePercentage(int currentAge, int targetAge)
    {
        int maxAge = Math.Max(
            LifeExpectancyAgeYou,
            LifeExpectancyAgePartner > 0 ? LifeExpectancyAgePartner : LifeExpectancyAgeYou
        );
        int minAge = Math.Min(Model?.CurrentAgeYou ?? 0, (Model?.CurrentAgePartner ?? 0) > 0 ? (Model?.CurrentAgePartner ?? 0) : (Model?.CurrentAgeYou ?? 0));
        double totalSpan = maxAge - minAge;

        return Math.Min(100, Math.Max(0, ((targetAge - minAge) / totalSpan) * 100));
    }


    protected override void OnParametersSet()
    {
        if (Model == null)
        {
            Model = new CalendarSpendingModel();
        }

        if (Visible)
        {
            if (!_wasVisible)
            {
                if (InitialStep >= 1 && InitialStep <= 6)
                {
                    wizardStep = InitialStep;
                }
                _lastInitialStep = InitialStep;
            }
            else if (InitialStep != _lastInitialStep)
            {
                if (InitialStep >= 1 && InitialStep <= 6)
                {
                    wizardStep = InitialStep;
                }
                _lastInitialStep = InitialStep;
            }
        }

        _wasVisible = Visible;
    }

    private async Task PrevwizardStep()
    {
        if (wizardStep > 1)
        {
            TrySyncModel();
            await InvokeOnSaveSafe();
            wizardStep--;
            StateHasChanged();
        }
    }

    private async Task NextOrSubmit()
    {
        if (wizardStep < 6)
        {
            // Step 1 validation: require current ages and retirement ages
            if (wizardStep == 1)
            {
                if (Model == null || Model.CurrentAgeYou <= 0 || Model.RetirementAgeYou <= 0 || Model.CurrentAgePartner <= 0 || Model.RetirementAgePartner <= 0)
                {
                    return; // Don't proceed if required fields are missing
                }
            }

            TrySyncModel();
            await InvokeOnSaveSafe();

            wizardStep++;
            StateHasChanged();
            return;
        }

        // final step: sync, save, and close
        TrySyncModel();

        // Ensure life expectancy defaults are applied if not set
        if (Model != null)
        {
            if (Model.LifeExpectancyYou == 0) Model.LifeExpectancyYou = 100;
            if (Model.LifeExpectancyPartner == 0) Model.LifeExpectancyPartner = 100;
        }

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync();
        }
        if (OnFinished.HasDelegate && Model != null)
        {
            await OnFinished.InvokeAsync((Model.RetirementAgeYou, Model.RetirementAgePartner));
        }

        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private async Task CloseClicked()
    {
        TrySyncModel();
        await InvokeOnSaveSafe();

        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        wizardStep = 1;
    }

    private void TrySyncModel()
    {
        try
        {
            Model?.SyncRetirementYearsFromAges();
        }
        catch { }
    }

    private async Task InvokeOnSaveSafe()
    {
        try
        {
            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync();
            }
        }
        catch { }
    }

    // Conversion helpers for life expectancy (age vs year)
    private int LifeExpectancyAgeYou
    {
        get
        {
            if (Model == null) return 100;
            var v = Model.LifeExpectancyYou;
            // If not set (0), default to 100
            if (v == 0) return 100;
            if (v > 1900)
            {
                var currentAge = Model.CurrentAgeYou > 0 ? Model.CurrentAgeYou : 0;
                return currentAge > 0 ? currentAge + (v - DateTime.Now.Year) : v - DateTime.Now.Year;
            }
            return v;
        }
        set
        {
            if (Model == null) return;
            if (Model.LifeExpectancyYou > 1900)
            {
                var baseAge = Model.CurrentAgeYou > 0 ? Model.CurrentAgeYou : 0;
                Model.LifeExpectancyYou = DateTime.Now.Year + (value - baseAge);
            }
            else
            {
                Model.LifeExpectancyYou = value;
            }
        }
    }

    private int LifeExpectancyAgePartner
    {
        get
        {
            if (Model == null) return 100;
            var v = Model.LifeExpectancyPartner;
            // If not set (0), default to 100
            if (v == 0) return 100;
            if (v > 1900)
            {
                var currentAge = Model.CurrentAgePartner > 0 ? Model.CurrentAgePartner : 0;
                return currentAge > 0 ? currentAge + (v - DateTime.Now.Year) : v - DateTime.Now.Year;
            }
            return v;
        }
        set
        {
            if (Model == null) return;
            if (Model.LifeExpectancyPartner > 1900)
            {
                var baseAge = Model.CurrentAgePartner > 0 ? Model.CurrentAgePartner : 0;
                Model.LifeExpectancyPartner = DateTime.Now.Year + (value - baseAge);
            }
            else
            {
                Model.LifeExpectancyPartner = value;
            }
        }
    }

    private bool ReverseMortgageEnabled
    {
        get => Model != null && Model.ReverseMortgageStartAge > 0;
        set
        {
            if (Model == null) return;
            if (value)
            {
                if (Model.ReverseMortgageStartAge == 0) Model.ReverseMortgageStartAge = Math.Max(60, Model.CurrentAgeYou);
            }
            else
            {
                Model.ReverseMortgageStartAge = 0;
            }
        }
    }

    private decimal CalculateProjectedAmount(decimal principal, decimal rate, int years)
    {
        return principal * (decimal)Math.Pow((double)(1 + rate / 100), years);
    }

    private decimal CalculateInflationAdjusted(decimal amount, decimal inflationRate, int years)
    {
        return amount * (decimal)Math.Pow((double)(1 + inflationRate / 100), years);
    }


    // Savings hints (nullable means "not found")
    private int? savingsCurrentAgeYou, savingsRetirementAgeYou, savingsCurrentAgePartner, savingsRetirementAgePartner;
    private bool _hintsLoaded;
    private DateTime? hintsFetchedAt;

    private bool ShowHint(int? suggestion, int currentValue)
        => suggestion.HasValue && suggestion.Value > 0 && (currentValue <= 0 || suggestion.Value != currentValue);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Visible && wizardStep == 1 && !_hintsLoaded)
        {
            await LoadRetirementHintsAsync();
            _hintsLoaded = true;
            StateHasChanged();
        }
    }

    // private async Task RefreshHintsAsync()
    // {
    //     _hintsLoaded = false;
    //     await LoadRetirementHintsAsync();
    //     _hintsLoaded = true;
    //     StateHasChanged();
    // }


    private async Task LoadRetirementHintsAsync()
    {
        try
        {
            var userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);

            // 1) Try to load retirement model from backend
            CalendarSpendingModel? backendRet = null;
            try
            {
                var retUrl = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType=retirement_planner";
                backendRet = await client.GetFromJsonAsync<CalendarSpendingModel>(retUrl);
            }
            catch { backendRet = null; }

            // If backend returned a model with real data, merge it into Model
            if (backendRet != null)
            {
                // Merge so Model reference (Parameter) is kept and UI binding stays intact
                Model = backendRet;
            }
            else
            {
                // Ensure Model exists even if backend returned null
                if (Model == null) Model = new CalendarSpendingModel();
            }

            // // If any essential age fields are missing (0), try to seed from savings backend models
            // bool anyMissing =
            //     (Model.CurrentAgeYou <= 0 || Model.RetirementAgeYou <= 0) ||
            //     (Model.CurrentAgePartner <= 0 || Model.RetirementAgePartner <= 0);

            //if (anyMissing)
            // {
            // Load savings models (yours + partner) from backend
            SavingsCalculatorModel? savingsYours = null;
            SavingsCalculatorModel? savingsPartner = null;
            try
            {
                var yoursUrl = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType=savings_yours";
                savingsYours = await client.GetFromJsonAsync<SavingsCalculatorModel>(yoursUrl);
            }
            catch { savingsYours = null; }

            try
            {
                var partnerUrl = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType=savings_partners";
                savingsPartner = await client.GetFromJsonAsync<SavingsCalculatorModel>(partnerUrl);
            }
            catch { savingsPartner = null; }

            var changed = false;

            savingsCurrentAgeYou = savingsYours?.CurrentAge;
            savingsRetirementAgeYou = savingsYours?.RetirementAge;
            savingsCurrentAgePartner = savingsPartner?.CurrentAge;
            savingsRetirementAgePartner = savingsPartner?.RetirementAge;

            if ((Model.CurrentAgeYou <= 0) && (savingsYours?.CurrentAge ?? 0) > 0)
            {
                Model.CurrentAgeYou = savingsYours!.CurrentAge;
                changed = true;
            }

            if ((Model.RetirementAgeYou <= 0) && (savingsYours?.RetirementAge ?? 0) > 0)
            {
                Model.RetirementAgeYou = savingsYours!.RetirementAge;
                changed = true;
            }

            if ((Model.CurrentAgePartner <= 0) && (savingsPartner?.CurrentAge ?? 0) > 0)
            {
                Model.CurrentAgePartner = savingsPartner!.CurrentAge;
                changed = true;
            }

            if ((Model.RetirementAgePartner <= 0) && (savingsPartner?.RetirementAge ?? 0) > 0)
            {
                Model.RetirementAgePartner = savingsPartner!.RetirementAge;
                changed = true;
            }

            if (changed)
            {
                TrySyncModel();
                // Save merged retirement model back to backend so retirement becomes canonical
                await PersistRetirementToBackendAsync();
            }
            // }

            // record timestamp for UI if you still need hintsFetchedAt
            hintsFetchedAt = DateTime.Now;
        }
        catch
        {
            // keep best-effort behavior: fail silently
            hintsFetchedAt = DateTime.Now;
        }
    }

    private async Task PersistRetirementToBackendAsync()
    {
        try
        {
            var userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);

            var payload = new
            {
                UserGuid = userGuid,
                CalculatorType = "retirement",
                Data = Model
            };

            var json = System.Text.Json.JsonSerializer.Serialize(payload);
            using var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            await client.PostAsync($"{apiBaseUrl}/api/FinPlan/save", content);
        }
        catch
        {
            // best-effort — swallow errors or add logging via DebugService if available
        }
    }

    private async Task CopyFromSavings(string propertyName)
    {
        try
        {
            var userGuid = await UserGuidService.GetOrCreateUserGuidAsync();
            var apiBaseUrl = GetApiBaseUrl();
            var client = HttpCustomClientService.CreateRetryClient(HttpClientFactory);

            // decide which savings model to call based on property (yours vs partner)
            var isPartnerField = propertyName.Contains("Partner", StringComparison.OrdinalIgnoreCase);
            var calculatorType = isPartnerField ? "savings_partners" : "savings_yours";

            var url = $"{apiBaseUrl}/api/FinPlan/load?userGuid={userGuid}&calculatorType={calculatorType}";
            var saved = await client.GetFromJsonAsync<SavingsCalculatorModel>(url);
            if (saved == null) return;

            int? value = propertyName switch
            {
                nameof(Model.CurrentAgeYou) => saved.CurrentAge,
                nameof(Model.RetirementAgeYou) => saved.RetirementAge,
                nameof(Model.CurrentAgePartner) => saved.CurrentAge,
                nameof(Model.RetirementAgePartner) => saved.RetirementAge,
                _ => null
            };

            if (value.HasValue && value.Value > 0)
            {
                await OnInputChanged(propertyName, value.Value);
            }
        }
        catch
        {
            // ignore
        }
    }
}

@code {
    // Add a small DTO to map the API response
    private sealed class SavingsAgesDto
    {
        public int CurrentAgeYou { get; set; }
        public int RetirementAgeYou { get; set; }
        public int CurrentAgePartner { get; set; }
        public int RetirementAgePartner { get; set; }
        public DateTime? LastUpdatedUtc { get; set; }
    }

    private string GetApiBaseUrl()
    {
#if DEBUG
    return Configuration["FinPlanSettings:ApiBaseUrlLocal"] ?? "https://localhost:7330";
#else
        return Configuration["FinPlanSettings:ApiBaseUrlCloud"] ?? "api-money-amperespark-bnbva5h5g6gme6fm.eastus2-01.azurewebsites.net";
#endif
    }

    // Replace previous LoadSavingsHintsAsync with this API-based implementation

    // private async Task PersistAgesToSavingsLocalStorageAsync(string propertyName)
    // {
    //     if (JSRuntime == null || Model == null) return;

    //     try
    //     {
    //         switch (propertyName)
    //         {
    //             case nameof(Model.CurrentAgeYou):
    //                 if (Model.CurrentAgeYou > 0)
    //                     await JSRuntime.InvokeVoidAsync("localStorage.setItem", "Savings.CurrentAge.You", Model.CurrentAgeYou.ToString());
    //                 break;
    //             case nameof(Model.RetirementAgeYou):
    //                 if (Model.RetirementAgeYou > 0)
    //                     await JSRuntime.InvokeVoidAsync("localStorage.setItem", "Savings.RetirementAge.You", Model.RetirementAgeYou.ToString());
    //                 break;
    //             case nameof(Model.CurrentAgePartner):
    //                 if (Model.CurrentAgePartner > 0)
    //                     await JSRuntime.InvokeVoidAsync("localStorage.setItem", "Savings.CurrentAge.Partner", Model.CurrentAgePartner.ToString());
    //                 break;
    //             case nameof(Model.RetirementAgePartner):
    //                 if (Model.RetirementAgePartner > 0)
    //                     await JSRuntime.InvokeVoidAsync("localStorage.setItem", "Savings.RetirementAge.Partner", Model.RetirementAgePartner.ToString());
    //                 break;
    //             default:
    //                 break;
    //         }
    //     }
    //     catch
    //     {
    //         // best-effort only
    //     }
    // }
}